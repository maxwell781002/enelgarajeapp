/**
 * Client
 **/

import * as runtime from "./runtime/library.js";
import $Types = runtime.Types; // general types
import $Public = runtime.Types.Public;
import $Utils = runtime.Types.Utils;
import $Extensions = runtime.Types.Extensions;
import $Result = runtime.Types.Result;

export type PrismaPromise<T> = $Public.PrismaPromise<T>;

/**
 * Model Business
 *
 */
export type Business = $Result.DefaultSelection<Prisma.$BusinessPayload>;
/**
 * Model TelegramBusiness
 *
 */
export type TelegramBusiness =
  $Result.DefaultSelection<Prisma.$TelegramBusinessPayload>;
/**
 * Model PaymentMethod
 *
 */
export type PaymentMethod =
  $Result.DefaultSelection<Prisma.$PaymentMethodPayload>;
/**
 * Model Category
 *
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>;
/**
 * Model Product
 *
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>;
/**
 * Model User
 *
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>;
/**
 * Model UserBusiness
 *
 */
export type UserBusiness =
  $Result.DefaultSelection<Prisma.$UserBusinessPayload>;
/**
 * Model InvitationLink
 *
 */
export type InvitationLink =
  $Result.DefaultSelection<Prisma.$InvitationLinkPayload>;
/**
 * Model Order
 *
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>;
/**
 * Model OrderProduct
 *
 */
export type OrderProduct =
  $Result.DefaultSelection<Prisma.$OrderProductPayload>;
/**
 * Model Account
 *
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>;
/**
 * Model Session
 *
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>;
/**
 * Model VerificationToken
 *
 */
export type VerificationToken =
  $Result.DefaultSelection<Prisma.$VerificationTokenPayload>;
/**
 * Model Authenticator
 *
 */
export type Authenticator =
  $Result.DefaultSelection<Prisma.$AuthenticatorPayload>;
/**
 * Model Address
 *
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>;
/**
 * Model Neighborhood
 *
 */
export type Neighborhood =
  $Result.DefaultSelection<Prisma.$NeighborhoodPayload>;
/**
 * Model UserAddress
 *
 */
export type UserAddress = $Result.DefaultSelection<Prisma.$UserAddressPayload>;
/**
 * Model OrderAddress
 *
 */
export type OrderAddress =
  $Result.DefaultSelection<Prisma.$OrderAddressPayload>;
/**
 * Model BusinessNeighborhood
 *
 */
export type BusinessNeighborhood =
  $Result.DefaultSelection<Prisma.$BusinessNeighborhoodPayload>;

/**
 * Enums
 */
export namespace $Enums {
  export const BusinessPlan: {
    BASIC: "BASIC";
    ENTERPRISE: "ENTERPRISE";
  };

  export type BusinessPlan = (typeof BusinessPlan)[keyof typeof BusinessPlan];

  export const PaymentMethodType: {
    TRANSFERMOVIL: "TRANSFERMOVIL";
    ENZONA: "ENZONA";
  };

  export type PaymentMethodType =
    (typeof PaymentMethodType)[keyof typeof PaymentMethodType];

  export const UserRoles: {
    USER: "USER";
    ADMIN: "ADMIN";
  };

  export type UserRoles = (typeof UserRoles)[keyof typeof UserRoles];

  export const UserBusinessType: {
    OWNER: "OWNER";
    COLLABORATOR: "COLLABORATOR";
  };

  export type UserBusinessType =
    (typeof UserBusinessType)[keyof typeof UserBusinessType];

  export const OrderStatus: {
    CREATED: "CREATED";
    SEND: "SEND";
    PAYED: "PAYED";
    REJECTED: "REJECTED";
  };

  export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];
}

export type BusinessPlan = $Enums.BusinessPlan;

export const BusinessPlan: typeof $Enums.BusinessPlan;

export type PaymentMethodType = $Enums.PaymentMethodType;

export const PaymentMethodType: typeof $Enums.PaymentMethodType;

export type UserRoles = $Enums.UserRoles;

export const UserRoles: typeof $Enums.UserRoles;

export type UserBusinessType = $Enums.UserBusinessType;

export const UserBusinessType: typeof $Enums.UserBusinessType;

export type OrderStatus = $Enums.OrderStatus;

export const OrderStatus: typeof $Enums.OrderStatus;

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Businesses
 * const businesses = await prisma.business.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = "log" extends keyof ClientOptions
    ? ClientOptions["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions["log"]>
      : never
    : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["other"] };

  /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Businesses
   * const businesses = await prisma.business.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(
    optionsArg?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>,
  );
  $on<V extends U>(
    eventType: V,
    callback: (
      event: V extends "query" ? Prisma.QueryEvent : Prisma.LogEvent,
    ) => void,
  ): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel },
  ): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (
      prisma: Omit<PrismaClient, runtime.ITXClientDenyList>,
    ) => $Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    },
  ): $Utils.JsPromise<R>;

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>;

  /**
   * `prisma.business`: Exposes CRUD operations for the **Business** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Businesses
   * const businesses = await prisma.business.findMany()
   * ```
   */
  get business(): Prisma.BusinessDelegate<ExtArgs>;

  /**
   * `prisma.telegramBusiness`: Exposes CRUD operations for the **TelegramBusiness** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TelegramBusinesses
   * const telegramBusinesses = await prisma.telegramBusiness.findMany()
   * ```
   */
  get telegramBusiness(): Prisma.TelegramBusinessDelegate<ExtArgs>;

  /**
   * `prisma.paymentMethod`: Exposes CRUD operations for the **PaymentMethod** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PaymentMethods
   * const paymentMethods = await prisma.paymentMethod.findMany()
   * ```
   */
  get paymentMethod(): Prisma.PaymentMethodDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Products
   * const products = await prisma.product.findMany()
   * ```
   */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userBusiness`: Exposes CRUD operations for the **UserBusiness** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserBusinesses
   * const userBusinesses = await prisma.userBusiness.findMany()
   * ```
   */
  get userBusiness(): Prisma.UserBusinessDelegate<ExtArgs>;

  /**
   * `prisma.invitationLink`: Exposes CRUD operations for the **InvitationLink** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InvitationLinks
   * const invitationLinks = await prisma.invitationLink.findMany()
   * ```
   */
  get invitationLink(): Prisma.InvitationLinkDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Orders
   * const orders = await prisma.order.findMany()
   * ```
   */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.orderProduct`: Exposes CRUD operations for the **OrderProduct** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrderProducts
   * const orderProducts = await prisma.orderProduct.findMany()
   * ```
   */
  get orderProduct(): Prisma.OrderProductDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more VerificationTokens
   * const verificationTokens = await prisma.verificationToken.findMany()
   * ```
   */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.authenticator`: Exposes CRUD operations for the **Authenticator** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Authenticators
   * const authenticators = await prisma.authenticator.findMany()
   * ```
   */
  get authenticator(): Prisma.AuthenticatorDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Addresses
   * const addresses = await prisma.address.findMany()
   * ```
   */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.neighborhood`: Exposes CRUD operations for the **Neighborhood** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Neighborhoods
   * const neighborhoods = await prisma.neighborhood.findMany()
   * ```
   */
  get neighborhood(): Prisma.NeighborhoodDelegate<ExtArgs>;

  /**
   * `prisma.userAddress`: Exposes CRUD operations for the **UserAddress** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserAddresses
   * const userAddresses = await prisma.userAddress.findMany()
   * ```
   */
  get userAddress(): Prisma.UserAddressDelegate<ExtArgs>;

  /**
   * `prisma.orderAddress`: Exposes CRUD operations for the **OrderAddress** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrderAddresses
   * const orderAddresses = await prisma.orderAddress.findMany()
   * ```
   */
  get orderAddress(): Prisma.OrderAddressDelegate<ExtArgs>;

  /**
   * `prisma.businessNeighborhood`: Exposes CRUD operations for the **BusinessNeighborhood** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BusinessNeighborhoods
   * const businessNeighborhoods = await prisma.businessNeighborhood.findMany()
   * ```
   */
  get businessNeighborhood(): Prisma.BusinessNeighborhoodDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF;

  export type PrismaPromise<T> = $Public.PrismaPromise<T>;

  /**
   * Validator
   */
  export import validator = runtime.Public.validator;

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError;
  export import PrismaClientValidationError = runtime.PrismaClientValidationError;
  export import NotFoundError = runtime.NotFoundError;

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag;
  export import empty = runtime.empty;
  export import join = runtime.join;
  export import raw = runtime.raw;
  export import Sql = runtime.Sql;

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal;

  export type DecimalJsLike = runtime.DecimalJsLike;

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics;
  export type Metric<T> = runtime.Metric<T>;
  export type MetricHistogram = runtime.MetricHistogram;
  export type MetricHistogramBucket = runtime.MetricHistogramBucket;

  /**
   * Extensions
   */
  export import Extension = $Extensions.UserArgs;
  export import getExtensionContext = runtime.Extensions.getExtensionContext;
  export import Args = $Public.Args;
  export import Payload = $Public.Payload;
  export import Result = $Public.Result;
  export import Exact = $Public.Exact;

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string;
  };

  export const prismaVersion: PrismaVersion;

  /**
   * Utility Types
   */

  export import JsonObject = runtime.JsonObject;
  export import JsonArray = runtime.JsonArray;
  export import JsonValue = runtime.JsonValue;
  export import InputJsonObject = runtime.InputJsonObject;
  export import InputJsonArray = runtime.InputJsonArray;
  export import InputJsonValue = runtime.InputJsonValue;

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
     * Type of `Prisma.DbNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class DbNull {
      private DbNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.JsonNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class JsonNull {
      private JsonNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.AnyNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class AnyNull {
      private AnyNull: never;
      private constructor();
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull;

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull;

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull;

  type SelectAndInclude = {
    select: any;
    include: any;
  };

  type SelectAndOmit = {
    select: any;
    omit: any;
  };

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> =
    T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<
    T extends (...args: any) => $Utils.JsPromise<any>,
  > = PromiseType<ReturnType<T>>;

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
  };

  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K;
  }[keyof T];

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K;
  };

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>;

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & (T extends SelectAndInclude
    ? "Please either choose `select` or `include`."
    : T extends SelectAndOmit
      ? "Please either choose `select` or `omit`."
      : {});

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & K;

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = T extends object
    ? U extends object
      ? (Without<T, U> & U) | (Without<U, T> & T)
      : U
    : T;

  /**
   * Is T a Record?
   */
  type IsObject<T extends any> =
    T extends Array<any>
      ? False
      : T extends Date
        ? False
        : T extends Uint8Array
          ? False
          : T extends BigInt
            ? False
            : T extends object
              ? True
              : False;

  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
    }[K];

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<
    __Either<O, K>
  >;

  type _Either<O extends object, K extends Key, strict extends Boolean> = {
    1: EitherStrict<O, K>;
    0: EitherLoose<O, K>;
  }[strict];

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1,
  > = O extends unknown ? _Either<O, K, strict> : never;

  export type Union = any;

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
  } & {};

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never;

  export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<
    Overwrite<
      U,
      {
        [K in keyof U]-?: At<U, K>;
      }
    >
  >;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O
    ? O[K]
    : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown
    ? AtStrict<O, K>
    : never;
  export type At<
    O extends object,
    K extends Key,
    strict extends Boolean = 1,
  > = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function
    ? A
    : {
        [K in keyof A]: A[K];
      } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
      ?
          | (K extends keyof O ? { [P in K]: O[P] } & O : O)
          | ({ [P in keyof O as P extends K ? K : never]-?: O[P] } & O)
      : never
  >;

  type _Strict<U, _U = U> = U extends unknown
    ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
    : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False;

  // /**
  // 1
  // */
  export type True = 1;

  /**
  0
  */
  export type False = 0;

  export type Not<B extends Boolean> = {
    0: 1;
    1: 0;
  }[B];

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
      ? 1
      : 0;

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >;

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0;
      1: 1;
    };
    1: {
      0: 1;
      1: 1;
    };
  }[B1][B2];

  export type Keys<U extends Union> = U extends unknown ? keyof U : never;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object
    ? {
        [P in keyof T]: P extends keyof O ? O[P] : never;
      }
    : never;

  type FieldPaths<
    T,
    U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">,
  > = IsObject<T> extends True ? U : T;

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<"OR", K>, Extends<"AND", K>>,
      Extends<"NOT", K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<
            UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
          >
        : never
      : {} extends FieldPaths<T[K]>
        ? never
        : K;
  }[keyof T];

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<
    T,
    K extends Enumerable<keyof T> | keyof T,
  > = Prisma__Pick<T, MaybeTupleToUnion<K>>;

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
    ? never
    : T;

  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

  type FieldRefInputType<Model, FieldType> = Model extends never
    ? never
    : FieldRef<Model, FieldType>;

  export const ModelName: {
    Business: "Business";
    TelegramBusiness: "TelegramBusiness";
    PaymentMethod: "PaymentMethod";
    Category: "Category";
    Product: "Product";
    User: "User";
    UserBusiness: "UserBusiness";
    InvitationLink: "InvitationLink";
    Order: "Order";
    OrderProduct: "OrderProduct";
    Account: "Account";
    Session: "Session";
    VerificationToken: "VerificationToken";
    Authenticator: "Authenticator";
    Address: "Address";
    Neighborhood: "Neighborhood";
    UserAddress: "UserAddress";
    OrderAddress: "OrderAddress";
    BusinessNeighborhood: "BusinessNeighborhood";
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName];

  export type Datasources = {
    db?: Datasource;
  };

  interface TypeMapCb
    extends $Utils.Fn<
      { extArgs: $Extensions.InternalArgs; clientOptions: PrismaClientOptions },
      $Utils.Record<string, any>
    > {
    returns: Prisma.TypeMap<
      this["params"]["extArgs"],
      this["params"]["clientOptions"]
    >;
  }

  export type TypeMap<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    ClientOptions = {},
  > = {
    meta: {
      modelProps:
        | "business"
        | "telegramBusiness"
        | "paymentMethod"
        | "category"
        | "product"
        | "user"
        | "userBusiness"
        | "invitationLink"
        | "order"
        | "orderProduct"
        | "account"
        | "session"
        | "verificationToken"
        | "authenticator"
        | "address"
        | "neighborhood"
        | "userAddress"
        | "orderAddress"
        | "businessNeighborhood";
      txIsolationLevel: Prisma.TransactionIsolationLevel;
    };
    model: {
      Business: {
        payload: Prisma.$BusinessPayload<ExtArgs>;
        fields: Prisma.BusinessFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.BusinessFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.BusinessFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>;
          };
          findFirst: {
            args: Prisma.BusinessFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.BusinessFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>;
          };
          findMany: {
            args: Prisma.BusinessFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[];
          };
          create: {
            args: Prisma.BusinessCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>;
          };
          createMany: {
            args: Prisma.BusinessCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.BusinessCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[];
          };
          delete: {
            args: Prisma.BusinessDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>;
          };
          update: {
            args: Prisma.BusinessUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>;
          };
          deleteMany: {
            args: Prisma.BusinessDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.BusinessUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.BusinessUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>;
          };
          aggregate: {
            args: Prisma.BusinessAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateBusiness>;
          };
          groupBy: {
            args: Prisma.BusinessGroupByArgs<ExtArgs>;
            result: $Utils.Optional<BusinessGroupByOutputType>[];
          };
          count: {
            args: Prisma.BusinessCountArgs<ExtArgs>;
            result: $Utils.Optional<BusinessCountAggregateOutputType> | number;
          };
        };
      };
      TelegramBusiness: {
        payload: Prisma.$TelegramBusinessPayload<ExtArgs>;
        fields: Prisma.TelegramBusinessFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.TelegramBusinessFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.TelegramBusinessFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>;
          };
          findFirst: {
            args: Prisma.TelegramBusinessFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.TelegramBusinessFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>;
          };
          findMany: {
            args: Prisma.TelegramBusinessFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>[];
          };
          create: {
            args: Prisma.TelegramBusinessCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>;
          };
          createMany: {
            args: Prisma.TelegramBusinessCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.TelegramBusinessCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>[];
          };
          delete: {
            args: Prisma.TelegramBusinessDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>;
          };
          update: {
            args: Prisma.TelegramBusinessUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>;
          };
          deleteMany: {
            args: Prisma.TelegramBusinessDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.TelegramBusinessUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.TelegramBusinessUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TelegramBusinessPayload>;
          };
          aggregate: {
            args: Prisma.TelegramBusinessAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateTelegramBusiness>;
          };
          groupBy: {
            args: Prisma.TelegramBusinessGroupByArgs<ExtArgs>;
            result: $Utils.Optional<TelegramBusinessGroupByOutputType>[];
          };
          count: {
            args: Prisma.TelegramBusinessCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<TelegramBusinessCountAggregateOutputType>
              | number;
          };
        };
      };
      PaymentMethod: {
        payload: Prisma.$PaymentMethodPayload<ExtArgs>;
        fields: Prisma.PaymentMethodFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.PaymentMethodFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.PaymentMethodFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>;
          };
          findFirst: {
            args: Prisma.PaymentMethodFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.PaymentMethodFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>;
          };
          findMany: {
            args: Prisma.PaymentMethodFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[];
          };
          create: {
            args: Prisma.PaymentMethodCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>;
          };
          createMany: {
            args: Prisma.PaymentMethodCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.PaymentMethodCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[];
          };
          delete: {
            args: Prisma.PaymentMethodDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>;
          };
          update: {
            args: Prisma.PaymentMethodUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>;
          };
          deleteMany: {
            args: Prisma.PaymentMethodDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.PaymentMethodUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.PaymentMethodUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>;
          };
          aggregate: {
            args: Prisma.PaymentMethodAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregatePaymentMethod>;
          };
          groupBy: {
            args: Prisma.PaymentMethodGroupByArgs<ExtArgs>;
            result: $Utils.Optional<PaymentMethodGroupByOutputType>[];
          };
          count: {
            args: Prisma.PaymentMethodCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<PaymentMethodCountAggregateOutputType>
              | number;
          };
        };
      };
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>;
        fields: Prisma.CategoryFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>;
          };
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>;
          };
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[];
          };
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>;
          };
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[];
          };
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>;
          };
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>;
          };
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>;
          };
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateCategory>;
          };
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>;
            result: $Utils.Optional<CategoryGroupByOutputType>[];
          };
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>;
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number;
          };
        };
      };
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>;
        fields: Prisma.ProductFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>;
          };
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>;
          };
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[];
          };
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>;
          };
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[];
          };
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>;
          };
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>;
          };
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>;
          };
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateProduct>;
          };
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>;
            result: $Utils.Optional<ProductGroupByOutputType>[];
          };
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>;
            result: $Utils.Optional<ProductCountAggregateOutputType> | number;
          };
        };
      };
      User: {
        payload: Prisma.$UserPayload<ExtArgs>;
        fields: Prisma.UserFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUser>;
          };
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserCountArgs<ExtArgs>;
            result: $Utils.Optional<UserCountAggregateOutputType> | number;
          };
        };
      };
      UserBusiness: {
        payload: Prisma.$UserBusinessPayload<ExtArgs>;
        fields: Prisma.UserBusinessFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserBusinessFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserBusinessFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>;
          };
          findFirst: {
            args: Prisma.UserBusinessFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserBusinessFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>;
          };
          findMany: {
            args: Prisma.UserBusinessFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>[];
          };
          create: {
            args: Prisma.UserBusinessCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>;
          };
          createMany: {
            args: Prisma.UserBusinessCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserBusinessCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>[];
          };
          delete: {
            args: Prisma.UserBusinessDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>;
          };
          update: {
            args: Prisma.UserBusinessUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>;
          };
          deleteMany: {
            args: Prisma.UserBusinessDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserBusinessUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.UserBusinessUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserBusinessPayload>;
          };
          aggregate: {
            args: Prisma.UserBusinessAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUserBusiness>;
          };
          groupBy: {
            args: Prisma.UserBusinessGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserBusinessGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserBusinessCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<UserBusinessCountAggregateOutputType>
              | number;
          };
        };
      };
      InvitationLink: {
        payload: Prisma.$InvitationLinkPayload<ExtArgs>;
        fields: Prisma.InvitationLinkFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.InvitationLinkFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.InvitationLinkFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>;
          };
          findFirst: {
            args: Prisma.InvitationLinkFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.InvitationLinkFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>;
          };
          findMany: {
            args: Prisma.InvitationLinkFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>[];
          };
          create: {
            args: Prisma.InvitationLinkCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>;
          };
          createMany: {
            args: Prisma.InvitationLinkCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.InvitationLinkCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>[];
          };
          delete: {
            args: Prisma.InvitationLinkDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>;
          };
          update: {
            args: Prisma.InvitationLinkUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>;
          };
          deleteMany: {
            args: Prisma.InvitationLinkDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.InvitationLinkUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.InvitationLinkUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$InvitationLinkPayload>;
          };
          aggregate: {
            args: Prisma.InvitationLinkAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateInvitationLink>;
          };
          groupBy: {
            args: Prisma.InvitationLinkGroupByArgs<ExtArgs>;
            result: $Utils.Optional<InvitationLinkGroupByOutputType>[];
          };
          count: {
            args: Prisma.InvitationLinkCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<InvitationLinkCountAggregateOutputType>
              | number;
          };
        };
      };
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>;
        fields: Prisma.OrderFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>;
          };
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>;
          };
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[];
          };
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>;
          };
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[];
          };
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>;
          };
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>;
          };
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>;
          };
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateOrder>;
          };
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>;
            result: $Utils.Optional<OrderGroupByOutputType>[];
          };
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>;
            result: $Utils.Optional<OrderCountAggregateOutputType> | number;
          };
        };
      };
      OrderProduct: {
        payload: Prisma.$OrderProductPayload<ExtArgs>;
        fields: Prisma.OrderProductFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.OrderProductFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.OrderProductFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>;
          };
          findFirst: {
            args: Prisma.OrderProductFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.OrderProductFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>;
          };
          findMany: {
            args: Prisma.OrderProductFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>[];
          };
          create: {
            args: Prisma.OrderProductCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>;
          };
          createMany: {
            args: Prisma.OrderProductCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.OrderProductCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>[];
          };
          delete: {
            args: Prisma.OrderProductDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>;
          };
          update: {
            args: Prisma.OrderProductUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>;
          };
          deleteMany: {
            args: Prisma.OrderProductDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.OrderProductUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.OrderProductUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderProductPayload>;
          };
          aggregate: {
            args: Prisma.OrderProductAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateOrderProduct>;
          };
          groupBy: {
            args: Prisma.OrderProductGroupByArgs<ExtArgs>;
            result: $Utils.Optional<OrderProductGroupByOutputType>[];
          };
          count: {
            args: Prisma.OrderProductCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<OrderProductCountAggregateOutputType>
              | number;
          };
        };
      };
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>;
        fields: Prisma.AccountFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>;
          };
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>;
          };
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[];
          };
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>;
          };
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[];
          };
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>;
          };
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>;
          };
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>;
          };
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateAccount>;
          };
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>;
            result: $Utils.Optional<AccountGroupByOutputType>[];
          };
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>;
            result: $Utils.Optional<AccountCountAggregateOutputType> | number;
          };
        };
      };
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>;
        fields: Prisma.SessionFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>;
          };
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>;
          };
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[];
          };
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>;
          };
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[];
          };
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>;
          };
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>;
          };
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>;
          };
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateSession>;
          };
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>;
            result: $Utils.Optional<SessionGroupByOutputType>[];
          };
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>;
            result: $Utils.Optional<SessionCountAggregateOutputType> | number;
          };
        };
      };
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>;
        fields: Prisma.VerificationTokenFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
          };
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
          };
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
          };
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
          };
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
          };
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
          };
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
          };
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
          };
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateVerificationToken>;
          };
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>;
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[];
          };
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<VerificationTokenCountAggregateOutputType>
              | number;
          };
        };
      };
      Authenticator: {
        payload: Prisma.$AuthenticatorPayload<ExtArgs>;
        fields: Prisma.AuthenticatorFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.AuthenticatorFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.AuthenticatorFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>;
          };
          findFirst: {
            args: Prisma.AuthenticatorFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.AuthenticatorFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>;
          };
          findMany: {
            args: Prisma.AuthenticatorFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[];
          };
          create: {
            args: Prisma.AuthenticatorCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>;
          };
          createMany: {
            args: Prisma.AuthenticatorCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.AuthenticatorCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[];
          };
          delete: {
            args: Prisma.AuthenticatorDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>;
          };
          update: {
            args: Prisma.AuthenticatorUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>;
          };
          deleteMany: {
            args: Prisma.AuthenticatorDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.AuthenticatorUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.AuthenticatorUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>;
          };
          aggregate: {
            args: Prisma.AuthenticatorAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateAuthenticator>;
          };
          groupBy: {
            args: Prisma.AuthenticatorGroupByArgs<ExtArgs>;
            result: $Utils.Optional<AuthenticatorGroupByOutputType>[];
          };
          count: {
            args: Prisma.AuthenticatorCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<AuthenticatorCountAggregateOutputType>
              | number;
          };
        };
      };
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>;
        fields: Prisma.AddressFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>;
          };
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>;
          };
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[];
          };
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>;
          };
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[];
          };
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>;
          };
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>;
          };
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>;
          };
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateAddress>;
          };
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>;
            result: $Utils.Optional<AddressGroupByOutputType>[];
          };
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>;
            result: $Utils.Optional<AddressCountAggregateOutputType> | number;
          };
        };
      };
      Neighborhood: {
        payload: Prisma.$NeighborhoodPayload<ExtArgs>;
        fields: Prisma.NeighborhoodFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.NeighborhoodFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.NeighborhoodFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>;
          };
          findFirst: {
            args: Prisma.NeighborhoodFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.NeighborhoodFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>;
          };
          findMany: {
            args: Prisma.NeighborhoodFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>[];
          };
          create: {
            args: Prisma.NeighborhoodCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>;
          };
          createMany: {
            args: Prisma.NeighborhoodCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.NeighborhoodCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>[];
          };
          delete: {
            args: Prisma.NeighborhoodDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>;
          };
          update: {
            args: Prisma.NeighborhoodUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>;
          };
          deleteMany: {
            args: Prisma.NeighborhoodDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.NeighborhoodUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.NeighborhoodUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>;
          };
          aggregate: {
            args: Prisma.NeighborhoodAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateNeighborhood>;
          };
          groupBy: {
            args: Prisma.NeighborhoodGroupByArgs<ExtArgs>;
            result: $Utils.Optional<NeighborhoodGroupByOutputType>[];
          };
          count: {
            args: Prisma.NeighborhoodCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<NeighborhoodCountAggregateOutputType>
              | number;
          };
        };
      };
      UserAddress: {
        payload: Prisma.$UserAddressPayload<ExtArgs>;
        fields: Prisma.UserAddressFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserAddressFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserAddressFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>;
          };
          findFirst: {
            args: Prisma.UserAddressFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserAddressFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>;
          };
          findMany: {
            args: Prisma.UserAddressFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>[];
          };
          create: {
            args: Prisma.UserAddressCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>;
          };
          createMany: {
            args: Prisma.UserAddressCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserAddressCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>[];
          };
          delete: {
            args: Prisma.UserAddressDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>;
          };
          update: {
            args: Prisma.UserAddressUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>;
          };
          deleteMany: {
            args: Prisma.UserAddressDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserAddressUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.UserAddressUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>;
          };
          aggregate: {
            args: Prisma.UserAddressAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUserAddress>;
          };
          groupBy: {
            args: Prisma.UserAddressGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserAddressGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserAddressCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<UserAddressCountAggregateOutputType>
              | number;
          };
        };
      };
      OrderAddress: {
        payload: Prisma.$OrderAddressPayload<ExtArgs>;
        fields: Prisma.OrderAddressFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.OrderAddressFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.OrderAddressFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>;
          };
          findFirst: {
            args: Prisma.OrderAddressFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.OrderAddressFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>;
          };
          findMany: {
            args: Prisma.OrderAddressFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>[];
          };
          create: {
            args: Prisma.OrderAddressCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>;
          };
          createMany: {
            args: Prisma.OrderAddressCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.OrderAddressCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>[];
          };
          delete: {
            args: Prisma.OrderAddressDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>;
          };
          update: {
            args: Prisma.OrderAddressUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>;
          };
          deleteMany: {
            args: Prisma.OrderAddressDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.OrderAddressUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.OrderAddressUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$OrderAddressPayload>;
          };
          aggregate: {
            args: Prisma.OrderAddressAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateOrderAddress>;
          };
          groupBy: {
            args: Prisma.OrderAddressGroupByArgs<ExtArgs>;
            result: $Utils.Optional<OrderAddressGroupByOutputType>[];
          };
          count: {
            args: Prisma.OrderAddressCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<OrderAddressCountAggregateOutputType>
              | number;
          };
        };
      };
      BusinessNeighborhood: {
        payload: Prisma.$BusinessNeighborhoodPayload<ExtArgs>;
        fields: Prisma.BusinessNeighborhoodFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.BusinessNeighborhoodFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.BusinessNeighborhoodFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>;
          };
          findFirst: {
            args: Prisma.BusinessNeighborhoodFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.BusinessNeighborhoodFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>;
          };
          findMany: {
            args: Prisma.BusinessNeighborhoodFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>[];
          };
          create: {
            args: Prisma.BusinessNeighborhoodCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>;
          };
          createMany: {
            args: Prisma.BusinessNeighborhoodCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.BusinessNeighborhoodCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>[];
          };
          delete: {
            args: Prisma.BusinessNeighborhoodDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>;
          };
          update: {
            args: Prisma.BusinessNeighborhoodUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>;
          };
          deleteMany: {
            args: Prisma.BusinessNeighborhoodDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.BusinessNeighborhoodUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          upsert: {
            args: Prisma.BusinessNeighborhoodUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$BusinessNeighborhoodPayload>;
          };
          aggregate: {
            args: Prisma.BusinessNeighborhoodAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateBusinessNeighborhood>;
          };
          groupBy: {
            args: Prisma.BusinessNeighborhoodGroupByArgs<ExtArgs>;
            result: $Utils.Optional<BusinessNeighborhoodGroupByOutputType>[];
          };
          count: {
            args: Prisma.BusinessNeighborhoodCountArgs<ExtArgs>;
            result:
              | $Utils.Optional<BusinessNeighborhoodCountAggregateOutputType>
              | number;
          };
        };
      };
    };
  } & {
    other: {
      payload: any;
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]];
          result: any;
        };
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]];
          result: any;
        };
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]];
          result: any;
        };
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]];
          result: any;
        };
      };
    };
  };
  export const defineExtension: $Extensions.ExtendsHook<
    "define",
    Prisma.TypeMapCb,
    $Extensions.DefaultArgs
  >;
  export type DefaultPrismaClient = PrismaClient;
  export type ErrorFormat = "pretty" | "colorless" | "minimal";
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources;
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string;
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat;
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     *
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[];
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    };
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.DriverAdapter | null;
  }

  /* Types for Logging */
  export type LogLevel = "info" | "query" | "warn" | "error";
  export type LogDefinition = {
    level: LogLevel;
    emit: "stdout" | "event";
  };

  export type GetLogType<T extends LogLevel | LogDefinition> =
    T extends LogDefinition
      ? T["emit"] extends "event"
        ? T["level"]
        : never
      : never;
  export type GetEvents<T extends any> =
    T extends Array<LogLevel | LogDefinition>
      ?
          | GetLogType<T[0]>
          | GetLogType<T[1]>
          | GetLogType<T[2]>
          | GetLogType<T[3]>
      : never;

  export type QueryEvent = {
    timestamp: Date;
    query: string;
    params: string;
    duration: number;
    target: string;
  };

  export type LogEvent = {
    timestamp: Date;
    message: string;
    target: string;
  };
  /* End Types for Logging */

  export type PrismaAction =
    | "findUnique"
    | "findUniqueOrThrow"
    | "findMany"
    | "findFirst"
    | "findFirstOrThrow"
    | "create"
    | "createMany"
    | "createManyAndReturn"
    | "update"
    | "updateMany"
    | "upsert"
    | "delete"
    | "deleteMany"
    | "executeRaw"
    | "queryRaw"
    | "aggregate"
    | "count"
    | "runCommandRaw"
    | "findRaw"
    | "groupBy";

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName;
    action: PrismaAction;
    args: any;
    dataPath: string[];
    runInTransaction: boolean;
  };

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>;

  // tested in getLogLevel.test.ts
  export function getLogLevel(
    log: Array<LogLevel | LogDefinition>,
  ): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<
    Prisma.DefaultPrismaClient,
    runtime.ITXClientDenyList
  >;

  export type Datasource = {
    url?: string;
  };

  /**
   * Count Types
   */

  /**
   * Count Type BusinessCountOutputType
   */

  export type BusinessCountOutputType = {
    categories: number;
    products: number;
    orders: number;
    users: number;
    businessNeighborhood: number;
    userAddress: number;
    paymentMethod: number;
    invitationLinks: number;
  };

  export type BusinessCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    categories?: boolean | BusinessCountOutputTypeCountCategoriesArgs;
    products?: boolean | BusinessCountOutputTypeCountProductsArgs;
    orders?: boolean | BusinessCountOutputTypeCountOrdersArgs;
    users?: boolean | BusinessCountOutputTypeCountUsersArgs;
    businessNeighborhood?:
      | boolean
      | BusinessCountOutputTypeCountBusinessNeighborhoodArgs;
    userAddress?: boolean | BusinessCountOutputTypeCountUserAddressArgs;
    paymentMethod?: boolean | BusinessCountOutputTypeCountPaymentMethodArgs;
    invitationLinks?: boolean | BusinessCountOutputTypeCountInvitationLinksArgs;
  };

  // Custom InputTypes
  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessCountOutputType
     */
    select?: BusinessCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountCategoriesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: CategoryWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountProductsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ProductWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountOrdersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountUsersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserBusinessWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountBusinessNeighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: BusinessNeighborhoodWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountUserAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserAddressWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountPaymentMethodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: PaymentMethodWhereInput;
  };

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountInvitationLinksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: InvitationLinkWhereInput;
  };

  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    products: number;
  };

  export type CategoryCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    products?: boolean | CategoryCountOutputTypeCountProductsArgs;
  };

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ProductWhereInput;
  };

  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderItems: number;
  };

  export type ProductCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    orderItems?: boolean | ProductCountOutputTypeCountOrderItemsArgs;
  };

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderProductWhereInput;
  };

  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number;
    accounts: number;
    sessions: number;
    Authenticator: number;
    business: number;
    address: number;
  };

  export type UserCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs;
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs;
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs;
    Authenticator?: boolean | UserCountOutputTypeCountAuthenticatorArgs;
    business?: boolean | UserCountOutputTypeCountBusinessArgs;
    address?: boolean | UserCountOutputTypeCountAddressArgs;
  };

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: AccountWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: SessionWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthenticatorArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: AuthenticatorWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBusinessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserBusinessWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserAddressWhereInput;
  };

  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    items: number;
  };

  export type OrderCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    items?: boolean | OrderCountOutputTypeCountItemsArgs;
  };

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountItemsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderProductWhereInput;
  };

  /**
   * Count Type NeighborhoodCountOutputType
   */

  export type NeighborhoodCountOutputType = {
    addresses: number;
    businessNeighborhood: number;
  };

  export type NeighborhoodCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    addresses?: boolean | NeighborhoodCountOutputTypeCountAddressesArgs;
    businessNeighborhood?:
      | boolean
      | NeighborhoodCountOutputTypeCountBusinessNeighborhoodArgs;
  };

  // Custom InputTypes
  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the NeighborhoodCountOutputType
     */
    select?: NeighborhoodCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeCountAddressesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: AddressWhereInput;
  };

  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeCountBusinessNeighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: BusinessNeighborhoodWhereInput;
  };

  /**
   * Models
   */

  /**
   * Model Business
   */

  export type AggregateBusiness = {
    _count: BusinessCountAggregateOutputType | null;
    _avg: BusinessAvgAggregateOutputType | null;
    _sum: BusinessSumAggregateOutputType | null;
    _min: BusinessMinAggregateOutputType | null;
    _max: BusinessMaxAggregateOutputType | null;
  };

  export type BusinessAvgAggregateOutputType = {
    coordinates: number | null;
  };

  export type BusinessSumAggregateOutputType = {
    coordinates: number[];
  };

  export type BusinessMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    description: string | null;
    address: string | null;
    phone: string | null;
    howToArrive: string | null;
    slug: string | null;
    active: boolean | null;
    requestAddress: boolean | null;
    plan: $Enums.BusinessPlan | null;
    sendOrderToWhatsapp: boolean | null;
    defaultPaymentMethodId: string | null;
  };

  export type BusinessMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    description: string | null;
    address: string | null;
    phone: string | null;
    howToArrive: string | null;
    slug: string | null;
    active: boolean | null;
    requestAddress: boolean | null;
    plan: $Enums.BusinessPlan | null;
    sendOrderToWhatsapp: boolean | null;
    defaultPaymentMethodId: string | null;
  };

  export type BusinessCountAggregateOutputType = {
    id: number;
    name: number;
    description: number;
    address: number;
    phone: number;
    howToArrive: number;
    coordinates: number;
    slug: number;
    active: number;
    requestAddress: number;
    plan: number;
    sendOrderToWhatsapp: number;
    defaultPaymentMethodId: number;
    _all: number;
  };

  export type BusinessAvgAggregateInputType = {
    coordinates?: true;
  };

  export type BusinessSumAggregateInputType = {
    coordinates?: true;
  };

  export type BusinessMinAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    address?: true;
    phone?: true;
    howToArrive?: true;
    slug?: true;
    active?: true;
    requestAddress?: true;
    plan?: true;
    sendOrderToWhatsapp?: true;
    defaultPaymentMethodId?: true;
  };

  export type BusinessMaxAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    address?: true;
    phone?: true;
    howToArrive?: true;
    slug?: true;
    active?: true;
    requestAddress?: true;
    plan?: true;
    sendOrderToWhatsapp?: true;
    defaultPaymentMethodId?: true;
  };

  export type BusinessCountAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    address?: true;
    phone?: true;
    howToArrive?: true;
    coordinates?: true;
    slug?: true;
    active?: true;
    requestAddress?: true;
    plan?: true;
    sendOrderToWhatsapp?: true;
    defaultPaymentMethodId?: true;
    _all?: true;
  };

  export type BusinessAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Business to aggregate.
     */
    where?: BusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Businesses to fetch.
     */
    orderBy?:
      | BusinessOrderByWithRelationInput
      | BusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: BusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Businesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Businesses
     **/
    _count?: true | BusinessCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: BusinessAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: BusinessSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: BusinessMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: BusinessMaxAggregateInputType;
  };

  export type GetBusinessAggregateType<T extends BusinessAggregateArgs> = {
    [P in keyof T & keyof AggregateBusiness]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusiness[P]>
      : GetScalarType<T[P], AggregateBusiness[P]>;
  };

  export type BusinessGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: BusinessWhereInput;
    orderBy?:
      | BusinessOrderByWithAggregationInput
      | BusinessOrderByWithAggregationInput[];
    by: BusinessScalarFieldEnum[] | BusinessScalarFieldEnum;
    having?: BusinessScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: BusinessCountAggregateInputType | true;
    _avg?: BusinessAvgAggregateInputType;
    _sum?: BusinessSumAggregateInputType;
    _min?: BusinessMinAggregateInputType;
    _max?: BusinessMaxAggregateInputType;
  };

  export type BusinessGroupByOutputType = {
    id: string;
    name: string;
    description: string | null;
    address: string | null;
    phone: string | null;
    howToArrive: string | null;
    coordinates: number[];
    slug: string | null;
    active: boolean;
    requestAddress: boolean;
    plan: $Enums.BusinessPlan;
    sendOrderToWhatsapp: boolean;
    defaultPaymentMethodId: string | null;
    _count: BusinessCountAggregateOutputType | null;
    _avg: BusinessAvgAggregateOutputType | null;
    _sum: BusinessSumAggregateOutputType | null;
    _min: BusinessMinAggregateOutputType | null;
    _max: BusinessMaxAggregateOutputType | null;
  };

  type GetBusinessGroupByPayload<T extends BusinessGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<BusinessGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof BusinessGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessGroupByOutputType[P]>;
        }
      >
    >;

  export type BusinessSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      description?: boolean;
      address?: boolean;
      phone?: boolean;
      howToArrive?: boolean;
      coordinates?: boolean;
      slug?: boolean;
      active?: boolean;
      requestAddress?: boolean;
      plan?: boolean;
      sendOrderToWhatsapp?: boolean;
      defaultPaymentMethodId?: boolean;
      defaultPaymentMethod?:
        | boolean
        | Business$defaultPaymentMethodArgs<ExtArgs>;
      telegram?: boolean | Business$telegramArgs<ExtArgs>;
      categories?: boolean | Business$categoriesArgs<ExtArgs>;
      products?: boolean | Business$productsArgs<ExtArgs>;
      orders?: boolean | Business$ordersArgs<ExtArgs>;
      users?: boolean | Business$usersArgs<ExtArgs>;
      businessNeighborhood?:
        | boolean
        | Business$businessNeighborhoodArgs<ExtArgs>;
      userAddress?: boolean | Business$userAddressArgs<ExtArgs>;
      paymentMethod?: boolean | Business$paymentMethodArgs<ExtArgs>;
      invitationLinks?: boolean | Business$invitationLinksArgs<ExtArgs>;
      _count?: boolean | BusinessCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["business"]
  >;

  export type BusinessSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      description?: boolean;
      address?: boolean;
      phone?: boolean;
      howToArrive?: boolean;
      coordinates?: boolean;
      slug?: boolean;
      active?: boolean;
      requestAddress?: boolean;
      plan?: boolean;
      sendOrderToWhatsapp?: boolean;
      defaultPaymentMethodId?: boolean;
      defaultPaymentMethod?:
        | boolean
        | Business$defaultPaymentMethodArgs<ExtArgs>;
    },
    ExtArgs["result"]["business"]
  >;

  export type BusinessSelectScalar = {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    address?: boolean;
    phone?: boolean;
    howToArrive?: boolean;
    coordinates?: boolean;
    slug?: boolean;
    active?: boolean;
    requestAddress?: boolean;
    plan?: boolean;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: boolean;
  };

  export type BusinessInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    defaultPaymentMethod?: boolean | Business$defaultPaymentMethodArgs<ExtArgs>;
    telegram?: boolean | Business$telegramArgs<ExtArgs>;
    categories?: boolean | Business$categoriesArgs<ExtArgs>;
    products?: boolean | Business$productsArgs<ExtArgs>;
    orders?: boolean | Business$ordersArgs<ExtArgs>;
    users?: boolean | Business$usersArgs<ExtArgs>;
    businessNeighborhood?: boolean | Business$businessNeighborhoodArgs<ExtArgs>;
    userAddress?: boolean | Business$userAddressArgs<ExtArgs>;
    paymentMethod?: boolean | Business$paymentMethodArgs<ExtArgs>;
    invitationLinks?: boolean | Business$invitationLinksArgs<ExtArgs>;
    _count?: boolean | BusinessCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type BusinessIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    defaultPaymentMethod?: boolean | Business$defaultPaymentMethodArgs<ExtArgs>;
  };

  export type $BusinessPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Business";
    objects: {
      defaultPaymentMethod: Prisma.$PaymentMethodPayload<ExtArgs> | null;
      telegram: Prisma.$TelegramBusinessPayload<ExtArgs> | null;
      categories: Prisma.$CategoryPayload<ExtArgs>[];
      products: Prisma.$ProductPayload<ExtArgs>[];
      orders: Prisma.$OrderPayload<ExtArgs>[];
      users: Prisma.$UserBusinessPayload<ExtArgs>[];
      businessNeighborhood: Prisma.$BusinessNeighborhoodPayload<ExtArgs>[];
      userAddress: Prisma.$UserAddressPayload<ExtArgs>[];
      paymentMethod: Prisma.$PaymentMethodPayload<ExtArgs>[];
      invitationLinks: Prisma.$InvitationLinkPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "required" })
         */
        name: string;
        /**
         * @zod.min(1, { message: "required" })
         */
        description: string | null;
        /**
         * @zod.min(1, { message: "required" })
         */
        address: string | null;
        /**
         * @zod.min(1, { message: "required" })
         */
        phone: string | null;
        howToArrive: string | null;
        coordinates: number[];
        /**
         * @zod.min(1, { message: "required" })
         */
        slug: string | null;
        /**
         * @zod.optional()
         */
        active: boolean;
        /**
         * @zod.optional()
         */
        requestAddress: boolean;
        plan: $Enums.BusinessPlan;
        sendOrderToWhatsapp: boolean;
        defaultPaymentMethodId: string | null;
      },
      ExtArgs["result"]["business"]
    >;
    composites: {};
  };

  type BusinessGetPayload<
    S extends boolean | null | undefined | BusinessDefaultArgs,
  > = $Result.GetResult<Prisma.$BusinessPayload, S>;

  type BusinessCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<BusinessFindManyArgs, "select" | "include" | "distinct"> & {
    select?: BusinessCountAggregateInputType | true;
  };

  export interface BusinessDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Business"];
      meta: { name: "Business" };
    };
    /**
     * Find zero or one Business that matches the filter.
     * @param {BusinessFindUniqueArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessFindUniqueArgs>(
      args: SelectSubset<T, BusinessFindUniqueArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Business that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessFindUniqueOrThrowArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessFindUniqueOrThrowArgs>(
      args: SelectSubset<T, BusinessFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Business that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindFirstArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessFindFirstArgs>(
      args?: SelectSubset<T, BusinessFindFirstArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Business that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindFirstOrThrowArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BusinessFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Businesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Businesses
     * const businesses = await prisma.business.findMany()
     *
     * // Get first 10 Businesses
     * const businesses = await prisma.business.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const businessWithIdOnly = await prisma.business.findMany({ select: { id: true } })
     *
     */
    findMany<T extends BusinessFindManyArgs>(
      args?: SelectSubset<T, BusinessFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Business.
     * @param {BusinessCreateArgs} args - Arguments to create a Business.
     * @example
     * // Create one Business
     * const Business = await prisma.business.create({
     *   data: {
     *     // ... data to create a Business
     *   }
     * })
     *
     */
    create<T extends BusinessCreateArgs>(
      args: SelectSubset<T, BusinessCreateArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Businesses.
     * @param {BusinessCreateManyArgs} args - Arguments to create many Businesses.
     * @example
     * // Create many Businesses
     * const business = await prisma.business.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends BusinessCreateManyArgs>(
      args?: SelectSubset<T, BusinessCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Businesses and returns the data saved in the database.
     * @param {BusinessCreateManyAndReturnArgs} args - Arguments to create many Businesses.
     * @example
     * // Create many Businesses
     * const business = await prisma.business.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Businesses and only return the `id`
     * const businessWithIdOnly = await prisma.business.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends BusinessCreateManyAndReturnArgs>(
      args?: SelectSubset<T, BusinessCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Business.
     * @param {BusinessDeleteArgs} args - Arguments to delete one Business.
     * @example
     * // Delete one Business
     * const Business = await prisma.business.delete({
     *   where: {
     *     // ... filter to delete one Business
     *   }
     * })
     *
     */
    delete<T extends BusinessDeleteArgs>(
      args: SelectSubset<T, BusinessDeleteArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Business.
     * @param {BusinessUpdateArgs} args - Arguments to update one Business.
     * @example
     * // Update one Business
     * const business = await prisma.business.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends BusinessUpdateArgs>(
      args: SelectSubset<T, BusinessUpdateArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Businesses.
     * @param {BusinessDeleteManyArgs} args - Arguments to filter Businesses to delete.
     * @example
     * // Delete a few Businesses
     * const { count } = await prisma.business.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends BusinessDeleteManyArgs>(
      args?: SelectSubset<T, BusinessDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Businesses
     * const business = await prisma.business.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends BusinessUpdateManyArgs>(
      args: SelectSubset<T, BusinessUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Business.
     * @param {BusinessUpsertArgs} args - Arguments to update or create a Business.
     * @example
     * // Update or create a Business
     * const business = await prisma.business.upsert({
     *   create: {
     *     // ... data to create a Business
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Business we want to update
     *   }
     * })
     */
    upsert<T extends BusinessUpsertArgs>(
      args: SelectSubset<T, BusinessUpsertArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessCountArgs} args - Arguments to filter Businesses to count.
     * @example
     * // Count the number of Businesses
     * const count = await prisma.business.count({
     *   where: {
     *     // ... the filter for the Businesses we want to count
     *   }
     * })
     **/
    count<T extends BusinessCountArgs>(
      args?: Subset<T, BusinessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], BusinessCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Business.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends BusinessAggregateArgs>(
      args: Subset<T, BusinessAggregateArgs>,
    ): Prisma.PrismaPromise<GetBusinessAggregateType<T>>;

    /**
     * Group by Business.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends BusinessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessGroupByArgs["orderBy"] }
        : { orderBy?: BusinessGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, BusinessGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetBusinessGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Business model
     */
    readonly fields: BusinessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Business.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    defaultPaymentMethod<
      T extends Business$defaultPaymentMethodArgs<ExtArgs> = {},
    >(
      args?: Subset<T, Business$defaultPaymentMethodArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<
        Prisma.$PaymentMethodPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    telegram<T extends Business$telegramArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$telegramArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<
        Prisma.$TelegramBusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    categories<T extends Business$categoriesArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$categoriesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null
    >;
    products<T extends Business$productsArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$productsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null
    >;
    orders<T extends Business$ordersArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$ordersArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null
    >;
    users<T extends Business$usersArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$usersArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    businessNeighborhood<
      T extends Business$businessNeighborhoodArgs<ExtArgs> = {},
    >(
      args?: Subset<T, Business$businessNeighborhoodArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
          T,
          "findMany"
        >
      | Null
    >;
    userAddress<T extends Business$userAddressArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$userAddressArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    paymentMethod<T extends Business$paymentMethodArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$paymentMethodArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    invitationLinks<T extends Business$invitationLinksArgs<ExtArgs> = {}>(
      args?: Subset<T, Business$invitationLinksArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$InvitationLinkPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Business model
   */
  interface BusinessFieldRefs {
    readonly id: FieldRef<"Business", "String">;
    readonly name: FieldRef<"Business", "String">;
    readonly description: FieldRef<"Business", "String">;
    readonly address: FieldRef<"Business", "String">;
    readonly phone: FieldRef<"Business", "String">;
    readonly howToArrive: FieldRef<"Business", "String">;
    readonly coordinates: FieldRef<"Business", "Float[]">;
    readonly slug: FieldRef<"Business", "String">;
    readonly active: FieldRef<"Business", "Boolean">;
    readonly requestAddress: FieldRef<"Business", "Boolean">;
    readonly plan: FieldRef<"Business", "BusinessPlan">;
    readonly sendOrderToWhatsapp: FieldRef<"Business", "Boolean">;
    readonly defaultPaymentMethodId: FieldRef<"Business", "String">;
  }

  // Custom InputTypes
  /**
   * Business findUnique
   */
  export type BusinessFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * Filter, which Business to fetch.
     */
    where: BusinessWhereUniqueInput;
  };

  /**
   * Business findUniqueOrThrow
   */
  export type BusinessFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * Filter, which Business to fetch.
     */
    where: BusinessWhereUniqueInput;
  };

  /**
   * Business findFirst
   */
  export type BusinessFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * Filter, which Business to fetch.
     */
    where?: BusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Businesses to fetch.
     */
    orderBy?:
      | BusinessOrderByWithRelationInput
      | BusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Businesses.
     */
    cursor?: BusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Businesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Businesses.
     */
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[];
  };

  /**
   * Business findFirstOrThrow
   */
  export type BusinessFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * Filter, which Business to fetch.
     */
    where?: BusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Businesses to fetch.
     */
    orderBy?:
      | BusinessOrderByWithRelationInput
      | BusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Businesses.
     */
    cursor?: BusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Businesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Businesses.
     */
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[];
  };

  /**
   * Business findMany
   */
  export type BusinessFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * Filter, which Businesses to fetch.
     */
    where?: BusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Businesses to fetch.
     */
    orderBy?:
      | BusinessOrderByWithRelationInput
      | BusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Businesses.
     */
    cursor?: BusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Businesses.
     */
    skip?: number;
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[];
  };

  /**
   * Business create
   */
  export type BusinessCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * The data needed to create a Business.
     */
    data: XOR<BusinessCreateInput, BusinessUncheckedCreateInput>;
  };

  /**
   * Business createMany
   */
  export type BusinessCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Businesses.
     */
    data: BusinessCreateManyInput | BusinessCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Business createManyAndReturn
   */
  export type BusinessCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Businesses.
     */
    data: BusinessCreateManyInput | BusinessCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Business update
   */
  export type BusinessUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * The data needed to update a Business.
     */
    data: XOR<BusinessUpdateInput, BusinessUncheckedUpdateInput>;
    /**
     * Choose, which Business to update.
     */
    where: BusinessWhereUniqueInput;
  };

  /**
   * Business updateMany
   */
  export type BusinessUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Businesses.
     */
    data: XOR<
      BusinessUpdateManyMutationInput,
      BusinessUncheckedUpdateManyInput
    >;
    /**
     * Filter which Businesses to update
     */
    where?: BusinessWhereInput;
  };

  /**
   * Business upsert
   */
  export type BusinessUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * The filter to search for the Business to update in case it exists.
     */
    where: BusinessWhereUniqueInput;
    /**
     * In case the Business found by the `where` argument doesn't exist, create a new Business with this data.
     */
    create: XOR<BusinessCreateInput, BusinessUncheckedCreateInput>;
    /**
     * In case the Business was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessUpdateInput, BusinessUncheckedUpdateInput>;
  };

  /**
   * Business delete
   */
  export type BusinessDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    /**
     * Filter which Business to delete.
     */
    where: BusinessWhereUniqueInput;
  };

  /**
   * Business deleteMany
   */
  export type BusinessDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Businesses to delete
     */
    where?: BusinessWhereInput;
  };

  /**
   * Business.defaultPaymentMethod
   */
  export type Business$defaultPaymentMethodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    where?: PaymentMethodWhereInput;
  };

  /**
   * Business.telegram
   */
  export type Business$telegramArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    where?: TelegramBusinessWhereInput;
  };

  /**
   * Business.categories
   */
  export type Business$categoriesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    where?: CategoryWhereInput;
    orderBy?:
      | CategoryOrderByWithRelationInput
      | CategoryOrderByWithRelationInput[];
    cursor?: CategoryWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[];
  };

  /**
   * Business.products
   */
  export type Business$productsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    where?: ProductWhereInput;
    orderBy?:
      | ProductOrderByWithRelationInput
      | ProductOrderByWithRelationInput[];
    cursor?: ProductWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[];
  };

  /**
   * Business.orders
   */
  export type Business$ordersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    where?: OrderWhereInput;
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[];
    cursor?: OrderWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[];
  };

  /**
   * Business.users
   */
  export type Business$usersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    where?: UserBusinessWhereInput;
    orderBy?:
      | UserBusinessOrderByWithRelationInput
      | UserBusinessOrderByWithRelationInput[];
    cursor?: UserBusinessWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: UserBusinessScalarFieldEnum | UserBusinessScalarFieldEnum[];
  };

  /**
   * Business.businessNeighborhood
   */
  export type Business$businessNeighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    where?: BusinessNeighborhoodWhereInput;
    orderBy?:
      | BusinessNeighborhoodOrderByWithRelationInput
      | BusinessNeighborhoodOrderByWithRelationInput[];
    cursor?: BusinessNeighborhoodWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?:
      | BusinessNeighborhoodScalarFieldEnum
      | BusinessNeighborhoodScalarFieldEnum[];
  };

  /**
   * Business.userAddress
   */
  export type Business$userAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    where?: UserAddressWhereInput;
    orderBy?:
      | UserAddressOrderByWithRelationInput
      | UserAddressOrderByWithRelationInput[];
    cursor?: UserAddressWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[];
  };

  /**
   * Business.paymentMethod
   */
  export type Business$paymentMethodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    where?: PaymentMethodWhereInput;
    orderBy?:
      | PaymentMethodOrderByWithRelationInput
      | PaymentMethodOrderByWithRelationInput[];
    cursor?: PaymentMethodWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[];
  };

  /**
   * Business.invitationLinks
   */
  export type Business$invitationLinksArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    where?: InvitationLinkWhereInput;
    orderBy?:
      | InvitationLinkOrderByWithRelationInput
      | InvitationLinkOrderByWithRelationInput[];
    cursor?: InvitationLinkWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: InvitationLinkScalarFieldEnum | InvitationLinkScalarFieldEnum[];
  };

  /**
   * Business without action
   */
  export type BusinessDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
  };

  /**
   * Model TelegramBusiness
   */

  export type AggregateTelegramBusiness = {
    _count: TelegramBusinessCountAggregateOutputType | null;
    _min: TelegramBusinessMinAggregateOutputType | null;
    _max: TelegramBusinessMaxAggregateOutputType | null;
  };

  export type TelegramBusinessMinAggregateOutputType = {
    id: string | null;
    groupId: string | null;
    invitationLink: string | null;
    businessId: string | null;
  };

  export type TelegramBusinessMaxAggregateOutputType = {
    id: string | null;
    groupId: string | null;
    invitationLink: string | null;
    businessId: string | null;
  };

  export type TelegramBusinessCountAggregateOutputType = {
    id: number;
    groupId: number;
    invitationLink: number;
    businessId: number;
    _all: number;
  };

  export type TelegramBusinessMinAggregateInputType = {
    id?: true;
    groupId?: true;
    invitationLink?: true;
    businessId?: true;
  };

  export type TelegramBusinessMaxAggregateInputType = {
    id?: true;
    groupId?: true;
    invitationLink?: true;
    businessId?: true;
  };

  export type TelegramBusinessCountAggregateInputType = {
    id?: true;
    groupId?: true;
    invitationLink?: true;
    businessId?: true;
    _all?: true;
  };

  export type TelegramBusinessAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which TelegramBusiness to aggregate.
     */
    where?: TelegramBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TelegramBusinesses to fetch.
     */
    orderBy?:
      | TelegramBusinessOrderByWithRelationInput
      | TelegramBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: TelegramBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TelegramBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TelegramBusinesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned TelegramBusinesses
     **/
    _count?: true | TelegramBusinessCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TelegramBusinessMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TelegramBusinessMaxAggregateInputType;
  };

  export type GetTelegramBusinessAggregateType<
    T extends TelegramBusinessAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateTelegramBusiness]: P extends
      | "_count"
      | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelegramBusiness[P]>
      : GetScalarType<T[P], AggregateTelegramBusiness[P]>;
  };

  export type TelegramBusinessGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TelegramBusinessWhereInput;
    orderBy?:
      | TelegramBusinessOrderByWithAggregationInput
      | TelegramBusinessOrderByWithAggregationInput[];
    by: TelegramBusinessScalarFieldEnum[] | TelegramBusinessScalarFieldEnum;
    having?: TelegramBusinessScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TelegramBusinessCountAggregateInputType | true;
    _min?: TelegramBusinessMinAggregateInputType;
    _max?: TelegramBusinessMaxAggregateInputType;
  };

  export type TelegramBusinessGroupByOutputType = {
    id: string;
    groupId: string;
    invitationLink: string;
    businessId: string;
    _count: TelegramBusinessCountAggregateOutputType | null;
    _min: TelegramBusinessMinAggregateOutputType | null;
    _max: TelegramBusinessMaxAggregateOutputType | null;
  };

  type GetTelegramBusinessGroupByPayload<
    T extends TelegramBusinessGroupByArgs,
  > = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TelegramBusinessGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof TelegramBusinessGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], TelegramBusinessGroupByOutputType[P]>
          : GetScalarType<T[P], TelegramBusinessGroupByOutputType[P]>;
      }
    >
  >;

  export type TelegramBusinessSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      groupId?: boolean;
      invitationLink?: boolean;
      businessId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["telegramBusiness"]
  >;

  export type TelegramBusinessSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      groupId?: boolean;
      invitationLink?: boolean;
      businessId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["telegramBusiness"]
  >;

  export type TelegramBusinessSelectScalar = {
    id?: boolean;
    groupId?: boolean;
    invitationLink?: boolean;
    businessId?: boolean;
  };

  export type TelegramBusinessInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };
  export type TelegramBusinessIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };

  export type $TelegramBusinessPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "TelegramBusiness";
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        groupId: string;
        /**
         * @zod.optional()
         */
        invitationLink: string;
        businessId: string;
      },
      ExtArgs["result"]["telegramBusiness"]
    >;
    composites: {};
  };

  type TelegramBusinessGetPayload<
    S extends boolean | null | undefined | TelegramBusinessDefaultArgs,
  > = $Result.GetResult<Prisma.$TelegramBusinessPayload, S>;

  type TelegramBusinessCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<TelegramBusinessFindManyArgs, "select" | "include" | "distinct"> & {
    select?: TelegramBusinessCountAggregateInputType | true;
  };

  export interface TelegramBusinessDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["TelegramBusiness"];
      meta: { name: "TelegramBusiness" };
    };
    /**
     * Find zero or one TelegramBusiness that matches the filter.
     * @param {TelegramBusinessFindUniqueArgs} args - Arguments to find a TelegramBusiness
     * @example
     * // Get one TelegramBusiness
     * const telegramBusiness = await prisma.telegramBusiness.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TelegramBusinessFindUniqueArgs>(
      args: SelectSubset<T, TelegramBusinessFindUniqueArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<
        Prisma.$TelegramBusinessPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one TelegramBusiness that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TelegramBusinessFindUniqueOrThrowArgs} args - Arguments to find a TelegramBusiness
     * @example
     * // Get one TelegramBusiness
     * const telegramBusiness = await prisma.telegramBusiness.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TelegramBusinessFindUniqueOrThrowArgs>(
      args: SelectSubset<T, TelegramBusinessFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<
        Prisma.$TelegramBusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first TelegramBusiness that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessFindFirstArgs} args - Arguments to find a TelegramBusiness
     * @example
     * // Get one TelegramBusiness
     * const telegramBusiness = await prisma.telegramBusiness.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TelegramBusinessFindFirstArgs>(
      args?: SelectSubset<T, TelegramBusinessFindFirstArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<
        Prisma.$TelegramBusinessPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first TelegramBusiness that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessFindFirstOrThrowArgs} args - Arguments to find a TelegramBusiness
     * @example
     * // Get one TelegramBusiness
     * const telegramBusiness = await prisma.telegramBusiness.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TelegramBusinessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TelegramBusinessFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<
        Prisma.$TelegramBusinessPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more TelegramBusinesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TelegramBusinesses
     * const telegramBusinesses = await prisma.telegramBusiness.findMany()
     *
     * // Get first 10 TelegramBusinesses
     * const telegramBusinesses = await prisma.telegramBusiness.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const telegramBusinessWithIdOnly = await prisma.telegramBusiness.findMany({ select: { id: true } })
     *
     */
    findMany<T extends TelegramBusinessFindManyArgs>(
      args?: SelectSubset<T, TelegramBusinessFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TelegramBusinessPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a TelegramBusiness.
     * @param {TelegramBusinessCreateArgs} args - Arguments to create a TelegramBusiness.
     * @example
     * // Create one TelegramBusiness
     * const TelegramBusiness = await prisma.telegramBusiness.create({
     *   data: {
     *     // ... data to create a TelegramBusiness
     *   }
     * })
     *
     */
    create<T extends TelegramBusinessCreateArgs>(
      args: SelectSubset<T, TelegramBusinessCreateArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<Prisma.$TelegramBusinessPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many TelegramBusinesses.
     * @param {TelegramBusinessCreateManyArgs} args - Arguments to create many TelegramBusinesses.
     * @example
     * // Create many TelegramBusinesses
     * const telegramBusiness = await prisma.telegramBusiness.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends TelegramBusinessCreateManyArgs>(
      args?: SelectSubset<T, TelegramBusinessCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many TelegramBusinesses and returns the data saved in the database.
     * @param {TelegramBusinessCreateManyAndReturnArgs} args - Arguments to create many TelegramBusinesses.
     * @example
     * // Create many TelegramBusinesses
     * const telegramBusiness = await prisma.telegramBusiness.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many TelegramBusinesses and only return the `id`
     * const telegramBusinessWithIdOnly = await prisma.telegramBusiness.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends TelegramBusinessCreateManyAndReturnArgs>(
      args?: SelectSubset<T, TelegramBusinessCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TelegramBusinessPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a TelegramBusiness.
     * @param {TelegramBusinessDeleteArgs} args - Arguments to delete one TelegramBusiness.
     * @example
     * // Delete one TelegramBusiness
     * const TelegramBusiness = await prisma.telegramBusiness.delete({
     *   where: {
     *     // ... filter to delete one TelegramBusiness
     *   }
     * })
     *
     */
    delete<T extends TelegramBusinessDeleteArgs>(
      args: SelectSubset<T, TelegramBusinessDeleteArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<Prisma.$TelegramBusinessPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one TelegramBusiness.
     * @param {TelegramBusinessUpdateArgs} args - Arguments to update one TelegramBusiness.
     * @example
     * // Update one TelegramBusiness
     * const telegramBusiness = await prisma.telegramBusiness.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends TelegramBusinessUpdateArgs>(
      args: SelectSubset<T, TelegramBusinessUpdateArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<Prisma.$TelegramBusinessPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more TelegramBusinesses.
     * @param {TelegramBusinessDeleteManyArgs} args - Arguments to filter TelegramBusinesses to delete.
     * @example
     * // Delete a few TelegramBusinesses
     * const { count } = await prisma.telegramBusiness.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends TelegramBusinessDeleteManyArgs>(
      args?: SelectSubset<T, TelegramBusinessDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more TelegramBusinesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TelegramBusinesses
     * const telegramBusiness = await prisma.telegramBusiness.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends TelegramBusinessUpdateManyArgs>(
      args: SelectSubset<T, TelegramBusinessUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one TelegramBusiness.
     * @param {TelegramBusinessUpsertArgs} args - Arguments to update or create a TelegramBusiness.
     * @example
     * // Update or create a TelegramBusiness
     * const telegramBusiness = await prisma.telegramBusiness.upsert({
     *   create: {
     *     // ... data to create a TelegramBusiness
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TelegramBusiness we want to update
     *   }
     * })
     */
    upsert<T extends TelegramBusinessUpsertArgs>(
      args: SelectSubset<T, TelegramBusinessUpsertArgs<ExtArgs>>,
    ): Prisma__TelegramBusinessClient<
      $Result.GetResult<Prisma.$TelegramBusinessPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of TelegramBusinesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessCountArgs} args - Arguments to filter TelegramBusinesses to count.
     * @example
     * // Count the number of TelegramBusinesses
     * const count = await prisma.telegramBusiness.count({
     *   where: {
     *     // ... the filter for the TelegramBusinesses we want to count
     *   }
     * })
     **/
    count<T extends TelegramBusinessCountArgs>(
      args?: Subset<T, TelegramBusinessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], TelegramBusinessCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a TelegramBusiness.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TelegramBusinessAggregateArgs>(
      args: Subset<T, TelegramBusinessAggregateArgs>,
    ): Prisma.PrismaPromise<GetTelegramBusinessAggregateType<T>>;

    /**
     * Group by TelegramBusiness.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramBusinessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TelegramBusinessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TelegramBusinessGroupByArgs["orderBy"] }
        : { orderBy?: TelegramBusinessGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, TelegramBusinessGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetTelegramBusinessGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the TelegramBusiness model
     */
    readonly fields: TelegramBusinessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TelegramBusiness.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TelegramBusinessClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the TelegramBusiness model
   */
  interface TelegramBusinessFieldRefs {
    readonly id: FieldRef<"TelegramBusiness", "String">;
    readonly groupId: FieldRef<"TelegramBusiness", "String">;
    readonly invitationLink: FieldRef<"TelegramBusiness", "String">;
    readonly businessId: FieldRef<"TelegramBusiness", "String">;
  }

  // Custom InputTypes
  /**
   * TelegramBusiness findUnique
   */
  export type TelegramBusinessFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which TelegramBusiness to fetch.
     */
    where: TelegramBusinessWhereUniqueInput;
  };

  /**
   * TelegramBusiness findUniqueOrThrow
   */
  export type TelegramBusinessFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which TelegramBusiness to fetch.
     */
    where: TelegramBusinessWhereUniqueInput;
  };

  /**
   * TelegramBusiness findFirst
   */
  export type TelegramBusinessFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which TelegramBusiness to fetch.
     */
    where?: TelegramBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TelegramBusinesses to fetch.
     */
    orderBy?:
      | TelegramBusinessOrderByWithRelationInput
      | TelegramBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TelegramBusinesses.
     */
    cursor?: TelegramBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TelegramBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TelegramBusinesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TelegramBusinesses.
     */
    distinct?:
      | TelegramBusinessScalarFieldEnum
      | TelegramBusinessScalarFieldEnum[];
  };

  /**
   * TelegramBusiness findFirstOrThrow
   */
  export type TelegramBusinessFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which TelegramBusiness to fetch.
     */
    where?: TelegramBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TelegramBusinesses to fetch.
     */
    orderBy?:
      | TelegramBusinessOrderByWithRelationInput
      | TelegramBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TelegramBusinesses.
     */
    cursor?: TelegramBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TelegramBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TelegramBusinesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TelegramBusinesses.
     */
    distinct?:
      | TelegramBusinessScalarFieldEnum
      | TelegramBusinessScalarFieldEnum[];
  };

  /**
   * TelegramBusiness findMany
   */
  export type TelegramBusinessFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which TelegramBusinesses to fetch.
     */
    where?: TelegramBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TelegramBusinesses to fetch.
     */
    orderBy?:
      | TelegramBusinessOrderByWithRelationInput
      | TelegramBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing TelegramBusinesses.
     */
    cursor?: TelegramBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TelegramBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TelegramBusinesses.
     */
    skip?: number;
    distinct?:
      | TelegramBusinessScalarFieldEnum
      | TelegramBusinessScalarFieldEnum[];
  };

  /**
   * TelegramBusiness create
   */
  export type TelegramBusinessCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * The data needed to create a TelegramBusiness.
     */
    data: XOR<
      TelegramBusinessCreateInput,
      TelegramBusinessUncheckedCreateInput
    >;
  };

  /**
   * TelegramBusiness createMany
   */
  export type TelegramBusinessCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many TelegramBusinesses.
     */
    data: TelegramBusinessCreateManyInput | TelegramBusinessCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * TelegramBusiness createManyAndReturn
   */
  export type TelegramBusinessCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many TelegramBusinesses.
     */
    data: TelegramBusinessCreateManyInput | TelegramBusinessCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * TelegramBusiness update
   */
  export type TelegramBusinessUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * The data needed to update a TelegramBusiness.
     */
    data: XOR<
      TelegramBusinessUpdateInput,
      TelegramBusinessUncheckedUpdateInput
    >;
    /**
     * Choose, which TelegramBusiness to update.
     */
    where: TelegramBusinessWhereUniqueInput;
  };

  /**
   * TelegramBusiness updateMany
   */
  export type TelegramBusinessUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update TelegramBusinesses.
     */
    data: XOR<
      TelegramBusinessUpdateManyMutationInput,
      TelegramBusinessUncheckedUpdateManyInput
    >;
    /**
     * Filter which TelegramBusinesses to update
     */
    where?: TelegramBusinessWhereInput;
  };

  /**
   * TelegramBusiness upsert
   */
  export type TelegramBusinessUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * The filter to search for the TelegramBusiness to update in case it exists.
     */
    where: TelegramBusinessWhereUniqueInput;
    /**
     * In case the TelegramBusiness found by the `where` argument doesn't exist, create a new TelegramBusiness with this data.
     */
    create: XOR<
      TelegramBusinessCreateInput,
      TelegramBusinessUncheckedCreateInput
    >;
    /**
     * In case the TelegramBusiness was found with the provided `where` argument, update it with this data.
     */
    update: XOR<
      TelegramBusinessUpdateInput,
      TelegramBusinessUncheckedUpdateInput
    >;
  };

  /**
   * TelegramBusiness delete
   */
  export type TelegramBusinessDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
    /**
     * Filter which TelegramBusiness to delete.
     */
    where: TelegramBusinessWhereUniqueInput;
  };

  /**
   * TelegramBusiness deleteMany
   */
  export type TelegramBusinessDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which TelegramBusinesses to delete
     */
    where?: TelegramBusinessWhereInput;
  };

  /**
   * TelegramBusiness without action
   */
  export type TelegramBusinessDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TelegramBusiness
     */
    select?: TelegramBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramBusinessInclude<ExtArgs> | null;
  };

  /**
   * Model PaymentMethod
   */

  export type AggregatePaymentMethod = {
    _count: PaymentMethodCountAggregateOutputType | null;
    _min: PaymentMethodMinAggregateOutputType | null;
    _max: PaymentMethodMaxAggregateOutputType | null;
  };

  export type PaymentMethodMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    type: $Enums.PaymentMethodType | null;
    businessId: string | null;
  };

  export type PaymentMethodMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    type: $Enums.PaymentMethodType | null;
    businessId: string | null;
  };

  export type PaymentMethodCountAggregateOutputType = {
    id: number;
    name: number;
    type: number;
    data: number;
    businessId: number;
    _all: number;
  };

  export type PaymentMethodMinAggregateInputType = {
    id?: true;
    name?: true;
    type?: true;
    businessId?: true;
  };

  export type PaymentMethodMaxAggregateInputType = {
    id?: true;
    name?: true;
    type?: true;
    businessId?: true;
  };

  export type PaymentMethodCountAggregateInputType = {
    id?: true;
    name?: true;
    type?: true;
    data?: true;
    businessId?: true;
    _all?: true;
  };

  export type PaymentMethodAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which PaymentMethod to aggregate.
     */
    where?: PaymentMethodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?:
      | PaymentMethodOrderByWithRelationInput
      | PaymentMethodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: PaymentMethodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PaymentMethods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned PaymentMethods
     **/
    _count?: true | PaymentMethodCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PaymentMethodMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PaymentMethodMaxAggregateInputType;
  };

  export type GetPaymentMethodAggregateType<
    T extends PaymentMethodAggregateArgs,
  > = {
    [P in keyof T & keyof AggregatePaymentMethod]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMethod[P]>
      : GetScalarType<T[P], AggregatePaymentMethod[P]>;
  };

  export type PaymentMethodGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: PaymentMethodWhereInput;
    orderBy?:
      | PaymentMethodOrderByWithAggregationInput
      | PaymentMethodOrderByWithAggregationInput[];
    by: PaymentMethodScalarFieldEnum[] | PaymentMethodScalarFieldEnum;
    having?: PaymentMethodScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: PaymentMethodCountAggregateInputType | true;
    _min?: PaymentMethodMinAggregateInputType;
    _max?: PaymentMethodMaxAggregateInputType;
  };

  export type PaymentMethodGroupByOutputType = {
    id: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonValue;
    businessId: string;
    _count: PaymentMethodCountAggregateOutputType | null;
    _min: PaymentMethodMinAggregateOutputType | null;
    _max: PaymentMethodMaxAggregateOutputType | null;
  };

  type GetPaymentMethodGroupByPayload<T extends PaymentMethodGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<PaymentMethodGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof PaymentMethodGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>;
        }
      >
    >;

  export type PaymentMethodSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      type?: boolean;
      data?: boolean;
      businessId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
      defaultBusiness?: boolean | PaymentMethod$defaultBusinessArgs<ExtArgs>;
    },
    ExtArgs["result"]["paymentMethod"]
  >;

  export type PaymentMethodSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      type?: boolean;
      data?: boolean;
      businessId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["paymentMethod"]
  >;

  export type PaymentMethodSelectScalar = {
    id?: boolean;
    name?: boolean;
    type?: boolean;
    data?: boolean;
    businessId?: boolean;
  };

  export type PaymentMethodInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
    defaultBusiness?: boolean | PaymentMethod$defaultBusinessArgs<ExtArgs>;
  };
  export type PaymentMethodIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };

  export type $PaymentMethodPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "PaymentMethod";
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>;
      defaultBusiness: Prisma.$BusinessPayload<ExtArgs> | null;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "required" })
         */
        name: string;
        type: $Enums.PaymentMethodType;
        data: Prisma.JsonValue;
        businessId: string;
      },
      ExtArgs["result"]["paymentMethod"]
    >;
    composites: {};
  };

  type PaymentMethodGetPayload<
    S extends boolean | null | undefined | PaymentMethodDefaultArgs,
  > = $Result.GetResult<Prisma.$PaymentMethodPayload, S>;

  type PaymentMethodCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<PaymentMethodFindManyArgs, "select" | "include" | "distinct"> & {
    select?: PaymentMethodCountAggregateInputType | true;
  };

  export interface PaymentMethodDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["PaymentMethod"];
      meta: { name: "PaymentMethod" };
    };
    /**
     * Find zero or one PaymentMethod that matches the filter.
     * @param {PaymentMethodFindUniqueArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentMethodFindUniqueArgs>(
      args: SelectSubset<T, PaymentMethodFindUniqueArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<
        Prisma.$PaymentMethodPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one PaymentMethod that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentMethodFindUniqueOrThrowArgs>(
      args: SelectSubset<T, PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<
        Prisma.$PaymentMethodPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first PaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentMethodFindFirstArgs>(
      args?: SelectSubset<T, PaymentMethodFindFirstArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<
        Prisma.$PaymentMethodPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first PaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentMethodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PaymentMethodFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<
        Prisma.$PaymentMethodPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more PaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany()
     *
     * // Get first 10 PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const paymentMethodWithIdOnly = await prisma.paymentMethod.findMany({ select: { id: true } })
     *
     */
    findMany<T extends PaymentMethodFindManyArgs>(
      args?: SelectSubset<T, PaymentMethodFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a PaymentMethod.
     * @param {PaymentMethodCreateArgs} args - Arguments to create a PaymentMethod.
     * @example
     * // Create one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.create({
     *   data: {
     *     // ... data to create a PaymentMethod
     *   }
     * })
     *
     */
    create<T extends PaymentMethodCreateArgs>(
      args: SelectSubset<T, PaymentMethodCreateArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many PaymentMethods.
     * @param {PaymentMethodCreateManyArgs} args - Arguments to create many PaymentMethods.
     * @example
     * // Create many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends PaymentMethodCreateManyArgs>(
      args?: SelectSubset<T, PaymentMethodCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many PaymentMethods and returns the data saved in the database.
     * @param {PaymentMethodCreateManyAndReturnArgs} args - Arguments to create many PaymentMethods.
     * @example
     * // Create many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many PaymentMethods and only return the `id`
     * const paymentMethodWithIdOnly = await prisma.paymentMethod.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends PaymentMethodCreateManyAndReturnArgs>(
      args?: SelectSubset<T, PaymentMethodCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$PaymentMethodPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a PaymentMethod.
     * @param {PaymentMethodDeleteArgs} args - Arguments to delete one PaymentMethod.
     * @example
     * // Delete one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.delete({
     *   where: {
     *     // ... filter to delete one PaymentMethod
     *   }
     * })
     *
     */
    delete<T extends PaymentMethodDeleteArgs>(
      args: SelectSubset<T, PaymentMethodDeleteArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one PaymentMethod.
     * @param {PaymentMethodUpdateArgs} args - Arguments to update one PaymentMethod.
     * @example
     * // Update one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends PaymentMethodUpdateArgs>(
      args: SelectSubset<T, PaymentMethodUpdateArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more PaymentMethods.
     * @param {PaymentMethodDeleteManyArgs} args - Arguments to filter PaymentMethods to delete.
     * @example
     * // Delete a few PaymentMethods
     * const { count } = await prisma.paymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends PaymentMethodDeleteManyArgs>(
      args?: SelectSubset<T, PaymentMethodDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends PaymentMethodUpdateManyArgs>(
      args: SelectSubset<T, PaymentMethodUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one PaymentMethod.
     * @param {PaymentMethodUpsertArgs} args - Arguments to update or create a PaymentMethod.
     * @example
     * // Update or create a PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.upsert({
     *   create: {
     *     // ... data to create a PaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMethod we want to update
     *   }
     * })
     */
    upsert<T extends PaymentMethodUpsertArgs>(
      args: SelectSubset<T, PaymentMethodUpsertArgs<ExtArgs>>,
    ): Prisma__PaymentMethodClient<
      $Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodCountArgs} args - Arguments to filter PaymentMethods to count.
     * @example
     * // Count the number of PaymentMethods
     * const count = await prisma.paymentMethod.count({
     *   where: {
     *     // ... the filter for the PaymentMethods we want to count
     *   }
     * })
     **/
    count<T extends PaymentMethodCountArgs>(
      args?: Subset<T, PaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], PaymentMethodCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PaymentMethodAggregateArgs>(
      args: Subset<T, PaymentMethodAggregateArgs>,
    ): Prisma.PrismaPromise<GetPaymentMethodAggregateType<T>>;

    /**
     * Group by PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends PaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMethodGroupByArgs["orderBy"] }
        : { orderBy?: PaymentMethodGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, PaymentMethodGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetPaymentMethodGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the PaymentMethod model
     */
    readonly fields: PaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMethodClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    defaultBusiness<T extends PaymentMethod$defaultBusinessArgs<ExtArgs> = {}>(
      args?: Subset<T, PaymentMethod$defaultBusinessArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the PaymentMethod model
   */
  interface PaymentMethodFieldRefs {
    readonly id: FieldRef<"PaymentMethod", "String">;
    readonly name: FieldRef<"PaymentMethod", "String">;
    readonly type: FieldRef<"PaymentMethod", "PaymentMethodType">;
    readonly data: FieldRef<"PaymentMethod", "Json">;
    readonly businessId: FieldRef<"PaymentMethod", "String">;
  }

  // Custom InputTypes
  /**
   * PaymentMethod findUnique
   */
  export type PaymentMethodFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput;
  };

  /**
   * PaymentMethod findUniqueOrThrow
   */
  export type PaymentMethodFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput;
  };

  /**
   * PaymentMethod findFirst
   */
  export type PaymentMethodFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?:
      | PaymentMethodOrderByWithRelationInput
      | PaymentMethodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PaymentMethods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[];
  };

  /**
   * PaymentMethod findFirstOrThrow
   */
  export type PaymentMethodFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?:
      | PaymentMethodOrderByWithRelationInput
      | PaymentMethodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PaymentMethods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[];
  };

  /**
   * PaymentMethod findMany
   */
  export type PaymentMethodFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * Filter, which PaymentMethods to fetch.
     */
    where?: PaymentMethodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?:
      | PaymentMethodOrderByWithRelationInput
      | PaymentMethodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PaymentMethods.
     */
    skip?: number;
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[];
  };

  /**
   * PaymentMethod create
   */
  export type PaymentMethodCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * The data needed to create a PaymentMethod.
     */
    data: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>;
  };

  /**
   * PaymentMethod createMany
   */
  export type PaymentMethodCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * PaymentMethod createManyAndReturn
   */
  export type PaymentMethodCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * PaymentMethod update
   */
  export type PaymentMethodUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * The data needed to update a PaymentMethod.
     */
    data: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>;
    /**
     * Choose, which PaymentMethod to update.
     */
    where: PaymentMethodWhereUniqueInput;
  };

  /**
   * PaymentMethod updateMany
   */
  export type PaymentMethodUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update PaymentMethods.
     */
    data: XOR<
      PaymentMethodUpdateManyMutationInput,
      PaymentMethodUncheckedUpdateManyInput
    >;
    /**
     * Filter which PaymentMethods to update
     */
    where?: PaymentMethodWhereInput;
  };

  /**
   * PaymentMethod upsert
   */
  export type PaymentMethodUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * The filter to search for the PaymentMethod to update in case it exists.
     */
    where: PaymentMethodWhereUniqueInput;
    /**
     * In case the PaymentMethod found by the `where` argument doesn't exist, create a new PaymentMethod with this data.
     */
    create: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>;
    /**
     * In case the PaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>;
  };

  /**
   * PaymentMethod delete
   */
  export type PaymentMethodDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
    /**
     * Filter which PaymentMethod to delete.
     */
    where: PaymentMethodWhereUniqueInput;
  };

  /**
   * PaymentMethod deleteMany
   */
  export type PaymentMethodDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which PaymentMethods to delete
     */
    where?: PaymentMethodWhereInput;
  };

  /**
   * PaymentMethod.defaultBusiness
   */
  export type PaymentMethod$defaultBusinessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    where?: BusinessWhereInput;
  };

  /**
   * PaymentMethod without action
   */
  export type PaymentMethodDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null;
  };

  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null;
    _avg: CategoryAvgAggregateOutputType | null;
    _sum: CategorySumAggregateOutputType | null;
    _min: CategoryMinAggregateOutputType | null;
    _max: CategoryMaxAggregateOutputType | null;
  };

  export type CategoryAvgAggregateOutputType = {
    priority: number | null;
  };

  export type CategorySumAggregateOutputType = {
    priority: number | null;
  };

  export type CategoryMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    slug: string | null;
    active: boolean | null;
    priority: number | null;
    businessId: string | null;
  };

  export type CategoryMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    slug: string | null;
    active: boolean | null;
    priority: number | null;
    businessId: string | null;
  };

  export type CategoryCountAggregateOutputType = {
    id: number;
    name: number;
    slug: number;
    active: number;
    priority: number;
    businessId: number;
    _all: number;
  };

  export type CategoryAvgAggregateInputType = {
    priority?: true;
  };

  export type CategorySumAggregateInputType = {
    priority?: true;
  };

  export type CategoryMinAggregateInputType = {
    id?: true;
    name?: true;
    slug?: true;
    active?: true;
    priority?: true;
    businessId?: true;
  };

  export type CategoryMaxAggregateInputType = {
    id?: true;
    name?: true;
    slug?: true;
    active?: true;
    priority?: true;
    businessId?: true;
  };

  export type CategoryCountAggregateInputType = {
    id?: true;
    name?: true;
    slug?: true;
    active?: true;
    priority?: true;
    businessId?: true;
    _all?: true;
  };

  export type CategoryAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     */
    orderBy?:
      | CategoryOrderByWithRelationInput
      | CategoryOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Categories
     **/
    _count?: true | CategoryCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: CategoryAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: CategorySumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: CategoryMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: CategoryMaxAggregateInputType;
  };

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>;
  };

  export type CategoryGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: CategoryWhereInput;
    orderBy?:
      | CategoryOrderByWithAggregationInput
      | CategoryOrderByWithAggregationInput[];
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum;
    having?: CategoryScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: CategoryCountAggregateInputType | true;
    _avg?: CategoryAvgAggregateInputType;
    _sum?: CategorySumAggregateInputType;
    _min?: CategoryMinAggregateInputType;
    _max?: CategoryMaxAggregateInputType;
  };

  export type CategoryGroupByOutputType = {
    id: string;
    name: string;
    slug: string | null;
    active: boolean;
    priority: number;
    businessId: string;
    _count: CategoryCountAggregateOutputType | null;
    _avg: CategoryAvgAggregateOutputType | null;
    _sum: CategorySumAggregateOutputType | null;
    _min: CategoryMinAggregateOutputType | null;
    _max: CategoryMaxAggregateOutputType | null;
  };

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<CategoryGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof CategoryGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>;
        }
      >
    >;

  export type CategorySelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      slug?: boolean;
      active?: boolean;
      priority?: boolean;
      businessId?: boolean;
      products?: boolean | Category$productsArgs<ExtArgs>;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
      _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["category"]
  >;

  export type CategorySelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      slug?: boolean;
      active?: boolean;
      priority?: boolean;
      businessId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["category"]
  >;

  export type CategorySelectScalar = {
    id?: boolean;
    name?: boolean;
    slug?: boolean;
    active?: boolean;
    priority?: boolean;
    businessId?: boolean;
  };

  export type CategoryInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    products?: boolean | Category$productsArgs<ExtArgs>;
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type CategoryIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };

  export type $CategoryPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Category";
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[];
      business: Prisma.$BusinessPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "required" })
         */
        name: string;
        slug: string | null;
        /**
         * @zod.optional()
         */
        active: boolean;
        /**
         * @zod.optional()
         */
        priority: number;
        businessId: string;
      },
      ExtArgs["result"]["category"]
    >;
    composites: {};
  };

  type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryDefaultArgs,
  > = $Result.GetResult<Prisma.$CategoryPayload, S>;

  type CategoryCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<CategoryFindManyArgs, "select" | "include" | "distinct"> & {
    select?: CategoryCountAggregateInputType | true;
  };

  export interface CategoryDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Category"];
      meta: { name: "Category" };
    };
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<
        Prisma.$CategoryPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<
        Prisma.$CategoryPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<
        Prisma.$CategoryPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<
        Prisma.$CategoryPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     *
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     *
     */
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     *
     */
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(
      args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$CategoryPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     *
     */
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
     **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], CategoryCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends CategoryAggregateArgs>(
      args: Subset<T, CategoryAggregateArgs>,
    ): Prisma.PrismaPromise<GetCategoryAggregateType<T>>;

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs["orderBy"] }
        : { orderBy?: CategoryGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetCategoryGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Category model
     */
    readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    products<T extends Category$productsArgs<ExtArgs> = {}>(
      args?: Subset<T, Category$productsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null
    >;
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", "String">;
    readonly name: FieldRef<"Category", "String">;
    readonly slug: FieldRef<"Category", "String">;
    readonly active: FieldRef<"Category", "Boolean">;
    readonly priority: FieldRef<"Category", "Int">;
    readonly businessId: FieldRef<"Category", "String">;
  }

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     */
    orderBy?:
      | CategoryOrderByWithRelationInput
      | CategoryOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[];
  };

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     */
    orderBy?:
      | CategoryOrderByWithRelationInput
      | CategoryOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[];
  };

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     */
    orderBy?:
      | CategoryOrderByWithRelationInput
      | CategoryOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     */
    skip?: number;
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[];
  };

  /**
   * Category create
   */
  export type CategoryCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>;
  };

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Category update
   */
  export type CategoryUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>;
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Categories.
     */
    data: XOR<
      CategoryUpdateManyMutationInput,
      CategoryUncheckedUpdateManyInput
    >;
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput;
  };

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput;
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>;
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>;
  };

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput;
  };

  /**
   * Category.products
   */
  export type Category$productsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    where?: ProductWhereInput;
    orderBy?:
      | ProductOrderByWithRelationInput
      | ProductOrderByWithRelationInput[];
    cursor?: ProductWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[];
  };

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
  };

  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null;
    _avg: ProductAvgAggregateOutputType | null;
    _sum: ProductSumAggregateOutputType | null;
    _min: ProductMinAggregateOutputType | null;
    _max: ProductMaxAggregateOutputType | null;
  };

  export type ProductAvgAggregateOutputType = {
    price: number | null;
    offerPrice: number | null;
    priority: number | null;
    stock: number | null;
  };

  export type ProductSumAggregateOutputType = {
    price: number | null;
    offerPrice: number | null;
    priority: number | null;
    stock: number | null;
  };

  export type ProductMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    slug: string | null;
    description: string | null;
    price: number | null;
    offerPrice: number | null;
    active: boolean | null;
    isNew: boolean | null;
    priority: number | null;
    stock: number | null;
    allowOrderOutOfStock: boolean | null;
    isExhaustible: boolean | null;
    businessId: string | null;
    categoryId: string | null;
  };

  export type ProductMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    slug: string | null;
    description: string | null;
    price: number | null;
    offerPrice: number | null;
    active: boolean | null;
    isNew: boolean | null;
    priority: number | null;
    stock: number | null;
    allowOrderOutOfStock: boolean | null;
    isExhaustible: boolean | null;
    businessId: string | null;
    categoryId: string | null;
  };

  export type ProductCountAggregateOutputType = {
    id: number;
    name: number;
    slug: number;
    image: number;
    description: number;
    price: number;
    offerPrice: number;
    images: number;
    active: number;
    isNew: number;
    priority: number;
    stock: number;
    allowOrderOutOfStock: number;
    isExhaustible: number;
    businessId: number;
    categoryId: number;
    _all: number;
  };

  export type ProductAvgAggregateInputType = {
    price?: true;
    offerPrice?: true;
    priority?: true;
    stock?: true;
  };

  export type ProductSumAggregateInputType = {
    price?: true;
    offerPrice?: true;
    priority?: true;
    stock?: true;
  };

  export type ProductMinAggregateInputType = {
    id?: true;
    name?: true;
    slug?: true;
    description?: true;
    price?: true;
    offerPrice?: true;
    active?: true;
    isNew?: true;
    priority?: true;
    stock?: true;
    allowOrderOutOfStock?: true;
    isExhaustible?: true;
    businessId?: true;
    categoryId?: true;
  };

  export type ProductMaxAggregateInputType = {
    id?: true;
    name?: true;
    slug?: true;
    description?: true;
    price?: true;
    offerPrice?: true;
    active?: true;
    isNew?: true;
    priority?: true;
    stock?: true;
    allowOrderOutOfStock?: true;
    isExhaustible?: true;
    businessId?: true;
    categoryId?: true;
  };

  export type ProductCountAggregateInputType = {
    id?: true;
    name?: true;
    slug?: true;
    image?: true;
    description?: true;
    price?: true;
    offerPrice?: true;
    images?: true;
    active?: true;
    isNew?: true;
    priority?: true;
    stock?: true;
    allowOrderOutOfStock?: true;
    isExhaustible?: true;
    businessId?: true;
    categoryId?: true;
    _all?: true;
  };

  export type ProductAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     */
    orderBy?:
      | ProductOrderByWithRelationInput
      | ProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Products
     **/
    _count?: true | ProductCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ProductAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ProductSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ProductMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ProductMaxAggregateInputType;
  };

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
    [P in keyof T & keyof AggregateProduct]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>;
  };

  export type ProductGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ProductWhereInput;
    orderBy?:
      | ProductOrderByWithAggregationInput
      | ProductOrderByWithAggregationInput[];
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum;
    having?: ProductScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ProductCountAggregateInputType | true;
    _avg?: ProductAvgAggregateInputType;
    _sum?: ProductSumAggregateInputType;
    _min?: ProductMinAggregateInputType;
    _max?: ProductMaxAggregateInputType;
  };

  export type ProductGroupByOutputType = {
    id: string;
    name: string;
    slug: string | null;
    image: JsonValue;
    description: string;
    price: number;
    offerPrice: number | null;
    images: JsonValue[];
    active: boolean;
    isNew: boolean;
    priority: number;
    stock: number;
    allowOrderOutOfStock: boolean;
    isExhaustible: boolean;
    businessId: string;
    categoryId: string | null;
    _count: ProductCountAggregateOutputType | null;
    _avg: ProductAvgAggregateOutputType | null;
    _sum: ProductSumAggregateOutputType | null;
    _min: ProductMinAggregateOutputType | null;
    _max: ProductMaxAggregateOutputType | null;
  };

  type GetProductGroupByPayload<T extends ProductGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<ProductGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof ProductGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>;
        }
      >
    >;

  export type ProductSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      slug?: boolean;
      image?: boolean;
      description?: boolean;
      price?: boolean;
      offerPrice?: boolean;
      images?: boolean;
      active?: boolean;
      isNew?: boolean;
      priority?: boolean;
      stock?: boolean;
      allowOrderOutOfStock?: boolean;
      isExhaustible?: boolean;
      businessId?: boolean;
      categoryId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
      category?: boolean | Product$categoryArgs<ExtArgs>;
      orderItems?: boolean | Product$orderItemsArgs<ExtArgs>;
      _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["product"]
  >;

  export type ProductSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      slug?: boolean;
      image?: boolean;
      description?: boolean;
      price?: boolean;
      offerPrice?: boolean;
      images?: boolean;
      active?: boolean;
      isNew?: boolean;
      priority?: boolean;
      stock?: boolean;
      allowOrderOutOfStock?: boolean;
      isExhaustible?: boolean;
      businessId?: boolean;
      categoryId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
      category?: boolean | Product$categoryArgs<ExtArgs>;
    },
    ExtArgs["result"]["product"]
  >;

  export type ProductSelectScalar = {
    id?: boolean;
    name?: boolean;
    slug?: boolean;
    image?: boolean;
    description?: boolean;
    price?: boolean;
    offerPrice?: boolean;
    images?: boolean;
    active?: boolean;
    isNew?: boolean;
    priority?: boolean;
    stock?: boolean;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    businessId?: boolean;
    categoryId?: boolean;
  };

  export type ProductInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
    category?: boolean | Product$categoryArgs<ExtArgs>;
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>;
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type ProductIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
    category?: boolean | Product$categoryArgs<ExtArgs>;
  };

  export type $ProductPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Product";
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>;
      category: Prisma.$CategoryPayload<ExtArgs> | null;
      orderItems: Prisma.$OrderProductPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        name: string;
        slug: string | null;
        image: Prisma.JsonValue;
        /**
         * @zod.min(1, { message: "Required" })
         */
        description: string;
        /**
         * @zod.gte(0)
         */
        price: number;
        /**
         * @zod.gte(0)
         */
        offerPrice: number | null;
        images: Prisma.JsonValue[];
        /**
         * @zod.optional()
         */
        active: boolean;
        /**
         * @zod.optional()
         */
        isNew: boolean;
        /**
         * @zod.optional()
         */
        priority: number;
        /**
         * @zod.min(0)
         */
        stock: number;
        allowOrderOutOfStock: boolean;
        isExhaustible: boolean;
        businessId: string;
        categoryId: string | null;
      },
      ExtArgs["result"]["product"]
    >;
    composites: {};
  };

  type ProductGetPayload<
    S extends boolean | null | undefined | ProductDefaultArgs,
  > = $Result.GetResult<Prisma.$ProductPayload, S>;

  type ProductCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<ProductFindManyArgs, "select" | "include" | "distinct"> & {
    select?: ProductCountAggregateInputType | true;
  };

  export interface ProductDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Product"];
      meta: { name: "Product" };
    };
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<
        Prisma.$ProductPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<
        Prisma.$ProductPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     *
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     *
     */
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     *
     */
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(
      args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$ProductPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     *
     */
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      $Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
     **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ProductCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ProductAggregateArgs>(
      args: Subset<T, ProductAggregateArgs>,
    ): Prisma.PrismaPromise<GetProductAggregateType<T>>;

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs["orderBy"] }
        : { orderBy?: ProductGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetProductGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Product model
     */
    readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    category<T extends Product$categoryArgs<ExtArgs> = {}>(
      args?: Subset<T, Product$categoryArgs<ExtArgs>>,
    ): Prisma__CategoryClient<
      $Result.GetResult<
        Prisma.$CategoryPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    orderItems<T extends Product$orderItemsArgs<ExtArgs> = {}>(
      args?: Subset<T, Product$orderItemsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", "String">;
    readonly name: FieldRef<"Product", "String">;
    readonly slug: FieldRef<"Product", "String">;
    readonly image: FieldRef<"Product", "Json">;
    readonly description: FieldRef<"Product", "String">;
    readonly price: FieldRef<"Product", "Int">;
    readonly offerPrice: FieldRef<"Product", "Int">;
    readonly images: FieldRef<"Product", "Json[]">;
    readonly active: FieldRef<"Product", "Boolean">;
    readonly isNew: FieldRef<"Product", "Boolean">;
    readonly priority: FieldRef<"Product", "Int">;
    readonly stock: FieldRef<"Product", "Int">;
    readonly allowOrderOutOfStock: FieldRef<"Product", "Boolean">;
    readonly isExhaustible: FieldRef<"Product", "Boolean">;
    readonly businessId: FieldRef<"Product", "String">;
    readonly categoryId: FieldRef<"Product", "String">;
  }

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput;
  };

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput;
  };

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     */
    orderBy?:
      | ProductOrderByWithRelationInput
      | ProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[];
  };

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     */
    orderBy?:
      | ProductOrderByWithRelationInput
      | ProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[];
  };

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     */
    orderBy?:
      | ProductOrderByWithRelationInput
      | ProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     */
    skip?: number;
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[];
  };

  /**
   * Product create
   */
  export type ProductCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>;
  };

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Product update
   */
  export type ProductUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>;
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput;
  };

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>;
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput;
  };

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput;
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>;
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>;
  };

  /**
   * Product delete
   */
  export type ProductDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput;
  };

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput;
  };

  /**
   * Product.category
   */
  export type Product$categoryArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null;
    where?: CategoryWhereInput;
  };

  /**
   * Product.orderItems
   */
  export type Product$orderItemsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    where?: OrderProductWhereInput;
    orderBy?:
      | OrderProductOrderByWithRelationInput
      | OrderProductOrderByWithRelationInput[];
    cursor?: OrderProductWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[];
  };

  /**
   * Product without action
   */
  export type ProductDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null;
  };

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  export type UserMinAggregateOutputType = {
    id: string | null;
    role: $Enums.UserRoles | null;
    name: string | null;
    phone: string | null;
    email: string | null;
    emailVerified: Date | null;
    image: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserMaxAggregateOutputType = {
    id: string | null;
    role: $Enums.UserRoles | null;
    name: string | null;
    phone: string | null;
    email: string | null;
    emailVerified: Date | null;
    image: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserCountAggregateOutputType = {
    id: number;
    role: number;
    name: number;
    phone: number;
    email: number;
    emailVerified: number;
    image: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type UserMinAggregateInputType = {
    id?: true;
    role?: true;
    name?: true;
    phone?: true;
    email?: true;
    emailVerified?: true;
    image?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserMaxAggregateInputType = {
    id?: true;
    role?: true;
    name?: true;
    phone?: true;
    email?: true;
    emailVerified?: true;
    image?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserCountAggregateInputType = {
    id?: true;
    role?: true;
    name?: true;
    phone?: true;
    email?: true;
    emailVerified?: true;
    image?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type UserAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Users
     **/
    _count?: true | UserCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserMaxAggregateInputType;
  };

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>;
  };

  export type UserGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserWhereInput;
    orderBy?:
      | UserOrderByWithAggregationInput
      | UserOrderByWithAggregationInput[];
    by: UserScalarFieldEnum[] | UserScalarFieldEnum;
    having?: UserScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserCountAggregateInputType | true;
    _min?: UserMinAggregateInputType;
    _max?: UserMaxAggregateInputType;
  };

  export type UserGroupByOutputType = {
    id: string;
    role: $Enums.UserRoles;
    name: string | null;
    phone: string | null;
    email: string;
    emailVerified: Date | null;
    image: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: UserCountAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof UserGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserGroupByOutputType[P]>
          : GetScalarType<T[P], UserGroupByOutputType[P]>;
      }
    >
  >;

  export type UserSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      role?: boolean;
      name?: boolean;
      phone?: boolean;
      email?: boolean;
      emailVerified?: boolean;
      image?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      orders?: boolean | User$ordersArgs<ExtArgs>;
      accounts?: boolean | User$accountsArgs<ExtArgs>;
      sessions?: boolean | User$sessionsArgs<ExtArgs>;
      Authenticator?: boolean | User$AuthenticatorArgs<ExtArgs>;
      business?: boolean | User$businessArgs<ExtArgs>;
      address?: boolean | User$addressArgs<ExtArgs>;
      _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["user"]
  >;

  export type UserSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      role?: boolean;
      name?: boolean;
      phone?: boolean;
      email?: boolean;
      emailVerified?: boolean;
      image?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
    },
    ExtArgs["result"]["user"]
  >;

  export type UserSelectScalar = {
    id?: boolean;
    role?: boolean;
    name?: boolean;
    phone?: boolean;
    email?: boolean;
    emailVerified?: boolean;
    image?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type UserInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    orders?: boolean | User$ordersArgs<ExtArgs>;
    accounts?: boolean | User$accountsArgs<ExtArgs>;
    sessions?: boolean | User$sessionsArgs<ExtArgs>;
    Authenticator?: boolean | User$AuthenticatorArgs<ExtArgs>;
    business?: boolean | User$businessArgs<ExtArgs>;
    address?: boolean | User$addressArgs<ExtArgs>;
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type UserIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};

  export type $UserPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "User";
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[];
      accounts: Prisma.$AccountPayload<ExtArgs>[];
      sessions: Prisma.$SessionPayload<ExtArgs>[];
      Authenticator: Prisma.$AuthenticatorPayload<ExtArgs>[];
      business: Prisma.$UserBusinessPayload<ExtArgs>[];
      address: Prisma.$UserAddressPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        role: $Enums.UserRoles;
        name: string | null;
        phone: string | null;
        email: string;
        emailVerified: Date | null;
        image: string | null;
        createdAt: Date;
        updatedAt: Date;
      },
      ExtArgs["result"]["user"]
    >;
    composites: {};
  };

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> =
    $Result.GetResult<Prisma.$UserPayload, S>;

  type UserCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<UserFindManyArgs, "select" | "include" | "distinct"> & {
    select?: UserCountAggregateInputType | true;
  };

  export interface UserDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["User"];
      meta: { name: "User" };
    };
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     *
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     *
     */
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">
    >;

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     *
     */
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
     **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], UserCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserAggregateArgs>(
      args: Subset<T, UserAggregateArgs>,
    ): Prisma.PrismaPromise<GetUserAggregateType<T>>;

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs["orderBy"] }
        : { orderBy?: UserGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetUserGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the User model
     */
    readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    orders<T extends User$ordersArgs<ExtArgs> = {}>(
      args?: Subset<T, User$ordersArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null
    >;
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$accountsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null
    >;
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$sessionsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null
    >;
    Authenticator<T extends User$AuthenticatorArgs<ExtArgs> = {}>(
      args?: Subset<T, User$AuthenticatorArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    business<T extends User$businessArgs<ExtArgs> = {}>(
      args?: Subset<T, User$businessArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    address<T extends User$addressArgs<ExtArgs> = {}>(
      args?: Subset<T, User$addressArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", "String">;
    readonly role: FieldRef<"User", "UserRoles">;
    readonly name: FieldRef<"User", "String">;
    readonly phone: FieldRef<"User", "String">;
    readonly email: FieldRef<"User", "String">;
    readonly emailVerified: FieldRef<"User", "DateTime">;
    readonly image: FieldRef<"User", "String">;
    readonly createdAt: FieldRef<"User", "DateTime">;
    readonly updatedAt: FieldRef<"User", "DateTime">;
  }

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User findMany
   */
  export type UserFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User create
   */
  export type UserCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>;
  };

  /**
   * User createMany
   */
  export type UserCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * User update
   */
  export type UserUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>;
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput;
  };

  /**
   * User upsert
   */
  export type UserUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput;
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>;
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
  };

  /**
   * User delete
   */
  export type UserDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput;
  };

  /**
   * User.orders
   */
  export type User$ordersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    where?: OrderWhereInput;
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[];
    cursor?: OrderWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[];
  };

  /**
   * User.accounts
   */
  export type User$accountsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    where?: AccountWhereInput;
    orderBy?:
      | AccountOrderByWithRelationInput
      | AccountOrderByWithRelationInput[];
    cursor?: AccountWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[];
  };

  /**
   * User.sessions
   */
  export type User$sessionsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    where?: SessionWhereInput;
    orderBy?:
      | SessionOrderByWithRelationInput
      | SessionOrderByWithRelationInput[];
    cursor?: SessionWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[];
  };

  /**
   * User.Authenticator
   */
  export type User$AuthenticatorArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    where?: AuthenticatorWhereInput;
    orderBy?:
      | AuthenticatorOrderByWithRelationInput
      | AuthenticatorOrderByWithRelationInput[];
    cursor?: AuthenticatorWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[];
  };

  /**
   * User.business
   */
  export type User$businessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    where?: UserBusinessWhereInput;
    orderBy?:
      | UserBusinessOrderByWithRelationInput
      | UserBusinessOrderByWithRelationInput[];
    cursor?: UserBusinessWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: UserBusinessScalarFieldEnum | UserBusinessScalarFieldEnum[];
  };

  /**
   * User.address
   */
  export type User$addressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    where?: UserAddressWhereInput;
    orderBy?:
      | UserAddressOrderByWithRelationInput
      | UserAddressOrderByWithRelationInput[];
    cursor?: UserAddressWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[];
  };

  /**
   * User without action
   */
  export type UserDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
  };

  /**
   * Model UserBusiness
   */

  export type AggregateUserBusiness = {
    _count: UserBusinessCountAggregateOutputType | null;
    _min: UserBusinessMinAggregateOutputType | null;
    _max: UserBusinessMaxAggregateOutputType | null;
  };

  export type UserBusinessMinAggregateOutputType = {
    userId: string | null;
    businessId: string | null;
    type: $Enums.UserBusinessType | null;
  };

  export type UserBusinessMaxAggregateOutputType = {
    userId: string | null;
    businessId: string | null;
    type: $Enums.UserBusinessType | null;
  };

  export type UserBusinessCountAggregateOutputType = {
    userId: number;
    businessId: number;
    type: number;
    _all: number;
  };

  export type UserBusinessMinAggregateInputType = {
    userId?: true;
    businessId?: true;
    type?: true;
  };

  export type UserBusinessMaxAggregateInputType = {
    userId?: true;
    businessId?: true;
    type?: true;
  };

  export type UserBusinessCountAggregateInputType = {
    userId?: true;
    businessId?: true;
    type?: true;
    _all?: true;
  };

  export type UserBusinessAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserBusiness to aggregate.
     */
    where?: UserBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserBusinesses to fetch.
     */
    orderBy?:
      | UserBusinessOrderByWithRelationInput
      | UserBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserBusinesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned UserBusinesses
     **/
    _count?: true | UserBusinessCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserBusinessMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserBusinessMaxAggregateInputType;
  };

  export type GetUserBusinessAggregateType<
    T extends UserBusinessAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateUserBusiness]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBusiness[P]>
      : GetScalarType<T[P], AggregateUserBusiness[P]>;
  };

  export type UserBusinessGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserBusinessWhereInput;
    orderBy?:
      | UserBusinessOrderByWithAggregationInput
      | UserBusinessOrderByWithAggregationInput[];
    by: UserBusinessScalarFieldEnum[] | UserBusinessScalarFieldEnum;
    having?: UserBusinessScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserBusinessCountAggregateInputType | true;
    _min?: UserBusinessMinAggregateInputType;
    _max?: UserBusinessMaxAggregateInputType;
  };

  export type UserBusinessGroupByOutputType = {
    userId: string;
    businessId: string;
    type: $Enums.UserBusinessType;
    _count: UserBusinessCountAggregateOutputType | null;
    _min: UserBusinessMinAggregateOutputType | null;
    _max: UserBusinessMaxAggregateOutputType | null;
  };

  type GetUserBusinessGroupByPayload<T extends UserBusinessGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<UserBusinessGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof UserBusinessGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBusinessGroupByOutputType[P]>
            : GetScalarType<T[P], UserBusinessGroupByOutputType[P]>;
        }
      >
    >;

  export type UserBusinessSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      userId?: boolean;
      businessId?: boolean;
      type?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["userBusiness"]
  >;

  export type UserBusinessSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      userId?: boolean;
      businessId?: boolean;
      type?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["userBusiness"]
  >;

  export type UserBusinessSelectScalar = {
    userId?: boolean;
    businessId?: boolean;
    type?: boolean;
  };

  export type UserBusinessInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };
  export type UserBusinessIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };

  export type $UserBusinessPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "UserBusiness";
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
      business: Prisma.$BusinessPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        userId: string;
        businessId: string;
        type: $Enums.UserBusinessType;
      },
      ExtArgs["result"]["userBusiness"]
    >;
    composites: {};
  };

  type UserBusinessGetPayload<
    S extends boolean | null | undefined | UserBusinessDefaultArgs,
  > = $Result.GetResult<Prisma.$UserBusinessPayload, S>;

  type UserBusinessCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<UserBusinessFindManyArgs, "select" | "include" | "distinct"> & {
    select?: UserBusinessCountAggregateInputType | true;
  };

  export interface UserBusinessDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["UserBusiness"];
      meta: { name: "UserBusiness" };
    };
    /**
     * Find zero or one UserBusiness that matches the filter.
     * @param {UserBusinessFindUniqueArgs} args - Arguments to find a UserBusiness
     * @example
     * // Get one UserBusiness
     * const userBusiness = await prisma.userBusiness.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBusinessFindUniqueArgs>(
      args: SelectSubset<T, UserBusinessFindUniqueArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<
        Prisma.$UserBusinessPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one UserBusiness that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserBusinessFindUniqueOrThrowArgs} args - Arguments to find a UserBusiness
     * @example
     * // Get one UserBusiness
     * const userBusiness = await prisma.userBusiness.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBusinessFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserBusinessFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<
        Prisma.$UserBusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first UserBusiness that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessFindFirstArgs} args - Arguments to find a UserBusiness
     * @example
     * // Get one UserBusiness
     * const userBusiness = await prisma.userBusiness.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBusinessFindFirstArgs>(
      args?: SelectSubset<T, UserBusinessFindFirstArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<
        Prisma.$UserBusinessPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first UserBusiness that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessFindFirstOrThrowArgs} args - Arguments to find a UserBusiness
     * @example
     * // Get one UserBusiness
     * const userBusiness = await prisma.userBusiness.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBusinessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserBusinessFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<
        Prisma.$UserBusinessPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more UserBusinesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBusinesses
     * const userBusinesses = await prisma.userBusiness.findMany()
     *
     * // Get first 10 UserBusinesses
     * const userBusinesses = await prisma.userBusiness.findMany({ take: 10 })
     *
     * // Only select the `userId`
     * const userBusinessWithUserIdOnly = await prisma.userBusiness.findMany({ select: { userId: true } })
     *
     */
    findMany<T extends UserBusinessFindManyArgs>(
      args?: SelectSubset<T, UserBusinessFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a UserBusiness.
     * @param {UserBusinessCreateArgs} args - Arguments to create a UserBusiness.
     * @example
     * // Create one UserBusiness
     * const UserBusiness = await prisma.userBusiness.create({
     *   data: {
     *     // ... data to create a UserBusiness
     *   }
     * })
     *
     */
    create<T extends UserBusinessCreateArgs>(
      args: SelectSubset<T, UserBusinessCreateArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many UserBusinesses.
     * @param {UserBusinessCreateManyArgs} args - Arguments to create many UserBusinesses.
     * @example
     * // Create many UserBusinesses
     * const userBusiness = await prisma.userBusiness.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserBusinessCreateManyArgs>(
      args?: SelectSubset<T, UserBusinessCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many UserBusinesses and returns the data saved in the database.
     * @param {UserBusinessCreateManyAndReturnArgs} args - Arguments to create many UserBusinesses.
     * @example
     * // Create many UserBusinesses
     * const userBusiness = await prisma.userBusiness.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many UserBusinesses and only return the `userId`
     * const userBusinessWithUserIdOnly = await prisma.userBusiness.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserBusinessCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserBusinessCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserBusinessPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a UserBusiness.
     * @param {UserBusinessDeleteArgs} args - Arguments to delete one UserBusiness.
     * @example
     * // Delete one UserBusiness
     * const UserBusiness = await prisma.userBusiness.delete({
     *   where: {
     *     // ... filter to delete one UserBusiness
     *   }
     * })
     *
     */
    delete<T extends UserBusinessDeleteArgs>(
      args: SelectSubset<T, UserBusinessDeleteArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one UserBusiness.
     * @param {UserBusinessUpdateArgs} args - Arguments to update one UserBusiness.
     * @example
     * // Update one UserBusiness
     * const userBusiness = await prisma.userBusiness.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserBusinessUpdateArgs>(
      args: SelectSubset<T, UserBusinessUpdateArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more UserBusinesses.
     * @param {UserBusinessDeleteManyArgs} args - Arguments to filter UserBusinesses to delete.
     * @example
     * // Delete a few UserBusinesses
     * const { count } = await prisma.userBusiness.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserBusinessDeleteManyArgs>(
      args?: SelectSubset<T, UserBusinessDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserBusinesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBusinesses
     * const userBusiness = await prisma.userBusiness.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserBusinessUpdateManyArgs>(
      args: SelectSubset<T, UserBusinessUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one UserBusiness.
     * @param {UserBusinessUpsertArgs} args - Arguments to update or create a UserBusiness.
     * @example
     * // Update or create a UserBusiness
     * const userBusiness = await prisma.userBusiness.upsert({
     *   create: {
     *     // ... data to create a UserBusiness
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBusiness we want to update
     *   }
     * })
     */
    upsert<T extends UserBusinessUpsertArgs>(
      args: SelectSubset<T, UserBusinessUpsertArgs<ExtArgs>>,
    ): Prisma__UserBusinessClient<
      $Result.GetResult<Prisma.$UserBusinessPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of UserBusinesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessCountArgs} args - Arguments to filter UserBusinesses to count.
     * @example
     * // Count the number of UserBusinesses
     * const count = await prisma.userBusiness.count({
     *   where: {
     *     // ... the filter for the UserBusinesses we want to count
     *   }
     * })
     **/
    count<T extends UserBusinessCountArgs>(
      args?: Subset<T, UserBusinessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], UserBusinessCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a UserBusiness.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserBusinessAggregateArgs>(
      args: Subset<T, UserBusinessAggregateArgs>,
    ): Prisma.PrismaPromise<GetUserBusinessAggregateType<T>>;

    /**
     * Group by UserBusiness.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBusinessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserBusinessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBusinessGroupByArgs["orderBy"] }
        : { orderBy?: UserBusinessGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserBusinessGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetUserBusinessGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the UserBusiness model
     */
    readonly fields: UserBusinessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBusiness.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBusinessClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the UserBusiness model
   */
  interface UserBusinessFieldRefs {
    readonly userId: FieldRef<"UserBusiness", "String">;
    readonly businessId: FieldRef<"UserBusiness", "String">;
    readonly type: FieldRef<"UserBusiness", "UserBusinessType">;
  }

  // Custom InputTypes
  /**
   * UserBusiness findUnique
   */
  export type UserBusinessFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which UserBusiness to fetch.
     */
    where: UserBusinessWhereUniqueInput;
  };

  /**
   * UserBusiness findUniqueOrThrow
   */
  export type UserBusinessFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which UserBusiness to fetch.
     */
    where: UserBusinessWhereUniqueInput;
  };

  /**
   * UserBusiness findFirst
   */
  export type UserBusinessFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which UserBusiness to fetch.
     */
    where?: UserBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserBusinesses to fetch.
     */
    orderBy?:
      | UserBusinessOrderByWithRelationInput
      | UserBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserBusinesses.
     */
    cursor?: UserBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserBusinesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserBusinesses.
     */
    distinct?: UserBusinessScalarFieldEnum | UserBusinessScalarFieldEnum[];
  };

  /**
   * UserBusiness findFirstOrThrow
   */
  export type UserBusinessFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which UserBusiness to fetch.
     */
    where?: UserBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserBusinesses to fetch.
     */
    orderBy?:
      | UserBusinessOrderByWithRelationInput
      | UserBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserBusinesses.
     */
    cursor?: UserBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserBusinesses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserBusinesses.
     */
    distinct?: UserBusinessScalarFieldEnum | UserBusinessScalarFieldEnum[];
  };

  /**
   * UserBusiness findMany
   */
  export type UserBusinessFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * Filter, which UserBusinesses to fetch.
     */
    where?: UserBusinessWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserBusinesses to fetch.
     */
    orderBy?:
      | UserBusinessOrderByWithRelationInput
      | UserBusinessOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing UserBusinesses.
     */
    cursor?: UserBusinessWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserBusinesses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserBusinesses.
     */
    skip?: number;
    distinct?: UserBusinessScalarFieldEnum | UserBusinessScalarFieldEnum[];
  };

  /**
   * UserBusiness create
   */
  export type UserBusinessCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * The data needed to create a UserBusiness.
     */
    data: XOR<UserBusinessCreateInput, UserBusinessUncheckedCreateInput>;
  };

  /**
   * UserBusiness createMany
   */
  export type UserBusinessCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many UserBusinesses.
     */
    data: UserBusinessCreateManyInput | UserBusinessCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * UserBusiness createManyAndReturn
   */
  export type UserBusinessCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many UserBusinesses.
     */
    data: UserBusinessCreateManyInput | UserBusinessCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserBusiness update
   */
  export type UserBusinessUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * The data needed to update a UserBusiness.
     */
    data: XOR<UserBusinessUpdateInput, UserBusinessUncheckedUpdateInput>;
    /**
     * Choose, which UserBusiness to update.
     */
    where: UserBusinessWhereUniqueInput;
  };

  /**
   * UserBusiness updateMany
   */
  export type UserBusinessUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update UserBusinesses.
     */
    data: XOR<
      UserBusinessUpdateManyMutationInput,
      UserBusinessUncheckedUpdateManyInput
    >;
    /**
     * Filter which UserBusinesses to update
     */
    where?: UserBusinessWhereInput;
  };

  /**
   * UserBusiness upsert
   */
  export type UserBusinessUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * The filter to search for the UserBusiness to update in case it exists.
     */
    where: UserBusinessWhereUniqueInput;
    /**
     * In case the UserBusiness found by the `where` argument doesn't exist, create a new UserBusiness with this data.
     */
    create: XOR<UserBusinessCreateInput, UserBusinessUncheckedCreateInput>;
    /**
     * In case the UserBusiness was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBusinessUpdateInput, UserBusinessUncheckedUpdateInput>;
  };

  /**
   * UserBusiness delete
   */
  export type UserBusinessDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
    /**
     * Filter which UserBusiness to delete.
     */
    where: UserBusinessWhereUniqueInput;
  };

  /**
   * UserBusiness deleteMany
   */
  export type UserBusinessDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserBusinesses to delete
     */
    where?: UserBusinessWhereInput;
  };

  /**
   * UserBusiness without action
   */
  export type UserBusinessDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserBusiness
     */
    select?: UserBusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBusinessInclude<ExtArgs> | null;
  };

  /**
   * Model InvitationLink
   */

  export type AggregateInvitationLink = {
    _count: InvitationLinkCountAggregateOutputType | null;
    _min: InvitationLinkMinAggregateOutputType | null;
    _max: InvitationLinkMaxAggregateOutputType | null;
  };

  export type InvitationLinkMinAggregateOutputType = {
    id: string | null;
    code: string | null;
    businessId: string | null;
    createdAt: Date | null;
  };

  export type InvitationLinkMaxAggregateOutputType = {
    id: string | null;
    code: string | null;
    businessId: string | null;
    createdAt: Date | null;
  };

  export type InvitationLinkCountAggregateOutputType = {
    id: number;
    code: number;
    businessId: number;
    createdAt: number;
    _all: number;
  };

  export type InvitationLinkMinAggregateInputType = {
    id?: true;
    code?: true;
    businessId?: true;
    createdAt?: true;
  };

  export type InvitationLinkMaxAggregateInputType = {
    id?: true;
    code?: true;
    businessId?: true;
    createdAt?: true;
  };

  export type InvitationLinkCountAggregateInputType = {
    id?: true;
    code?: true;
    businessId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type InvitationLinkAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which InvitationLink to aggregate.
     */
    where?: InvitationLinkWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of InvitationLinks to fetch.
     */
    orderBy?:
      | InvitationLinkOrderByWithRelationInput
      | InvitationLinkOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: InvitationLinkWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` InvitationLinks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` InvitationLinks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned InvitationLinks
     **/
    _count?: true | InvitationLinkCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: InvitationLinkMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: InvitationLinkMaxAggregateInputType;
  };

  export type GetInvitationLinkAggregateType<
    T extends InvitationLinkAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateInvitationLink]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitationLink[P]>
      : GetScalarType<T[P], AggregateInvitationLink[P]>;
  };

  export type InvitationLinkGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: InvitationLinkWhereInput;
    orderBy?:
      | InvitationLinkOrderByWithAggregationInput
      | InvitationLinkOrderByWithAggregationInput[];
    by: InvitationLinkScalarFieldEnum[] | InvitationLinkScalarFieldEnum;
    having?: InvitationLinkScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: InvitationLinkCountAggregateInputType | true;
    _min?: InvitationLinkMinAggregateInputType;
    _max?: InvitationLinkMaxAggregateInputType;
  };

  export type InvitationLinkGroupByOutputType = {
    id: string;
    code: string;
    businessId: string;
    createdAt: Date;
    _count: InvitationLinkCountAggregateOutputType | null;
    _min: InvitationLinkMinAggregateOutputType | null;
    _max: InvitationLinkMaxAggregateOutputType | null;
  };

  type GetInvitationLinkGroupByPayload<T extends InvitationLinkGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<InvitationLinkGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof InvitationLinkGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationLinkGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationLinkGroupByOutputType[P]>;
        }
      >
    >;

  export type InvitationLinkSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      code?: boolean;
      businessId?: boolean;
      createdAt?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["invitationLink"]
  >;

  export type InvitationLinkSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      code?: boolean;
      businessId?: boolean;
      createdAt?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["invitationLink"]
  >;

  export type InvitationLinkSelectScalar = {
    id?: boolean;
    code?: boolean;
    businessId?: boolean;
    createdAt?: boolean;
  };

  export type InvitationLinkInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };
  export type InvitationLinkIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
  };

  export type $InvitationLinkPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "InvitationLink";
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        code: string;
        businessId: string;
        createdAt: Date;
      },
      ExtArgs["result"]["invitationLink"]
    >;
    composites: {};
  };

  type InvitationLinkGetPayload<
    S extends boolean | null | undefined | InvitationLinkDefaultArgs,
  > = $Result.GetResult<Prisma.$InvitationLinkPayload, S>;

  type InvitationLinkCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<InvitationLinkFindManyArgs, "select" | "include" | "distinct"> & {
    select?: InvitationLinkCountAggregateInputType | true;
  };

  export interface InvitationLinkDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["InvitationLink"];
      meta: { name: "InvitationLink" };
    };
    /**
     * Find zero or one InvitationLink that matches the filter.
     * @param {InvitationLinkFindUniqueArgs} args - Arguments to find a InvitationLink
     * @example
     * // Get one InvitationLink
     * const invitationLink = await prisma.invitationLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationLinkFindUniqueArgs>(
      args: SelectSubset<T, InvitationLinkFindUniqueArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<
        Prisma.$InvitationLinkPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one InvitationLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvitationLinkFindUniqueOrThrowArgs} args - Arguments to find a InvitationLink
     * @example
     * // Get one InvitationLink
     * const invitationLink = await prisma.invitationLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationLinkFindUniqueOrThrowArgs>(
      args: SelectSubset<T, InvitationLinkFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<
        Prisma.$InvitationLinkPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first InvitationLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkFindFirstArgs} args - Arguments to find a InvitationLink
     * @example
     * // Get one InvitationLink
     * const invitationLink = await prisma.invitationLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationLinkFindFirstArgs>(
      args?: SelectSubset<T, InvitationLinkFindFirstArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<
        Prisma.$InvitationLinkPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first InvitationLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkFindFirstOrThrowArgs} args - Arguments to find a InvitationLink
     * @example
     * // Get one InvitationLink
     * const invitationLink = await prisma.invitationLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationLinkFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InvitationLinkFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<
        Prisma.$InvitationLinkPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more InvitationLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvitationLinks
     * const invitationLinks = await prisma.invitationLink.findMany()
     *
     * // Get first 10 InvitationLinks
     * const invitationLinks = await prisma.invitationLink.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const invitationLinkWithIdOnly = await prisma.invitationLink.findMany({ select: { id: true } })
     *
     */
    findMany<T extends InvitationLinkFindManyArgs>(
      args?: SelectSubset<T, InvitationLinkFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$InvitationLinkPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a InvitationLink.
     * @param {InvitationLinkCreateArgs} args - Arguments to create a InvitationLink.
     * @example
     * // Create one InvitationLink
     * const InvitationLink = await prisma.invitationLink.create({
     *   data: {
     *     // ... data to create a InvitationLink
     *   }
     * })
     *
     */
    create<T extends InvitationLinkCreateArgs>(
      args: SelectSubset<T, InvitationLinkCreateArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<Prisma.$InvitationLinkPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many InvitationLinks.
     * @param {InvitationLinkCreateManyArgs} args - Arguments to create many InvitationLinks.
     * @example
     * // Create many InvitationLinks
     * const invitationLink = await prisma.invitationLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends InvitationLinkCreateManyArgs>(
      args?: SelectSubset<T, InvitationLinkCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many InvitationLinks and returns the data saved in the database.
     * @param {InvitationLinkCreateManyAndReturnArgs} args - Arguments to create many InvitationLinks.
     * @example
     * // Create many InvitationLinks
     * const invitationLink = await prisma.invitationLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many InvitationLinks and only return the `id`
     * const invitationLinkWithIdOnly = await prisma.invitationLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends InvitationLinkCreateManyAndReturnArgs>(
      args?: SelectSubset<T, InvitationLinkCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$InvitationLinkPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a InvitationLink.
     * @param {InvitationLinkDeleteArgs} args - Arguments to delete one InvitationLink.
     * @example
     * // Delete one InvitationLink
     * const InvitationLink = await prisma.invitationLink.delete({
     *   where: {
     *     // ... filter to delete one InvitationLink
     *   }
     * })
     *
     */
    delete<T extends InvitationLinkDeleteArgs>(
      args: SelectSubset<T, InvitationLinkDeleteArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<Prisma.$InvitationLinkPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one InvitationLink.
     * @param {InvitationLinkUpdateArgs} args - Arguments to update one InvitationLink.
     * @example
     * // Update one InvitationLink
     * const invitationLink = await prisma.invitationLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends InvitationLinkUpdateArgs>(
      args: SelectSubset<T, InvitationLinkUpdateArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<Prisma.$InvitationLinkPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more InvitationLinks.
     * @param {InvitationLinkDeleteManyArgs} args - Arguments to filter InvitationLinks to delete.
     * @example
     * // Delete a few InvitationLinks
     * const { count } = await prisma.invitationLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends InvitationLinkDeleteManyArgs>(
      args?: SelectSubset<T, InvitationLinkDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more InvitationLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvitationLinks
     * const invitationLink = await prisma.invitationLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends InvitationLinkUpdateManyArgs>(
      args: SelectSubset<T, InvitationLinkUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one InvitationLink.
     * @param {InvitationLinkUpsertArgs} args - Arguments to update or create a InvitationLink.
     * @example
     * // Update or create a InvitationLink
     * const invitationLink = await prisma.invitationLink.upsert({
     *   create: {
     *     // ... data to create a InvitationLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvitationLink we want to update
     *   }
     * })
     */
    upsert<T extends InvitationLinkUpsertArgs>(
      args: SelectSubset<T, InvitationLinkUpsertArgs<ExtArgs>>,
    ): Prisma__InvitationLinkClient<
      $Result.GetResult<Prisma.$InvitationLinkPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of InvitationLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkCountArgs} args - Arguments to filter InvitationLinks to count.
     * @example
     * // Count the number of InvitationLinks
     * const count = await prisma.invitationLink.count({
     *   where: {
     *     // ... the filter for the InvitationLinks we want to count
     *   }
     * })
     **/
    count<T extends InvitationLinkCountArgs>(
      args?: Subset<T, InvitationLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], InvitationLinkCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a InvitationLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends InvitationLinkAggregateArgs>(
      args: Subset<T, InvitationLinkAggregateArgs>,
    ): Prisma.PrismaPromise<GetInvitationLinkAggregateType<T>>;

    /**
     * Group by InvitationLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends InvitationLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationLinkGroupByArgs["orderBy"] }
        : { orderBy?: InvitationLinkGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, InvitationLinkGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetInvitationLinkGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the InvitationLink model
     */
    readonly fields: InvitationLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvitationLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationLinkClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the InvitationLink model
   */
  interface InvitationLinkFieldRefs {
    readonly id: FieldRef<"InvitationLink", "String">;
    readonly code: FieldRef<"InvitationLink", "String">;
    readonly businessId: FieldRef<"InvitationLink", "String">;
    readonly createdAt: FieldRef<"InvitationLink", "DateTime">;
  }

  // Custom InputTypes
  /**
   * InvitationLink findUnique
   */
  export type InvitationLinkFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * Filter, which InvitationLink to fetch.
     */
    where: InvitationLinkWhereUniqueInput;
  };

  /**
   * InvitationLink findUniqueOrThrow
   */
  export type InvitationLinkFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * Filter, which InvitationLink to fetch.
     */
    where: InvitationLinkWhereUniqueInput;
  };

  /**
   * InvitationLink findFirst
   */
  export type InvitationLinkFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * Filter, which InvitationLink to fetch.
     */
    where?: InvitationLinkWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of InvitationLinks to fetch.
     */
    orderBy?:
      | InvitationLinkOrderByWithRelationInput
      | InvitationLinkOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for InvitationLinks.
     */
    cursor?: InvitationLinkWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` InvitationLinks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` InvitationLinks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of InvitationLinks.
     */
    distinct?: InvitationLinkScalarFieldEnum | InvitationLinkScalarFieldEnum[];
  };

  /**
   * InvitationLink findFirstOrThrow
   */
  export type InvitationLinkFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * Filter, which InvitationLink to fetch.
     */
    where?: InvitationLinkWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of InvitationLinks to fetch.
     */
    orderBy?:
      | InvitationLinkOrderByWithRelationInput
      | InvitationLinkOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for InvitationLinks.
     */
    cursor?: InvitationLinkWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` InvitationLinks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` InvitationLinks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of InvitationLinks.
     */
    distinct?: InvitationLinkScalarFieldEnum | InvitationLinkScalarFieldEnum[];
  };

  /**
   * InvitationLink findMany
   */
  export type InvitationLinkFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * Filter, which InvitationLinks to fetch.
     */
    where?: InvitationLinkWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of InvitationLinks to fetch.
     */
    orderBy?:
      | InvitationLinkOrderByWithRelationInput
      | InvitationLinkOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing InvitationLinks.
     */
    cursor?: InvitationLinkWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` InvitationLinks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` InvitationLinks.
     */
    skip?: number;
    distinct?: InvitationLinkScalarFieldEnum | InvitationLinkScalarFieldEnum[];
  };

  /**
   * InvitationLink create
   */
  export type InvitationLinkCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * The data needed to create a InvitationLink.
     */
    data: XOR<InvitationLinkCreateInput, InvitationLinkUncheckedCreateInput>;
  };

  /**
   * InvitationLink createMany
   */
  export type InvitationLinkCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many InvitationLinks.
     */
    data: InvitationLinkCreateManyInput | InvitationLinkCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * InvitationLink createManyAndReturn
   */
  export type InvitationLinkCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many InvitationLinks.
     */
    data: InvitationLinkCreateManyInput | InvitationLinkCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * InvitationLink update
   */
  export type InvitationLinkUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * The data needed to update a InvitationLink.
     */
    data: XOR<InvitationLinkUpdateInput, InvitationLinkUncheckedUpdateInput>;
    /**
     * Choose, which InvitationLink to update.
     */
    where: InvitationLinkWhereUniqueInput;
  };

  /**
   * InvitationLink updateMany
   */
  export type InvitationLinkUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update InvitationLinks.
     */
    data: XOR<
      InvitationLinkUpdateManyMutationInput,
      InvitationLinkUncheckedUpdateManyInput
    >;
    /**
     * Filter which InvitationLinks to update
     */
    where?: InvitationLinkWhereInput;
  };

  /**
   * InvitationLink upsert
   */
  export type InvitationLinkUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * The filter to search for the InvitationLink to update in case it exists.
     */
    where: InvitationLinkWhereUniqueInput;
    /**
     * In case the InvitationLink found by the `where` argument doesn't exist, create a new InvitationLink with this data.
     */
    create: XOR<InvitationLinkCreateInput, InvitationLinkUncheckedCreateInput>;
    /**
     * In case the InvitationLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationLinkUpdateInput, InvitationLinkUncheckedUpdateInput>;
  };

  /**
   * InvitationLink delete
   */
  export type InvitationLinkDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
    /**
     * Filter which InvitationLink to delete.
     */
    where: InvitationLinkWhereUniqueInput;
  };

  /**
   * InvitationLink deleteMany
   */
  export type InvitationLinkDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which InvitationLinks to delete
     */
    where?: InvitationLinkWhereInput;
  };

  /**
   * InvitationLink without action
   */
  export type InvitationLinkDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the InvitationLink
     */
    select?: InvitationLinkSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationLinkInclude<ExtArgs> | null;
  };

  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null;
    _avg: OrderAvgAggregateOutputType | null;
    _sum: OrderSumAggregateOutputType | null;
    _min: OrderMinAggregateOutputType | null;
    _max: OrderMaxAggregateOutputType | null;
  };

  export type OrderAvgAggregateOutputType = {
    shipping: number | null;
    total: number | null;
    position: number | null;
  };

  export type OrderSumAggregateOutputType = {
    shipping: number | null;
    total: number | null;
    position: number | null;
  };

  export type OrderMinAggregateOutputType = {
    id: string | null;
    userId: string | null;
    shipping: number | null;
    hasShipping: boolean | null;
    total: number | null;
    status: $Enums.OrderStatus | null;
    sentAt: Date | null;
    position: number | null;
    businessId: string | null;
    identifier: string | null;
  };

  export type OrderMaxAggregateOutputType = {
    id: string | null;
    userId: string | null;
    shipping: number | null;
    hasShipping: boolean | null;
    total: number | null;
    status: $Enums.OrderStatus | null;
    sentAt: Date | null;
    position: number | null;
    businessId: string | null;
    identifier: string | null;
  };

  export type OrderCountAggregateOutputType = {
    id: number;
    userId: number;
    productsDetails: number;
    shipping: number;
    hasShipping: number;
    total: number;
    status: number;
    sentAt: number;
    position: number;
    businessId: number;
    identifier: number;
    _all: number;
  };

  export type OrderAvgAggregateInputType = {
    shipping?: true;
    total?: true;
    position?: true;
  };

  export type OrderSumAggregateInputType = {
    shipping?: true;
    total?: true;
    position?: true;
  };

  export type OrderMinAggregateInputType = {
    id?: true;
    userId?: true;
    shipping?: true;
    hasShipping?: true;
    total?: true;
    status?: true;
    sentAt?: true;
    position?: true;
    businessId?: true;
    identifier?: true;
  };

  export type OrderMaxAggregateInputType = {
    id?: true;
    userId?: true;
    shipping?: true;
    hasShipping?: true;
    total?: true;
    status?: true;
    sentAt?: true;
    position?: true;
    businessId?: true;
    identifier?: true;
  };

  export type OrderCountAggregateInputType = {
    id?: true;
    userId?: true;
    productsDetails?: true;
    shipping?: true;
    hasShipping?: true;
    total?: true;
    status?: true;
    sentAt?: true;
    position?: true;
    businessId?: true;
    identifier?: true;
    _all?: true;
  };

  export type OrderAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Orders.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Orders
     **/
    _count?: true | OrderCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: OrderAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: OrderSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: OrderMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: OrderMaxAggregateInputType;
  };

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
    [P in keyof T & keyof AggregateOrder]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>;
  };

  export type OrderGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderWhereInput;
    orderBy?:
      | OrderOrderByWithAggregationInput
      | OrderOrderByWithAggregationInput[];
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum;
    having?: OrderScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: OrderCountAggregateInputType | true;
    _avg?: OrderAvgAggregateInputType;
    _sum?: OrderSumAggregateInputType;
    _min?: OrderMinAggregateInputType;
    _max?: OrderMaxAggregateInputType;
  };

  export type OrderGroupByOutputType = {
    id: string;
    userId: string | null;
    productsDetails: JsonValue;
    shipping: number;
    hasShipping: boolean;
    total: number;
    status: $Enums.OrderStatus;
    sentAt: Date | null;
    position: number | null;
    businessId: string | null;
    identifier: string | null;
    _count: OrderCountAggregateOutputType | null;
    _avg: OrderAvgAggregateOutputType | null;
    _sum: OrderSumAggregateOutputType | null;
    _min: OrderMinAggregateOutputType | null;
    _max: OrderMaxAggregateOutputType | null;
  };

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<OrderGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof OrderGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>;
        }
      >
    >;

  export type OrderSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      productsDetails?: boolean;
      shipping?: boolean;
      hasShipping?: boolean;
      total?: boolean;
      status?: boolean;
      sentAt?: boolean;
      position?: boolean;
      businessId?: boolean;
      identifier?: boolean;
      user?: boolean | Order$userArgs<ExtArgs>;
      items?: boolean | Order$itemsArgs<ExtArgs>;
      business?: boolean | Order$businessArgs<ExtArgs>;
      orderAddress?: boolean | Order$orderAddressArgs<ExtArgs>;
      _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["order"]
  >;

  export type OrderSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      productsDetails?: boolean;
      shipping?: boolean;
      hasShipping?: boolean;
      total?: boolean;
      status?: boolean;
      sentAt?: boolean;
      position?: boolean;
      businessId?: boolean;
      identifier?: boolean;
      user?: boolean | Order$userArgs<ExtArgs>;
      business?: boolean | Order$businessArgs<ExtArgs>;
    },
    ExtArgs["result"]["order"]
  >;

  export type OrderSelectScalar = {
    id?: boolean;
    userId?: boolean;
    productsDetails?: boolean;
    shipping?: boolean;
    hasShipping?: boolean;
    total?: boolean;
    status?: boolean;
    sentAt?: boolean;
    position?: boolean;
    businessId?: boolean;
    identifier?: boolean;
  };

  export type OrderInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | Order$userArgs<ExtArgs>;
    items?: boolean | Order$itemsArgs<ExtArgs>;
    business?: boolean | Order$businessArgs<ExtArgs>;
    orderAddress?: boolean | Order$orderAddressArgs<ExtArgs>;
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type OrderIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | Order$userArgs<ExtArgs>;
    business?: boolean | Order$businessArgs<ExtArgs>;
  };

  export type $OrderPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Order";
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null;
      items: Prisma.$OrderProductPayload<ExtArgs>[];
      business: Prisma.$BusinessPayload<ExtArgs> | null;
      orderAddress: Prisma.$OrderAddressPayload<ExtArgs> | null;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        userId: string | null;
        productsDetails: Prisma.JsonValue;
        shipping: number;
        hasShipping: boolean;
        total: number;
        status: $Enums.OrderStatus;
        sentAt: Date | null;
        position: number | null;
        businessId: string | null;
        identifier: string | null;
      },
      ExtArgs["result"]["order"]
    >;
    composites: {};
  };

  type OrderGetPayload<
    S extends boolean | null | undefined | OrderDefaultArgs,
  > = $Result.GetResult<Prisma.$OrderPayload, S>;

  type OrderCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<OrderFindManyArgs, "select" | "include" | "distinct"> & {
    select?: OrderCountAggregateInputType | true;
  };

  export interface OrderDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Order"];
      meta: { name: "Order" };
    };
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(
      args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     *
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     *
     */
    findMany<T extends OrderFindManyArgs>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     *
     */
    create<T extends OrderCreateArgs>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends OrderCreateManyArgs>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(
      args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn">
    >;

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     *
     */
    delete<T extends OrderDeleteArgs>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends OrderUpdateArgs>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends OrderDeleteManyArgs>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends OrderUpdateManyArgs>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
     **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], OrderCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends OrderAggregateArgs>(
      args: Subset<T, OrderAggregateArgs>,
    ): Prisma.PrismaPromise<GetOrderAggregateType<T>>;

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs["orderBy"] }
        : { orderBy?: OrderGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetOrderGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Order model
     */
    readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends Order$userArgs<ExtArgs> = {}>(
      args?: Subset<T, Order$userArgs<ExtArgs>>,
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    items<T extends Order$itemsArgs<ExtArgs> = {}>(
      args?: Subset<T, Order$itemsArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany">
      | Null
    >;
    business<T extends Order$businessArgs<ExtArgs> = {}>(
      args?: Subset<T, Order$businessArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    orderAddress<T extends Order$orderAddressArgs<ExtArgs> = {}>(
      args?: Subset<T, Order$orderAddressArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", "String">;
    readonly userId: FieldRef<"Order", "String">;
    readonly productsDetails: FieldRef<"Order", "Json">;
    readonly shipping: FieldRef<"Order", "Int">;
    readonly hasShipping: FieldRef<"Order", "Boolean">;
    readonly total: FieldRef<"Order", "Int">;
    readonly status: FieldRef<"Order", "OrderStatus">;
    readonly sentAt: FieldRef<"Order", "DateTime">;
    readonly position: FieldRef<"Order", "Int">;
    readonly businessId: FieldRef<"Order", "String">;
    readonly identifier: FieldRef<"Order", "String">;
  }

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput;
  };

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput;
  };

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Orders.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[];
  };

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Orders.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[];
  };

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Orders.
     */
    skip?: number;
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[];
  };

  /**
   * Order create
   */
  export type OrderCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>;
  };

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Order update
   */
  export type OrderUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>;
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput;
  };

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>;
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput;
  };

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput;
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>;
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>;
  };

  /**
   * Order delete
   */
  export type OrderDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput;
  };

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput;
  };

  /**
   * Order.user
   */
  export type Order$userArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    where?: UserWhereInput;
  };

  /**
   * Order.items
   */
  export type Order$itemsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    where?: OrderProductWhereInput;
    orderBy?:
      | OrderProductOrderByWithRelationInput
      | OrderProductOrderByWithRelationInput[];
    cursor?: OrderProductWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[];
  };

  /**
   * Order.business
   */
  export type Order$businessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    where?: BusinessWhereInput;
  };

  /**
   * Order.orderAddress
   */
  export type Order$orderAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    where?: OrderAddressWhereInput;
  };

  /**
   * Order without action
   */
  export type OrderDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null;
  };

  /**
   * Model OrderProduct
   */

  export type AggregateOrderProduct = {
    _count: OrderProductCountAggregateOutputType | null;
    _avg: OrderProductAvgAggregateOutputType | null;
    _sum: OrderProductSumAggregateOutputType | null;
    _min: OrderProductMinAggregateOutputType | null;
    _max: OrderProductMaxAggregateOutputType | null;
  };

  export type OrderProductAvgAggregateOutputType = {
    price: number | null;
    position: number | null;
    quantity: number | null;
  };

  export type OrderProductSumAggregateOutputType = {
    price: number | null;
    position: number | null;
    quantity: number | null;
  };

  export type OrderProductMinAggregateOutputType = {
    productId: string | null;
    orderId: string | null;
    price: number | null;
    position: number | null;
    quantity: number | null;
  };

  export type OrderProductMaxAggregateOutputType = {
    productId: string | null;
    orderId: string | null;
    price: number | null;
    position: number | null;
    quantity: number | null;
  };

  export type OrderProductCountAggregateOutputType = {
    productId: number;
    orderId: number;
    price: number;
    position: number;
    quantity: number;
    _all: number;
  };

  export type OrderProductAvgAggregateInputType = {
    price?: true;
    position?: true;
    quantity?: true;
  };

  export type OrderProductSumAggregateInputType = {
    price?: true;
    position?: true;
    quantity?: true;
  };

  export type OrderProductMinAggregateInputType = {
    productId?: true;
    orderId?: true;
    price?: true;
    position?: true;
    quantity?: true;
  };

  export type OrderProductMaxAggregateInputType = {
    productId?: true;
    orderId?: true;
    price?: true;
    position?: true;
    quantity?: true;
  };

  export type OrderProductCountAggregateInputType = {
    productId?: true;
    orderId?: true;
    price?: true;
    position?: true;
    quantity?: true;
    _all?: true;
  };

  export type OrderProductAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which OrderProduct to aggregate.
     */
    where?: OrderProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?:
      | OrderProductOrderByWithRelationInput
      | OrderProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: OrderProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderProducts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned OrderProducts
     **/
    _count?: true | OrderProductCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: OrderProductAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: OrderProductSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: OrderProductMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: OrderProductMaxAggregateInputType;
  };

  export type GetOrderProductAggregateType<
    T extends OrderProductAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateOrderProduct]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderProduct[P]>
      : GetScalarType<T[P], AggregateOrderProduct[P]>;
  };

  export type OrderProductGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderProductWhereInput;
    orderBy?:
      | OrderProductOrderByWithAggregationInput
      | OrderProductOrderByWithAggregationInput[];
    by: OrderProductScalarFieldEnum[] | OrderProductScalarFieldEnum;
    having?: OrderProductScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: OrderProductCountAggregateInputType | true;
    _avg?: OrderProductAvgAggregateInputType;
    _sum?: OrderProductSumAggregateInputType;
    _min?: OrderProductMinAggregateInputType;
    _max?: OrderProductMaxAggregateInputType;
  };

  export type OrderProductGroupByOutputType = {
    productId: string;
    orderId: string;
    price: number;
    position: number;
    quantity: number;
    _count: OrderProductCountAggregateOutputType | null;
    _avg: OrderProductAvgAggregateOutputType | null;
    _sum: OrderProductSumAggregateOutputType | null;
    _min: OrderProductMinAggregateOutputType | null;
    _max: OrderProductMaxAggregateOutputType | null;
  };

  type GetOrderProductGroupByPayload<T extends OrderProductGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<OrderProductGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof OrderProductGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderProductGroupByOutputType[P]>
            : GetScalarType<T[P], OrderProductGroupByOutputType[P]>;
        }
      >
    >;

  export type OrderProductSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      productId?: boolean;
      orderId?: boolean;
      price?: boolean;
      position?: boolean;
      quantity?: boolean;
      product?: boolean | ProductDefaultArgs<ExtArgs>;
      order?: boolean | OrderDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["orderProduct"]
  >;

  export type OrderProductSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      productId?: boolean;
      orderId?: boolean;
      price?: boolean;
      position?: boolean;
      quantity?: boolean;
      product?: boolean | ProductDefaultArgs<ExtArgs>;
      order?: boolean | OrderDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["orderProduct"]
  >;

  export type OrderProductSelectScalar = {
    productId?: boolean;
    orderId?: boolean;
    price?: boolean;
    position?: boolean;
    quantity?: boolean;
  };

  export type OrderProductInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    product?: boolean | ProductDefaultArgs<ExtArgs>;
    order?: boolean | OrderDefaultArgs<ExtArgs>;
  };
  export type OrderProductIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    product?: boolean | ProductDefaultArgs<ExtArgs>;
    order?: boolean | OrderDefaultArgs<ExtArgs>;
  };

  export type $OrderProductPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "OrderProduct";
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>;
      order: Prisma.$OrderPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        productId: string;
        orderId: string;
        price: number;
        position: number;
        quantity: number;
      },
      ExtArgs["result"]["orderProduct"]
    >;
    composites: {};
  };

  type OrderProductGetPayload<
    S extends boolean | null | undefined | OrderProductDefaultArgs,
  > = $Result.GetResult<Prisma.$OrderProductPayload, S>;

  type OrderProductCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<OrderProductFindManyArgs, "select" | "include" | "distinct"> & {
    select?: OrderProductCountAggregateInputType | true;
  };

  export interface OrderProductDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["OrderProduct"];
      meta: { name: "OrderProduct" };
    };
    /**
     * Find zero or one OrderProduct that matches the filter.
     * @param {OrderProductFindUniqueArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderProductFindUniqueArgs>(
      args: SelectSubset<T, OrderProductFindUniqueArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<
        Prisma.$OrderProductPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one OrderProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderProductFindUniqueOrThrowArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderProductFindUniqueOrThrowArgs>(
      args: SelectSubset<T, OrderProductFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<
        Prisma.$OrderProductPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first OrderProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductFindFirstArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderProductFindFirstArgs>(
      args?: SelectSubset<T, OrderProductFindFirstArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<
        Prisma.$OrderProductPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first OrderProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductFindFirstOrThrowArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrderProductFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<
        Prisma.$OrderProductPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderProducts
     * const orderProducts = await prisma.orderProduct.findMany()
     *
     * // Get first 10 OrderProducts
     * const orderProducts = await prisma.orderProduct.findMany({ take: 10 })
     *
     * // Only select the `productId`
     * const orderProductWithProductIdOnly = await prisma.orderProduct.findMany({ select: { productId: true } })
     *
     */
    findMany<T extends OrderProductFindManyArgs>(
      args?: SelectSubset<T, OrderProductFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a OrderProduct.
     * @param {OrderProductCreateArgs} args - Arguments to create a OrderProduct.
     * @example
     * // Create one OrderProduct
     * const OrderProduct = await prisma.orderProduct.create({
     *   data: {
     *     // ... data to create a OrderProduct
     *   }
     * })
     *
     */
    create<T extends OrderProductCreateArgs>(
      args: SelectSubset<T, OrderProductCreateArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many OrderProducts.
     * @param {OrderProductCreateManyArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProduct = await prisma.orderProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends OrderProductCreateManyArgs>(
      args?: SelectSubset<T, OrderProductCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many OrderProducts and returns the data saved in the database.
     * @param {OrderProductCreateManyAndReturnArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProduct = await prisma.orderProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many OrderProducts and only return the `productId`
     * const orderProductWithProductIdOnly = await prisma.orderProduct.createManyAndReturn({
     *   select: { productId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends OrderProductCreateManyAndReturnArgs>(
      args?: SelectSubset<T, OrderProductCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$OrderProductPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a OrderProduct.
     * @param {OrderProductDeleteArgs} args - Arguments to delete one OrderProduct.
     * @example
     * // Delete one OrderProduct
     * const OrderProduct = await prisma.orderProduct.delete({
     *   where: {
     *     // ... filter to delete one OrderProduct
     *   }
     * })
     *
     */
    delete<T extends OrderProductDeleteArgs>(
      args: SelectSubset<T, OrderProductDeleteArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one OrderProduct.
     * @param {OrderProductUpdateArgs} args - Arguments to update one OrderProduct.
     * @example
     * // Update one OrderProduct
     * const orderProduct = await prisma.orderProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends OrderProductUpdateArgs>(
      args: SelectSubset<T, OrderProductUpdateArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more OrderProducts.
     * @param {OrderProductDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
     * @example
     * // Delete a few OrderProducts
     * const { count } = await prisma.orderProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends OrderProductDeleteManyArgs>(
      args?: SelectSubset<T, OrderProductDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderProducts
     * const orderProduct = await prisma.orderProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends OrderProductUpdateManyArgs>(
      args: SelectSubset<T, OrderProductUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one OrderProduct.
     * @param {OrderProductUpsertArgs} args - Arguments to update or create a OrderProduct.
     * @example
     * // Update or create a OrderProduct
     * const orderProduct = await prisma.orderProduct.upsert({
     *   create: {
     *     // ... data to create a OrderProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderProduct we want to update
     *   }
     * })
     */
    upsert<T extends OrderProductUpsertArgs>(
      args: SelectSubset<T, OrderProductUpsertArgs<ExtArgs>>,
    ): Prisma__OrderProductClient<
      $Result.GetResult<Prisma.$OrderProductPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductCountArgs} args - Arguments to filter OrderProducts to count.
     * @example
     * // Count the number of OrderProducts
     * const count = await prisma.orderProduct.count({
     *   where: {
     *     // ... the filter for the OrderProducts we want to count
     *   }
     * })
     **/
    count<T extends OrderProductCountArgs>(
      args?: Subset<T, OrderProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], OrderProductCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a OrderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends OrderProductAggregateArgs>(
      args: Subset<T, OrderProductAggregateArgs>,
    ): Prisma.PrismaPromise<GetOrderProductAggregateType<T>>;

    /**
     * Group by OrderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends OrderProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderProductGroupByArgs["orderBy"] }
        : { orderBy?: OrderProductGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, OrderProductGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetOrderProductGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the OrderProduct model
     */
    readonly fields: OrderProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderProductClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, ProductDefaultArgs<ExtArgs>>,
    ): Prisma__ProductClient<
      | $Result.GetResult<
          Prisma.$ProductPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, OrderDefaultArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      | $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the OrderProduct model
   */
  interface OrderProductFieldRefs {
    readonly productId: FieldRef<"OrderProduct", "String">;
    readonly orderId: FieldRef<"OrderProduct", "String">;
    readonly price: FieldRef<"OrderProduct", "Int">;
    readonly position: FieldRef<"OrderProduct", "Int">;
    readonly quantity: FieldRef<"OrderProduct", "Int">;
  }

  // Custom InputTypes
  /**
   * OrderProduct findUnique
   */
  export type OrderProductFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * Filter, which OrderProduct to fetch.
     */
    where: OrderProductWhereUniqueInput;
  };

  /**
   * OrderProduct findUniqueOrThrow
   */
  export type OrderProductFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * Filter, which OrderProduct to fetch.
     */
    where: OrderProductWhereUniqueInput;
  };

  /**
   * OrderProduct findFirst
   */
  export type OrderProductFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * Filter, which OrderProduct to fetch.
     */
    where?: OrderProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?:
      | OrderProductOrderByWithRelationInput
      | OrderProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for OrderProducts.
     */
    cursor?: OrderProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderProducts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of OrderProducts.
     */
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[];
  };

  /**
   * OrderProduct findFirstOrThrow
   */
  export type OrderProductFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * Filter, which OrderProduct to fetch.
     */
    where?: OrderProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?:
      | OrderProductOrderByWithRelationInput
      | OrderProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for OrderProducts.
     */
    cursor?: OrderProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderProducts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of OrderProducts.
     */
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[];
  };

  /**
   * OrderProduct findMany
   */
  export type OrderProductFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * Filter, which OrderProducts to fetch.
     */
    where?: OrderProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?:
      | OrderProductOrderByWithRelationInput
      | OrderProductOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing OrderProducts.
     */
    cursor?: OrderProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderProducts.
     */
    skip?: number;
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[];
  };

  /**
   * OrderProduct create
   */
  export type OrderProductCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * The data needed to create a OrderProduct.
     */
    data: XOR<OrderProductCreateInput, OrderProductUncheckedCreateInput>;
  };

  /**
   * OrderProduct createMany
   */
  export type OrderProductCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many OrderProducts.
     */
    data: OrderProductCreateManyInput | OrderProductCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * OrderProduct createManyAndReturn
   */
  export type OrderProductCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many OrderProducts.
     */
    data: OrderProductCreateManyInput | OrderProductCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * OrderProduct update
   */
  export type OrderProductUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * The data needed to update a OrderProduct.
     */
    data: XOR<OrderProductUpdateInput, OrderProductUncheckedUpdateInput>;
    /**
     * Choose, which OrderProduct to update.
     */
    where: OrderProductWhereUniqueInput;
  };

  /**
   * OrderProduct updateMany
   */
  export type OrderProductUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update OrderProducts.
     */
    data: XOR<
      OrderProductUpdateManyMutationInput,
      OrderProductUncheckedUpdateManyInput
    >;
    /**
     * Filter which OrderProducts to update
     */
    where?: OrderProductWhereInput;
  };

  /**
   * OrderProduct upsert
   */
  export type OrderProductUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * The filter to search for the OrderProduct to update in case it exists.
     */
    where: OrderProductWhereUniqueInput;
    /**
     * In case the OrderProduct found by the `where` argument doesn't exist, create a new OrderProduct with this data.
     */
    create: XOR<OrderProductCreateInput, OrderProductUncheckedCreateInput>;
    /**
     * In case the OrderProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderProductUpdateInput, OrderProductUncheckedUpdateInput>;
  };

  /**
   * OrderProduct delete
   */
  export type OrderProductDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
    /**
     * Filter which OrderProduct to delete.
     */
    where: OrderProductWhereUniqueInput;
  };

  /**
   * OrderProduct deleteMany
   */
  export type OrderProductDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which OrderProducts to delete
     */
    where?: OrderProductWhereInput;
  };

  /**
   * OrderProduct without action
   */
  export type OrderProductDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderProduct
     */
    select?: OrderProductSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductInclude<ExtArgs> | null;
  };

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null;
    _avg: AccountAvgAggregateOutputType | null;
    _sum: AccountSumAggregateOutputType | null;
    _min: AccountMinAggregateOutputType | null;
    _max: AccountMaxAggregateOutputType | null;
  };

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null;
  };

  export type AccountSumAggregateOutputType = {
    expires_at: number | null;
  };

  export type AccountMinAggregateOutputType = {
    userId: string | null;
    type: string | null;
    provider: string | null;
    providerAccountId: string | null;
    refresh_token: string | null;
    access_token: string | null;
    expires_at: number | null;
    token_type: string | null;
    scope: string | null;
    id_token: string | null;
    session_state: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type AccountMaxAggregateOutputType = {
    userId: string | null;
    type: string | null;
    provider: string | null;
    providerAccountId: string | null;
    refresh_token: string | null;
    access_token: string | null;
    expires_at: number | null;
    token_type: string | null;
    scope: string | null;
    id_token: string | null;
    session_state: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type AccountCountAggregateOutputType = {
    userId: number;
    type: number;
    provider: number;
    providerAccountId: number;
    refresh_token: number;
    access_token: number;
    expires_at: number;
    token_type: number;
    scope: number;
    id_token: number;
    session_state: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type AccountAvgAggregateInputType = {
    expires_at?: true;
  };

  export type AccountSumAggregateInputType = {
    expires_at?: true;
  };

  export type AccountMinAggregateInputType = {
    userId?: true;
    type?: true;
    provider?: true;
    providerAccountId?: true;
    refresh_token?: true;
    access_token?: true;
    expires_at?: true;
    token_type?: true;
    scope?: true;
    id_token?: true;
    session_state?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type AccountMaxAggregateInputType = {
    userId?: true;
    type?: true;
    provider?: true;
    providerAccountId?: true;
    refresh_token?: true;
    access_token?: true;
    expires_at?: true;
    token_type?: true;
    scope?: true;
    id_token?: true;
    session_state?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type AccountCountAggregateInputType = {
    userId?: true;
    type?: true;
    provider?: true;
    providerAccountId?: true;
    refresh_token?: true;
    access_token?: true;
    expires_at?: true;
    token_type?: true;
    scope?: true;
    id_token?: true;
    session_state?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type AccountAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Accounts to fetch.
     */
    orderBy?:
      | AccountOrderByWithRelationInput
      | AccountOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Accounts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Accounts
     **/
    _count?: true | AccountCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: AccountAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: AccountSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: AccountMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: AccountMaxAggregateInputType;
  };

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
    [P in keyof T & keyof AggregateAccount]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>;
  };

  export type AccountGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: AccountWhereInput;
    orderBy?:
      | AccountOrderByWithAggregationInput
      | AccountOrderByWithAggregationInput[];
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum;
    having?: AccountScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: AccountCountAggregateInputType | true;
    _avg?: AccountAvgAggregateInputType;
    _sum?: AccountSumAggregateInputType;
    _min?: AccountMinAggregateInputType;
    _max?: AccountMaxAggregateInputType;
  };

  export type AccountGroupByOutputType = {
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token: string | null;
    access_token: string | null;
    expires_at: number | null;
    token_type: string | null;
    scope: string | null;
    id_token: string | null;
    session_state: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: AccountCountAggregateOutputType | null;
    _avg: AccountAvgAggregateOutputType | null;
    _sum: AccountSumAggregateOutputType | null;
    _min: AccountMinAggregateOutputType | null;
    _max: AccountMaxAggregateOutputType | null;
  };

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<AccountGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof AccountGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>;
        }
      >
    >;

  export type AccountSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      userId?: boolean;
      type?: boolean;
      provider?: boolean;
      providerAccountId?: boolean;
      refresh_token?: boolean;
      access_token?: boolean;
      expires_at?: boolean;
      token_type?: boolean;
      scope?: boolean;
      id_token?: boolean;
      session_state?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["account"]
  >;

  export type AccountSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      userId?: boolean;
      type?: boolean;
      provider?: boolean;
      providerAccountId?: boolean;
      refresh_token?: boolean;
      access_token?: boolean;
      expires_at?: boolean;
      token_type?: boolean;
      scope?: boolean;
      id_token?: boolean;
      session_state?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["account"]
  >;

  export type AccountSelectScalar = {
    userId?: boolean;
    type?: boolean;
    provider?: boolean;
    providerAccountId?: boolean;
    refresh_token?: boolean;
    access_token?: boolean;
    expires_at?: boolean;
    token_type?: boolean;
    scope?: boolean;
    id_token?: boolean;
    session_state?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type AccountInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type AccountIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $AccountPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Account";
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        userId: string;
        type: string;
        provider: string;
        providerAccountId: string;
        refresh_token: string | null;
        access_token: string | null;
        expires_at: number | null;
        token_type: string | null;
        scope: string | null;
        id_token: string | null;
        session_state: string | null;
        createdAt: Date;
        updatedAt: Date;
      },
      ExtArgs["result"]["account"]
    >;
    composites: {};
  };

  type AccountGetPayload<
    S extends boolean | null | undefined | AccountDefaultArgs,
  > = $Result.GetResult<Prisma.$AccountPayload, S>;

  type AccountCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<AccountFindManyArgs, "select" | "include" | "distinct"> & {
    select?: AccountCountAggregateInputType | true;
  };

  export interface AccountDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Account"];
      meta: { name: "Account" };
    };
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<
        Prisma.$AccountPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<
        Prisma.$AccountPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     *
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     *
     * // Only select the `userId`
     * const accountWithUserIdOnly = await prisma.account.findMany({ select: { userId: true } })
     *
     */
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     *
     */
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Accounts and only return the `userId`
     * const accountWithUserIdOnly = await prisma.account.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(
      args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$AccountPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     *
     */
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>,
    ): Prisma__AccountClient<
      $Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
     **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], AccountCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends AccountAggregateArgs>(
      args: Subset<T, AccountAggregateArgs>,
    ): Prisma.PrismaPromise<GetAccountAggregateType<T>>;

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs["orderBy"] }
        : { orderBy?: AccountGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetAccountGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Account model
     */
    readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly userId: FieldRef<"Account", "String">;
    readonly type: FieldRef<"Account", "String">;
    readonly provider: FieldRef<"Account", "String">;
    readonly providerAccountId: FieldRef<"Account", "String">;
    readonly refresh_token: FieldRef<"Account", "String">;
    readonly access_token: FieldRef<"Account", "String">;
    readonly expires_at: FieldRef<"Account", "Int">;
    readonly token_type: FieldRef<"Account", "String">;
    readonly scope: FieldRef<"Account", "String">;
    readonly id_token: FieldRef<"Account", "String">;
    readonly session_state: FieldRef<"Account", "String">;
    readonly createdAt: FieldRef<"Account", "DateTime">;
    readonly updatedAt: FieldRef<"Account", "DateTime">;
  }

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput;
  };

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput;
  };

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Accounts to fetch.
     */
    orderBy?:
      | AccountOrderByWithRelationInput
      | AccountOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Accounts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[];
  };

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Accounts to fetch.
     */
    orderBy?:
      | AccountOrderByWithRelationInput
      | AccountOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Accounts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[];
  };

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Accounts to fetch.
     */
    orderBy?:
      | AccountOrderByWithRelationInput
      | AccountOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Accounts.
     */
    skip?: number;
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[];
  };

  /**
   * Account create
   */
  export type AccountCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>;
  };

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Account update
   */
  export type AccountUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>;
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput;
  };

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>;
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput;
  };

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput;
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>;
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>;
  };

  /**
   * Account delete
   */
  export type AccountDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput;
  };

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput;
  };

  /**
   * Account without action
   */
  export type AccountDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null;
  };

  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null;
    _min: SessionMinAggregateOutputType | null;
    _max: SessionMaxAggregateOutputType | null;
  };

  export type SessionMinAggregateOutputType = {
    sessionToken: string | null;
    userId: string | null;
    expires: Date | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type SessionMaxAggregateOutputType = {
    sessionToken: string | null;
    userId: string | null;
    expires: Date | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type SessionCountAggregateOutputType = {
    sessionToken: number;
    userId: number;
    expires: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type SessionMinAggregateInputType = {
    sessionToken?: true;
    userId?: true;
    expires?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type SessionMaxAggregateInputType = {
    sessionToken?: true;
    userId?: true;
    expires?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type SessionCountAggregateInputType = {
    sessionToken?: true;
    userId?: true;
    expires?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type SessionAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sessions to fetch.
     */
    orderBy?:
      | SessionOrderByWithRelationInput
      | SessionOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sessions.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Sessions
     **/
    _count?: true | SessionCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: SessionMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: SessionMaxAggregateInputType;
  };

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
    [P in keyof T & keyof AggregateSession]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>;
  };

  export type SessionGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: SessionWhereInput;
    orderBy?:
      | SessionOrderByWithAggregationInput
      | SessionOrderByWithAggregationInput[];
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum;
    having?: SessionScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: SessionCountAggregateInputType | true;
    _min?: SessionMinAggregateInputType;
    _max?: SessionMaxAggregateInputType;
  };

  export type SessionGroupByOutputType = {
    sessionToken: string;
    userId: string;
    expires: Date;
    createdAt: Date;
    updatedAt: Date;
    _count: SessionCountAggregateOutputType | null;
    _min: SessionMinAggregateOutputType | null;
    _max: SessionMaxAggregateOutputType | null;
  };

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<SessionGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof SessionGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>;
        }
      >
    >;

  export type SessionSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      sessionToken?: boolean;
      userId?: boolean;
      expires?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["session"]
  >;

  export type SessionSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      sessionToken?: boolean;
      userId?: boolean;
      expires?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["session"]
  >;

  export type SessionSelectScalar = {
    sessionToken?: boolean;
    userId?: boolean;
    expires?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type SessionInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type SessionIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $SessionPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Session";
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        sessionToken: string;
        userId: string;
        expires: Date;
        createdAt: Date;
        updatedAt: Date;
      },
      ExtArgs["result"]["session"]
    >;
    composites: {};
  };

  type SessionGetPayload<
    S extends boolean | null | undefined | SessionDefaultArgs,
  > = $Result.GetResult<Prisma.$SessionPayload, S>;

  type SessionCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<SessionFindManyArgs, "select" | "include" | "distinct"> & {
    select?: SessionCountAggregateInputType | true;
  };

  export interface SessionDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Session"];
      meta: { name: "Session" };
    };
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<
        Prisma.$SessionPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<
        Prisma.$SessionPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     *
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     *
     * // Only select the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.findMany({ select: { sessionToken: true } })
     *
     */
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     *
     */
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Sessions and only return the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.createManyAndReturn({
     *   select: { sessionToken: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(
      args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$SessionPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     *
     */
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>,
    ): Prisma__SessionClient<
      $Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
     **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], SessionCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends SessionAggregateArgs>(
      args: Subset<T, SessionAggregateArgs>,
    ): Prisma.PrismaPromise<GetSessionAggregateType<T>>;

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs["orderBy"] }
        : { orderBy?: SessionGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetSessionGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Session model
     */
    readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly sessionToken: FieldRef<"Session", "String">;
    readonly userId: FieldRef<"Session", "String">;
    readonly expires: FieldRef<"Session", "DateTime">;
    readonly createdAt: FieldRef<"Session", "DateTime">;
    readonly updatedAt: FieldRef<"Session", "DateTime">;
  }

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput;
  };

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput;
  };

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sessions to fetch.
     */
    orderBy?:
      | SessionOrderByWithRelationInput
      | SessionOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sessions.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[];
  };

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sessions to fetch.
     */
    orderBy?:
      | SessionOrderByWithRelationInput
      | SessionOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sessions.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[];
  };

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sessions to fetch.
     */
    orderBy?:
      | SessionOrderByWithRelationInput
      | SessionOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sessions.
     */
    skip?: number;
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[];
  };

  /**
   * Session create
   */
  export type SessionCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>;
  };

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Session update
   */
  export type SessionUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>;
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput;
  };

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>;
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput;
  };

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput;
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>;
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>;
  };

  /**
   * Session delete
   */
  export type SessionDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput;
  };

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput;
  };

  /**
   * Session without action
   */
  export type SessionDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null;
  };

  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null;
    _min: VerificationTokenMinAggregateOutputType | null;
    _max: VerificationTokenMaxAggregateOutputType | null;
  };

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null;
    token: string | null;
    expires: Date | null;
  };

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null;
    token: string | null;
    expires: Date | null;
  };

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number;
    token: number;
    expires: number;
    _all: number;
  };

  export type VerificationTokenMinAggregateInputType = {
    identifier?: true;
    token?: true;
    expires?: true;
  };

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true;
    token?: true;
    expires?: true;
  };

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true;
    token?: true;
    expires?: true;
    _all?: true;
  };

  export type VerificationTokenAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?:
      | VerificationTokenOrderByWithRelationInput
      | VerificationTokenOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VerificationTokens.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned VerificationTokens
     **/
    _count?: true | VerificationTokenCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: VerificationTokenMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: VerificationTokenMaxAggregateInputType;
  };

  export type GetVerificationTokenAggregateType<
    T extends VerificationTokenAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateVerificationToken]: P extends
      | "_count"
      | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>;
  };

  export type VerificationTokenGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: VerificationTokenWhereInput;
    orderBy?:
      | VerificationTokenOrderByWithAggregationInput
      | VerificationTokenOrderByWithAggregationInput[];
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum;
    having?: VerificationTokenScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: VerificationTokenCountAggregateInputType | true;
    _min?: VerificationTokenMinAggregateInputType;
    _max?: VerificationTokenMaxAggregateInputType;
  };

  export type VerificationTokenGroupByOutputType = {
    identifier: string;
    token: string;
    expires: Date;
    _count: VerificationTokenCountAggregateOutputType | null;
    _min: VerificationTokenMinAggregateOutputType | null;
    _max: VerificationTokenMaxAggregateOutputType | null;
  };

  type GetVerificationTokenGroupByPayload<
    T extends VerificationTokenGroupByArgs,
  > = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof VerificationTokenGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
          : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>;
      }
    >
  >;

  export type VerificationTokenSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      identifier?: boolean;
      token?: boolean;
      expires?: boolean;
    },
    ExtArgs["result"]["verificationToken"]
  >;

  export type VerificationTokenSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      identifier?: boolean;
      token?: boolean;
      expires?: boolean;
    },
    ExtArgs["result"]["verificationToken"]
  >;

  export type VerificationTokenSelectScalar = {
    identifier?: boolean;
    token?: boolean;
    expires?: boolean;
  };

  export type $VerificationTokenPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "VerificationToken";
    objects: {};
    scalars: $Extensions.GetPayloadResult<
      {
        identifier: string;
        token: string;
        expires: Date;
      },
      ExtArgs["result"]["verificationToken"]
    >;
    composites: {};
  };

  type VerificationTokenGetPayload<
    S extends boolean | null | undefined | VerificationTokenDefaultArgs,
  > = $Result.GetResult<Prisma.$VerificationTokenPayload, S>;

  type VerificationTokenCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<VerificationTokenFindManyArgs, "select" | "include" | "distinct"> & {
    select?: VerificationTokenCountAggregateInputType | true;
  };

  export interface VerificationTokenDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["VerificationToken"];
      meta: { name: "VerificationToken" };
    };
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<
        Prisma.$VerificationTokenPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(
      args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<
        Prisma.$VerificationTokenPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<
        Prisma.$VerificationTokenPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<
        Prisma.$VerificationTokenPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     *
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     *
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     *
     */
    findMany<T extends VerificationTokenFindManyArgs>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$VerificationTokenPayload<ExtArgs>,
        T,
        "findMany"
      >
    >;

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     *
     */
    create<T extends VerificationTokenCreateArgs>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends VerificationTokenCreateManyArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$VerificationTokenPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     *
     */
    delete<T extends VerificationTokenDeleteArgs>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends VerificationTokenUpdateArgs>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>,
    ): Prisma__VerificationTokenClient<
      $Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
     **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<
              T["select"],
              VerificationTokenCountAggregateOutputType
            >
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends VerificationTokenAggregateArgs>(
      args: Subset<T, VerificationTokenAggregateArgs>,
    ): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>;

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs["orderBy"] }
        : { orderBy?: VerificationTokenGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetVerificationTokenGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the VerificationToken model
     */
    readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", "String">;
    readonly token: FieldRef<"VerificationToken", "String">;
    readonly expires: FieldRef<"VerificationToken", "DateTime">;
  }

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput;
  };

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput;
  };

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?:
      | VerificationTokenOrderByWithRelationInput
      | VerificationTokenOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VerificationTokens.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?:
      | VerificationTokenScalarFieldEnum
      | VerificationTokenScalarFieldEnum[];
  };

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?:
      | VerificationTokenOrderByWithRelationInput
      | VerificationTokenOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VerificationTokens.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?:
      | VerificationTokenScalarFieldEnum
      | VerificationTokenScalarFieldEnum[];
  };

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?:
      | VerificationTokenOrderByWithRelationInput
      | VerificationTokenOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VerificationTokens.
     */
    skip?: number;
    distinct?:
      | VerificationTokenScalarFieldEnum
      | VerificationTokenScalarFieldEnum[];
  };

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<
      VerificationTokenCreateInput,
      VerificationTokenUncheckedCreateInput
    >;
  };

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<
      VerificationTokenUpdateInput,
      VerificationTokenUncheckedUpdateInput
    >;
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput;
  };

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<
      VerificationTokenUpdateManyMutationInput,
      VerificationTokenUncheckedUpdateManyInput
    >;
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput;
  };

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput;
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<
      VerificationTokenCreateInput,
      VerificationTokenUncheckedCreateInput
    >;
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<
      VerificationTokenUpdateInput,
      VerificationTokenUncheckedUpdateInput
    >;
  };

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput;
  };

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput;
  };

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null;
  };

  /**
   * Model Authenticator
   */

  export type AggregateAuthenticator = {
    _count: AuthenticatorCountAggregateOutputType | null;
    _avg: AuthenticatorAvgAggregateOutputType | null;
    _sum: AuthenticatorSumAggregateOutputType | null;
    _min: AuthenticatorMinAggregateOutputType | null;
    _max: AuthenticatorMaxAggregateOutputType | null;
  };

  export type AuthenticatorAvgAggregateOutputType = {
    counter: number | null;
  };

  export type AuthenticatorSumAggregateOutputType = {
    counter: number | null;
  };

  export type AuthenticatorMinAggregateOutputType = {
    credentialID: string | null;
    userId: string | null;
    providerAccountId: string | null;
    credentialPublicKey: string | null;
    counter: number | null;
    credentialDeviceType: string | null;
    credentialBackedUp: boolean | null;
    transports: string | null;
  };

  export type AuthenticatorMaxAggregateOutputType = {
    credentialID: string | null;
    userId: string | null;
    providerAccountId: string | null;
    credentialPublicKey: string | null;
    counter: number | null;
    credentialDeviceType: string | null;
    credentialBackedUp: boolean | null;
    transports: string | null;
  };

  export type AuthenticatorCountAggregateOutputType = {
    credentialID: number;
    userId: number;
    providerAccountId: number;
    credentialPublicKey: number;
    counter: number;
    credentialDeviceType: number;
    credentialBackedUp: number;
    transports: number;
    _all: number;
  };

  export type AuthenticatorAvgAggregateInputType = {
    counter?: true;
  };

  export type AuthenticatorSumAggregateInputType = {
    counter?: true;
  };

  export type AuthenticatorMinAggregateInputType = {
    credentialID?: true;
    userId?: true;
    providerAccountId?: true;
    credentialPublicKey?: true;
    counter?: true;
    credentialDeviceType?: true;
    credentialBackedUp?: true;
    transports?: true;
  };

  export type AuthenticatorMaxAggregateInputType = {
    credentialID?: true;
    userId?: true;
    providerAccountId?: true;
    credentialPublicKey?: true;
    counter?: true;
    credentialDeviceType?: true;
    credentialBackedUp?: true;
    transports?: true;
  };

  export type AuthenticatorCountAggregateInputType = {
    credentialID?: true;
    userId?: true;
    providerAccountId?: true;
    credentialPublicKey?: true;
    counter?: true;
    credentialDeviceType?: true;
    credentialBackedUp?: true;
    transports?: true;
    _all?: true;
  };

  export type AuthenticatorAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Authenticator to aggregate.
     */
    where?: AuthenticatorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Authenticators to fetch.
     */
    orderBy?:
      | AuthenticatorOrderByWithRelationInput
      | AuthenticatorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: AuthenticatorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Authenticators.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Authenticators
     **/
    _count?: true | AuthenticatorCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: AuthenticatorAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: AuthenticatorSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: AuthenticatorMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: AuthenticatorMaxAggregateInputType;
  };

  export type GetAuthenticatorAggregateType<
    T extends AuthenticatorAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateAuthenticator]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthenticator[P]>
      : GetScalarType<T[P], AggregateAuthenticator[P]>;
  };

  export type AuthenticatorGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: AuthenticatorWhereInput;
    orderBy?:
      | AuthenticatorOrderByWithAggregationInput
      | AuthenticatorOrderByWithAggregationInput[];
    by: AuthenticatorScalarFieldEnum[] | AuthenticatorScalarFieldEnum;
    having?: AuthenticatorScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: AuthenticatorCountAggregateInputType | true;
    _avg?: AuthenticatorAvgAggregateInputType;
    _sum?: AuthenticatorSumAggregateInputType;
    _min?: AuthenticatorMinAggregateInputType;
    _max?: AuthenticatorMaxAggregateInputType;
  };

  export type AuthenticatorGroupByOutputType = {
    credentialID: string;
    userId: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports: string | null;
    _count: AuthenticatorCountAggregateOutputType | null;
    _avg: AuthenticatorAvgAggregateOutputType | null;
    _sum: AuthenticatorSumAggregateOutputType | null;
    _min: AuthenticatorMinAggregateOutputType | null;
    _max: AuthenticatorMaxAggregateOutputType | null;
  };

  type GetAuthenticatorGroupByPayload<T extends AuthenticatorGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<AuthenticatorGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof AuthenticatorGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>;
        }
      >
    >;

  export type AuthenticatorSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      credentialID?: boolean;
      userId?: boolean;
      providerAccountId?: boolean;
      credentialPublicKey?: boolean;
      counter?: boolean;
      credentialDeviceType?: boolean;
      credentialBackedUp?: boolean;
      transports?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["authenticator"]
  >;

  export type AuthenticatorSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      credentialID?: boolean;
      userId?: boolean;
      providerAccountId?: boolean;
      credentialPublicKey?: boolean;
      counter?: boolean;
      credentialDeviceType?: boolean;
      credentialBackedUp?: boolean;
      transports?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["authenticator"]
  >;

  export type AuthenticatorSelectScalar = {
    credentialID?: boolean;
    userId?: boolean;
    providerAccountId?: boolean;
    credentialPublicKey?: boolean;
    counter?: boolean;
    credentialDeviceType?: boolean;
    credentialBackedUp?: boolean;
    transports?: boolean;
  };

  export type AuthenticatorInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type AuthenticatorIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $AuthenticatorPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Authenticator";
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        credentialID: string;
        userId: string;
        providerAccountId: string;
        credentialPublicKey: string;
        counter: number;
        credentialDeviceType: string;
        credentialBackedUp: boolean;
        transports: string | null;
      },
      ExtArgs["result"]["authenticator"]
    >;
    composites: {};
  };

  type AuthenticatorGetPayload<
    S extends boolean | null | undefined | AuthenticatorDefaultArgs,
  > = $Result.GetResult<Prisma.$AuthenticatorPayload, S>;

  type AuthenticatorCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<AuthenticatorFindManyArgs, "select" | "include" | "distinct"> & {
    select?: AuthenticatorCountAggregateInputType | true;
  };

  export interface AuthenticatorDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Authenticator"];
      meta: { name: "Authenticator" };
    };
    /**
     * Find zero or one Authenticator that matches the filter.
     * @param {AuthenticatorFindUniqueArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthenticatorFindUniqueArgs>(
      args: SelectSubset<T, AuthenticatorFindUniqueArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<
        Prisma.$AuthenticatorPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Authenticator that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthenticatorFindUniqueOrThrowArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthenticatorFindUniqueOrThrowArgs>(
      args: SelectSubset<T, AuthenticatorFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<
        Prisma.$AuthenticatorPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Authenticator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindFirstArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthenticatorFindFirstArgs>(
      args?: SelectSubset<T, AuthenticatorFindFirstArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<
        Prisma.$AuthenticatorPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Authenticator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindFirstOrThrowArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthenticatorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AuthenticatorFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<
        Prisma.$AuthenticatorPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Authenticators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authenticators
     * const authenticators = await prisma.authenticator.findMany()
     *
     * // Get first 10 Authenticators
     * const authenticators = await prisma.authenticator.findMany({ take: 10 })
     *
     * // Only select the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.findMany({ select: { credentialID: true } })
     *
     */
    findMany<T extends AuthenticatorFindManyArgs>(
      args?: SelectSubset<T, AuthenticatorFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Authenticator.
     * @param {AuthenticatorCreateArgs} args - Arguments to create a Authenticator.
     * @example
     * // Create one Authenticator
     * const Authenticator = await prisma.authenticator.create({
     *   data: {
     *     // ... data to create a Authenticator
     *   }
     * })
     *
     */
    create<T extends AuthenticatorCreateArgs>(
      args: SelectSubset<T, AuthenticatorCreateArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Authenticators.
     * @param {AuthenticatorCreateManyArgs} args - Arguments to create many Authenticators.
     * @example
     * // Create many Authenticators
     * const authenticator = await prisma.authenticator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends AuthenticatorCreateManyArgs>(
      args?: SelectSubset<T, AuthenticatorCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Authenticators and returns the data saved in the database.
     * @param {AuthenticatorCreateManyAndReturnArgs} args - Arguments to create many Authenticators.
     * @example
     * // Create many Authenticators
     * const authenticator = await prisma.authenticator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Authenticators and only return the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.createManyAndReturn({
     *   select: { credentialID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends AuthenticatorCreateManyAndReturnArgs>(
      args?: SelectSubset<T, AuthenticatorCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$AuthenticatorPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Authenticator.
     * @param {AuthenticatorDeleteArgs} args - Arguments to delete one Authenticator.
     * @example
     * // Delete one Authenticator
     * const Authenticator = await prisma.authenticator.delete({
     *   where: {
     *     // ... filter to delete one Authenticator
     *   }
     * })
     *
     */
    delete<T extends AuthenticatorDeleteArgs>(
      args: SelectSubset<T, AuthenticatorDeleteArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Authenticator.
     * @param {AuthenticatorUpdateArgs} args - Arguments to update one Authenticator.
     * @example
     * // Update one Authenticator
     * const authenticator = await prisma.authenticator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends AuthenticatorUpdateArgs>(
      args: SelectSubset<T, AuthenticatorUpdateArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Authenticators.
     * @param {AuthenticatorDeleteManyArgs} args - Arguments to filter Authenticators to delete.
     * @example
     * // Delete a few Authenticators
     * const { count } = await prisma.authenticator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends AuthenticatorDeleteManyArgs>(
      args?: SelectSubset<T, AuthenticatorDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Authenticators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authenticators
     * const authenticator = await prisma.authenticator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends AuthenticatorUpdateManyArgs>(
      args: SelectSubset<T, AuthenticatorUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Authenticator.
     * @param {AuthenticatorUpsertArgs} args - Arguments to update or create a Authenticator.
     * @example
     * // Update or create a Authenticator
     * const authenticator = await prisma.authenticator.upsert({
     *   create: {
     *     // ... data to create a Authenticator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authenticator we want to update
     *   }
     * })
     */
    upsert<T extends AuthenticatorUpsertArgs>(
      args: SelectSubset<T, AuthenticatorUpsertArgs<ExtArgs>>,
    ): Prisma__AuthenticatorClient<
      $Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Authenticators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorCountArgs} args - Arguments to filter Authenticators to count.
     * @example
     * // Count the number of Authenticators
     * const count = await prisma.authenticator.count({
     *   where: {
     *     // ... the filter for the Authenticators we want to count
     *   }
     * })
     **/
    count<T extends AuthenticatorCountArgs>(
      args?: Subset<T, AuthenticatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], AuthenticatorCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Authenticator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends AuthenticatorAggregateArgs>(
      args: Subset<T, AuthenticatorAggregateArgs>,
    ): Prisma.PrismaPromise<GetAuthenticatorAggregateType<T>>;

    /**
     * Group by Authenticator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends AuthenticatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthenticatorGroupByArgs["orderBy"] }
        : { orderBy?: AuthenticatorGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, AuthenticatorGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetAuthenticatorGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Authenticator model
     */
    readonly fields: AuthenticatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Authenticator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthenticatorClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Authenticator model
   */
  interface AuthenticatorFieldRefs {
    readonly credentialID: FieldRef<"Authenticator", "String">;
    readonly userId: FieldRef<"Authenticator", "String">;
    readonly providerAccountId: FieldRef<"Authenticator", "String">;
    readonly credentialPublicKey: FieldRef<"Authenticator", "String">;
    readonly counter: FieldRef<"Authenticator", "Int">;
    readonly credentialDeviceType: FieldRef<"Authenticator", "String">;
    readonly credentialBackedUp: FieldRef<"Authenticator", "Boolean">;
    readonly transports: FieldRef<"Authenticator", "String">;
  }

  // Custom InputTypes
  /**
   * Authenticator findUnique
   */
  export type AuthenticatorFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * Filter, which Authenticator to fetch.
     */
    where: AuthenticatorWhereUniqueInput;
  };

  /**
   * Authenticator findUniqueOrThrow
   */
  export type AuthenticatorFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * Filter, which Authenticator to fetch.
     */
    where: AuthenticatorWhereUniqueInput;
  };

  /**
   * Authenticator findFirst
   */
  export type AuthenticatorFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * Filter, which Authenticator to fetch.
     */
    where?: AuthenticatorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Authenticators to fetch.
     */
    orderBy?:
      | AuthenticatorOrderByWithRelationInput
      | AuthenticatorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Authenticators.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Authenticators.
     */
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[];
  };

  /**
   * Authenticator findFirstOrThrow
   */
  export type AuthenticatorFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * Filter, which Authenticator to fetch.
     */
    where?: AuthenticatorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Authenticators to fetch.
     */
    orderBy?:
      | AuthenticatorOrderByWithRelationInput
      | AuthenticatorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Authenticators.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Authenticators.
     */
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[];
  };

  /**
   * Authenticator findMany
   */
  export type AuthenticatorFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * Filter, which Authenticators to fetch.
     */
    where?: AuthenticatorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Authenticators to fetch.
     */
    orderBy?:
      | AuthenticatorOrderByWithRelationInput
      | AuthenticatorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Authenticators.
     */
    skip?: number;
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[];
  };

  /**
   * Authenticator create
   */
  export type AuthenticatorCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * The data needed to create a Authenticator.
     */
    data: XOR<AuthenticatorCreateInput, AuthenticatorUncheckedCreateInput>;
  };

  /**
   * Authenticator createMany
   */
  export type AuthenticatorCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Authenticators.
     */
    data: AuthenticatorCreateManyInput | AuthenticatorCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Authenticator createManyAndReturn
   */
  export type AuthenticatorCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Authenticators.
     */
    data: AuthenticatorCreateManyInput | AuthenticatorCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Authenticator update
   */
  export type AuthenticatorUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * The data needed to update a Authenticator.
     */
    data: XOR<AuthenticatorUpdateInput, AuthenticatorUncheckedUpdateInput>;
    /**
     * Choose, which Authenticator to update.
     */
    where: AuthenticatorWhereUniqueInput;
  };

  /**
   * Authenticator updateMany
   */
  export type AuthenticatorUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Authenticators.
     */
    data: XOR<
      AuthenticatorUpdateManyMutationInput,
      AuthenticatorUncheckedUpdateManyInput
    >;
    /**
     * Filter which Authenticators to update
     */
    where?: AuthenticatorWhereInput;
  };

  /**
   * Authenticator upsert
   */
  export type AuthenticatorUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * The filter to search for the Authenticator to update in case it exists.
     */
    where: AuthenticatorWhereUniqueInput;
    /**
     * In case the Authenticator found by the `where` argument doesn't exist, create a new Authenticator with this data.
     */
    create: XOR<AuthenticatorCreateInput, AuthenticatorUncheckedCreateInput>;
    /**
     * In case the Authenticator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthenticatorUpdateInput, AuthenticatorUncheckedUpdateInput>;
  };

  /**
   * Authenticator delete
   */
  export type AuthenticatorDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
    /**
     * Filter which Authenticator to delete.
     */
    where: AuthenticatorWhereUniqueInput;
  };

  /**
   * Authenticator deleteMany
   */
  export type AuthenticatorDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Authenticators to delete
     */
    where?: AuthenticatorWhereInput;
  };

  /**
   * Authenticator without action
   */
  export type AuthenticatorDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null;
  };

  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null;
    _min: AddressMinAggregateOutputType | null;
    _max: AddressMaxAggregateOutputType | null;
  };

  export type AddressMinAggregateOutputType = {
    id: string | null;
    alias: string | null;
    name: string | null;
    address: string | null;
    city: string | null;
    state: string | null;
    reference: string | null;
    neighborhoodId: string | null;
  };

  export type AddressMaxAggregateOutputType = {
    id: string | null;
    alias: string | null;
    name: string | null;
    address: string | null;
    city: string | null;
    state: string | null;
    reference: string | null;
    neighborhoodId: string | null;
  };

  export type AddressCountAggregateOutputType = {
    id: number;
    alias: number;
    name: number;
    address: number;
    city: number;
    state: number;
    reference: number;
    neighborhoodId: number;
    _all: number;
  };

  export type AddressMinAggregateInputType = {
    id?: true;
    alias?: true;
    name?: true;
    address?: true;
    city?: true;
    state?: true;
    reference?: true;
    neighborhoodId?: true;
  };

  export type AddressMaxAggregateInputType = {
    id?: true;
    alias?: true;
    name?: true;
    address?: true;
    city?: true;
    state?: true;
    reference?: true;
    neighborhoodId?: true;
  };

  export type AddressCountAggregateInputType = {
    id?: true;
    alias?: true;
    name?: true;
    address?: true;
    city?: true;
    state?: true;
    reference?: true;
    neighborhoodId?: true;
    _all?: true;
  };

  export type AddressAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Addresses to fetch.
     */
    orderBy?:
      | AddressOrderByWithRelationInput
      | AddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Addresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Addresses
     **/
    _count?: true | AddressCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: AddressMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: AddressMaxAggregateInputType;
  };

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
    [P in keyof T & keyof AggregateAddress]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>;
  };

  export type AddressGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: AddressWhereInput;
    orderBy?:
      | AddressOrderByWithAggregationInput
      | AddressOrderByWithAggregationInput[];
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum;
    having?: AddressScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: AddressCountAggregateInputType | true;
    _min?: AddressMinAggregateInputType;
    _max?: AddressMaxAggregateInputType;
  };

  export type AddressGroupByOutputType = {
    id: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference: string | null;
    neighborhoodId: string | null;
    _count: AddressCountAggregateOutputType | null;
    _min: AddressMinAggregateOutputType | null;
    _max: AddressMaxAggregateOutputType | null;
  };

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<AddressGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof AddressGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>;
        }
      >
    >;

  export type AddressSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      alias?: boolean;
      name?: boolean;
      address?: boolean;
      city?: boolean;
      state?: boolean;
      reference?: boolean;
      neighborhoodId?: boolean;
      neighborhood?: boolean | Address$neighborhoodArgs<ExtArgs>;
      userAddress?: boolean | Address$userAddressArgs<ExtArgs>;
      orderAddress?: boolean | Address$orderAddressArgs<ExtArgs>;
    },
    ExtArgs["result"]["address"]
  >;

  export type AddressSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      alias?: boolean;
      name?: boolean;
      address?: boolean;
      city?: boolean;
      state?: boolean;
      reference?: boolean;
      neighborhoodId?: boolean;
      neighborhood?: boolean | Address$neighborhoodArgs<ExtArgs>;
    },
    ExtArgs["result"]["address"]
  >;

  export type AddressSelectScalar = {
    id?: boolean;
    alias?: boolean;
    name?: boolean;
    address?: boolean;
    city?: boolean;
    state?: boolean;
    reference?: boolean;
    neighborhoodId?: boolean;
  };

  export type AddressInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    neighborhood?: boolean | Address$neighborhoodArgs<ExtArgs>;
    userAddress?: boolean | Address$userAddressArgs<ExtArgs>;
    orderAddress?: boolean | Address$orderAddressArgs<ExtArgs>;
  };
  export type AddressIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    neighborhood?: boolean | Address$neighborhoodArgs<ExtArgs>;
  };

  export type $AddressPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Address";
    objects: {
      neighborhood: Prisma.$NeighborhoodPayload<ExtArgs> | null;
      userAddress: Prisma.$UserAddressPayload<ExtArgs> | null;
      orderAddress: Prisma.$OrderAddressPayload<ExtArgs> | null;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        alias: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        name: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        address: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        city: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        state: string;
        /**
         * @zod.optional()
         */
        reference: string | null;
        neighborhoodId: string | null;
      },
      ExtArgs["result"]["address"]
    >;
    composites: {};
  };

  type AddressGetPayload<
    S extends boolean | null | undefined | AddressDefaultArgs,
  > = $Result.GetResult<Prisma.$AddressPayload, S>;

  type AddressCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<AddressFindManyArgs, "select" | "include" | "distinct"> & {
    select?: AddressCountAggregateInputType | true;
  };

  export interface AddressDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Address"];
      meta: { name: "Address" };
    };
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<
        Prisma.$AddressPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(
      args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<
        Prisma.$AddressPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst"> | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow">,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     *
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     *
     */
    findMany<T extends AddressFindManyArgs>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     *
     */
    create<T extends AddressCreateArgs>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends AddressCreateManyArgs>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(
      args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$AddressPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     *
     */
    delete<T extends AddressDeleteArgs>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends AddressUpdateArgs>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends AddressDeleteManyArgs>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends AddressUpdateManyArgs>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
     **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], AddressCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends AddressAggregateArgs>(
      args: Subset<T, AddressAggregateArgs>,
    ): Prisma.PrismaPromise<GetAddressAggregateType<T>>;

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs["orderBy"] }
        : { orderBy?: AddressGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors,
    ): {} extends InputErrors
      ? GetAddressGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Address model
     */
    readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    neighborhood<T extends Address$neighborhoodArgs<ExtArgs> = {}>(
      args?: Subset<T, Address$neighborhoodArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<
        Prisma.$NeighborhoodPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    userAddress<T extends Address$userAddressArgs<ExtArgs> = {}>(
      args?: Subset<T, Address$userAddressArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<
        Prisma.$UserAddressPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    orderAddress<T extends Address$orderAddressArgs<ExtArgs> = {}>(
      args?: Subset<T, Address$orderAddressArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", "String">;
    readonly alias: FieldRef<"Address", "String">;
    readonly name: FieldRef<"Address", "String">;
    readonly address: FieldRef<"Address", "String">;
    readonly city: FieldRef<"Address", "String">;
    readonly state: FieldRef<"Address", "String">;
    readonly reference: FieldRef<"Address", "String">;
    readonly neighborhoodId: FieldRef<"Address", "String">;
  }

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput;
  };

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput;
  };

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Addresses to fetch.
     */
    orderBy?:
      | AddressOrderByWithRelationInput
      | AddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Addresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[];
  };

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Addresses to fetch.
     */
    orderBy?:
      | AddressOrderByWithRelationInput
      | AddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Addresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[];
  };

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Addresses to fetch.
     */
    orderBy?:
      | AddressOrderByWithRelationInput
      | AddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Addresses.
     */
    skip?: number;
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[];
  };

  /**
   * Address create
   */
  export type AddressCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>;
  };

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Address update
   */
  export type AddressUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>;
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput;
  };

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>;
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput;
  };

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput;
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>;
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>;
  };

  /**
   * Address delete
   */
  export type AddressDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput;
  };

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput;
  };

  /**
   * Address.neighborhood
   */
  export type Address$neighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    where?: NeighborhoodWhereInput;
  };

  /**
   * Address.userAddress
   */
  export type Address$userAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    where?: UserAddressWhereInput;
  };

  /**
   * Address.orderAddress
   */
  export type Address$orderAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    where?: OrderAddressWhereInput;
  };

  /**
   * Address without action
   */
  export type AddressDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
  };

  /**
   * Model Neighborhood
   */

  export type AggregateNeighborhood = {
    _count: NeighborhoodCountAggregateOutputType | null;
    _min: NeighborhoodMinAggregateOutputType | null;
    _max: NeighborhoodMaxAggregateOutputType | null;
  };

  export type NeighborhoodMinAggregateOutputType = {
    id: string | null;
    name: string | null;
    city: string | null;
  };

  export type NeighborhoodMaxAggregateOutputType = {
    id: string | null;
    name: string | null;
    city: string | null;
  };

  export type NeighborhoodCountAggregateOutputType = {
    id: number;
    name: number;
    city: number;
    _all: number;
  };

  export type NeighborhoodMinAggregateInputType = {
    id?: true;
    name?: true;
    city?: true;
  };

  export type NeighborhoodMaxAggregateInputType = {
    id?: true;
    name?: true;
    city?: true;
  };

  export type NeighborhoodCountAggregateInputType = {
    id?: true;
    name?: true;
    city?: true;
    _all?: true;
  };

  export type NeighborhoodAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Neighborhood to aggregate.
     */
    where?: NeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?:
      | NeighborhoodOrderByWithRelationInput
      | NeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: NeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Neighborhoods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Neighborhoods
     **/
    _count?: true | NeighborhoodCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: NeighborhoodMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: NeighborhoodMaxAggregateInputType;
  };

  export type GetNeighborhoodAggregateType<
    T extends NeighborhoodAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateNeighborhood]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNeighborhood[P]>
      : GetScalarType<T[P], AggregateNeighborhood[P]>;
  };

  export type NeighborhoodGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: NeighborhoodWhereInput;
    orderBy?:
      | NeighborhoodOrderByWithAggregationInput
      | NeighborhoodOrderByWithAggregationInput[];
    by: NeighborhoodScalarFieldEnum[] | NeighborhoodScalarFieldEnum;
    having?: NeighborhoodScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: NeighborhoodCountAggregateInputType | true;
    _min?: NeighborhoodMinAggregateInputType;
    _max?: NeighborhoodMaxAggregateInputType;
  };

  export type NeighborhoodGroupByOutputType = {
    id: string;
    name: string;
    city: string;
    _count: NeighborhoodCountAggregateOutputType | null;
    _min: NeighborhoodMinAggregateOutputType | null;
    _max: NeighborhoodMaxAggregateOutputType | null;
  };

  type GetNeighborhoodGroupByPayload<T extends NeighborhoodGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<NeighborhoodGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof NeighborhoodGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NeighborhoodGroupByOutputType[P]>
            : GetScalarType<T[P], NeighborhoodGroupByOutputType[P]>;
        }
      >
    >;

  export type NeighborhoodSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      city?: boolean;
      addresses?: boolean | Neighborhood$addressesArgs<ExtArgs>;
      businessNeighborhood?:
        | boolean
        | Neighborhood$businessNeighborhoodArgs<ExtArgs>;
      _count?: boolean | NeighborhoodCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["neighborhood"]
  >;

  export type NeighborhoodSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      city?: boolean;
    },
    ExtArgs["result"]["neighborhood"]
  >;

  export type NeighborhoodSelectScalar = {
    id?: boolean;
    name?: boolean;
    city?: boolean;
  };

  export type NeighborhoodInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    addresses?: boolean | Neighborhood$addressesArgs<ExtArgs>;
    businessNeighborhood?:
      | boolean
      | Neighborhood$businessNeighborhoodArgs<ExtArgs>;
    _count?: boolean | NeighborhoodCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type NeighborhoodIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};

  export type $NeighborhoodPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "Neighborhood";
    objects: {
      addresses: Prisma.$AddressPayload<ExtArgs>[];
      businessNeighborhood: Prisma.$BusinessNeighborhoodPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        name: string;
        /**
         * @zod.min(1, { message: "Required" })
         */
        city: string;
      },
      ExtArgs["result"]["neighborhood"]
    >;
    composites: {};
  };

  type NeighborhoodGetPayload<
    S extends boolean | null | undefined | NeighborhoodDefaultArgs,
  > = $Result.GetResult<Prisma.$NeighborhoodPayload, S>;

  type NeighborhoodCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<NeighborhoodFindManyArgs, "select" | "include" | "distinct"> & {
    select?: NeighborhoodCountAggregateInputType | true;
  };

  export interface NeighborhoodDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["Neighborhood"];
      meta: { name: "Neighborhood" };
    };
    /**
     * Find zero or one Neighborhood that matches the filter.
     * @param {NeighborhoodFindUniqueArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NeighborhoodFindUniqueArgs>(
      args: SelectSubset<T, NeighborhoodFindUniqueArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<
        Prisma.$NeighborhoodPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one Neighborhood that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NeighborhoodFindUniqueOrThrowArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NeighborhoodFindUniqueOrThrowArgs>(
      args: SelectSubset<T, NeighborhoodFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<
        Prisma.$NeighborhoodPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first Neighborhood that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodFindFirstArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NeighborhoodFindFirstArgs>(
      args?: SelectSubset<T, NeighborhoodFindFirstArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<
        Prisma.$NeighborhoodPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first Neighborhood that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodFindFirstOrThrowArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NeighborhoodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NeighborhoodFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<
        Prisma.$NeighborhoodPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more Neighborhoods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Neighborhoods
     * const neighborhoods = await prisma.neighborhood.findMany()
     *
     * // Get first 10 Neighborhoods
     * const neighborhoods = await prisma.neighborhood.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const neighborhoodWithIdOnly = await prisma.neighborhood.findMany({ select: { id: true } })
     *
     */
    findMany<T extends NeighborhoodFindManyArgs>(
      args?: SelectSubset<T, NeighborhoodFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a Neighborhood.
     * @param {NeighborhoodCreateArgs} args - Arguments to create a Neighborhood.
     * @example
     * // Create one Neighborhood
     * const Neighborhood = await prisma.neighborhood.create({
     *   data: {
     *     // ... data to create a Neighborhood
     *   }
     * })
     *
     */
    create<T extends NeighborhoodCreateArgs>(
      args: SelectSubset<T, NeighborhoodCreateArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many Neighborhoods.
     * @param {NeighborhoodCreateManyArgs} args - Arguments to create many Neighborhoods.
     * @example
     * // Create many Neighborhoods
     * const neighborhood = await prisma.neighborhood.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends NeighborhoodCreateManyArgs>(
      args?: SelectSubset<T, NeighborhoodCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Neighborhoods and returns the data saved in the database.
     * @param {NeighborhoodCreateManyAndReturnArgs} args - Arguments to create many Neighborhoods.
     * @example
     * // Create many Neighborhoods
     * const neighborhood = await prisma.neighborhood.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Neighborhoods and only return the `id`
     * const neighborhoodWithIdOnly = await prisma.neighborhood.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends NeighborhoodCreateManyAndReturnArgs>(
      args?: SelectSubset<T, NeighborhoodCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$NeighborhoodPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a Neighborhood.
     * @param {NeighborhoodDeleteArgs} args - Arguments to delete one Neighborhood.
     * @example
     * // Delete one Neighborhood
     * const Neighborhood = await prisma.neighborhood.delete({
     *   where: {
     *     // ... filter to delete one Neighborhood
     *   }
     * })
     *
     */
    delete<T extends NeighborhoodDeleteArgs>(
      args: SelectSubset<T, NeighborhoodDeleteArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one Neighborhood.
     * @param {NeighborhoodUpdateArgs} args - Arguments to update one Neighborhood.
     * @example
     * // Update one Neighborhood
     * const neighborhood = await prisma.neighborhood.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends NeighborhoodUpdateArgs>(
      args: SelectSubset<T, NeighborhoodUpdateArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more Neighborhoods.
     * @param {NeighborhoodDeleteManyArgs} args - Arguments to filter Neighborhoods to delete.
     * @example
     * // Delete a few Neighborhoods
     * const { count } = await prisma.neighborhood.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends NeighborhoodDeleteManyArgs>(
      args?: SelectSubset<T, NeighborhoodDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Neighborhoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Neighborhoods
     * const neighborhood = await prisma.neighborhood.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends NeighborhoodUpdateManyArgs>(
      args: SelectSubset<T, NeighborhoodUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one Neighborhood.
     * @param {NeighborhoodUpsertArgs} args - Arguments to update or create a Neighborhood.
     * @example
     * // Update or create a Neighborhood
     * const neighborhood = await prisma.neighborhood.upsert({
     *   create: {
     *     // ... data to create a Neighborhood
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Neighborhood we want to update
     *   }
     * })
     */
    upsert<T extends NeighborhoodUpsertArgs>(
      args: SelectSubset<T, NeighborhoodUpsertArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      $Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of Neighborhoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodCountArgs} args - Arguments to filter Neighborhoods to count.
     * @example
     * // Count the number of Neighborhoods
     * const count = await prisma.neighborhood.count({
     *   where: {
     *     // ... the filter for the Neighborhoods we want to count
     *   }
     * })
     **/
    count<T extends NeighborhoodCountArgs>(
      args?: Subset<T, NeighborhoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], NeighborhoodCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Neighborhood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends NeighborhoodAggregateArgs>(
      args: Subset<T, NeighborhoodAggregateArgs>,
    ): Prisma.PrismaPromise<GetNeighborhoodAggregateType<T>>;

    /**
     * Group by Neighborhood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends NeighborhoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NeighborhoodGroupByArgs["orderBy"] }
        : { orderBy?: NeighborhoodGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, NeighborhoodGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetNeighborhoodGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Neighborhood model
     */
    readonly fields: NeighborhoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Neighborhood.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NeighborhoodClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    addresses<T extends Neighborhood$addressesArgs<ExtArgs> = {}>(
      args?: Subset<T, Neighborhood$addressesArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany"> | Null
    >;
    businessNeighborhood<
      T extends Neighborhood$businessNeighborhoodArgs<ExtArgs> = {},
    >(
      args?: Subset<T, Neighborhood$businessNeighborhoodArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      | $Result.GetResult<
          Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
          T,
          "findMany"
        >
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Neighborhood model
   */
  interface NeighborhoodFieldRefs {
    readonly id: FieldRef<"Neighborhood", "String">;
    readonly name: FieldRef<"Neighborhood", "String">;
    readonly city: FieldRef<"Neighborhood", "String">;
  }

  // Custom InputTypes
  /**
   * Neighborhood findUnique
   */
  export type NeighborhoodFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which Neighborhood to fetch.
     */
    where: NeighborhoodWhereUniqueInput;
  };

  /**
   * Neighborhood findUniqueOrThrow
   */
  export type NeighborhoodFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which Neighborhood to fetch.
     */
    where: NeighborhoodWhereUniqueInput;
  };

  /**
   * Neighborhood findFirst
   */
  export type NeighborhoodFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which Neighborhood to fetch.
     */
    where?: NeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?:
      | NeighborhoodOrderByWithRelationInput
      | NeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Neighborhoods.
     */
    cursor?: NeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Neighborhoods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Neighborhoods.
     */
    distinct?: NeighborhoodScalarFieldEnum | NeighborhoodScalarFieldEnum[];
  };

  /**
   * Neighborhood findFirstOrThrow
   */
  export type NeighborhoodFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which Neighborhood to fetch.
     */
    where?: NeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?:
      | NeighborhoodOrderByWithRelationInput
      | NeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Neighborhoods.
     */
    cursor?: NeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Neighborhoods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Neighborhoods.
     */
    distinct?: NeighborhoodScalarFieldEnum | NeighborhoodScalarFieldEnum[];
  };

  /**
   * Neighborhood findMany
   */
  export type NeighborhoodFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which Neighborhoods to fetch.
     */
    where?: NeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?:
      | NeighborhoodOrderByWithRelationInput
      | NeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Neighborhoods.
     */
    cursor?: NeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Neighborhoods.
     */
    skip?: number;
    distinct?: NeighborhoodScalarFieldEnum | NeighborhoodScalarFieldEnum[];
  };

  /**
   * Neighborhood create
   */
  export type NeighborhoodCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * The data needed to create a Neighborhood.
     */
    data: XOR<NeighborhoodCreateInput, NeighborhoodUncheckedCreateInput>;
  };

  /**
   * Neighborhood createMany
   */
  export type NeighborhoodCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Neighborhoods.
     */
    data: NeighborhoodCreateManyInput | NeighborhoodCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Neighborhood createManyAndReturn
   */
  export type NeighborhoodCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many Neighborhoods.
     */
    data: NeighborhoodCreateManyInput | NeighborhoodCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Neighborhood update
   */
  export type NeighborhoodUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * The data needed to update a Neighborhood.
     */
    data: XOR<NeighborhoodUpdateInput, NeighborhoodUncheckedUpdateInput>;
    /**
     * Choose, which Neighborhood to update.
     */
    where: NeighborhoodWhereUniqueInput;
  };

  /**
   * Neighborhood updateMany
   */
  export type NeighborhoodUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Neighborhoods.
     */
    data: XOR<
      NeighborhoodUpdateManyMutationInput,
      NeighborhoodUncheckedUpdateManyInput
    >;
    /**
     * Filter which Neighborhoods to update
     */
    where?: NeighborhoodWhereInput;
  };

  /**
   * Neighborhood upsert
   */
  export type NeighborhoodUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * The filter to search for the Neighborhood to update in case it exists.
     */
    where: NeighborhoodWhereUniqueInput;
    /**
     * In case the Neighborhood found by the `where` argument doesn't exist, create a new Neighborhood with this data.
     */
    create: XOR<NeighborhoodCreateInput, NeighborhoodUncheckedCreateInput>;
    /**
     * In case the Neighborhood was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NeighborhoodUpdateInput, NeighborhoodUncheckedUpdateInput>;
  };

  /**
   * Neighborhood delete
   */
  export type NeighborhoodDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter which Neighborhood to delete.
     */
    where: NeighborhoodWhereUniqueInput;
  };

  /**
   * Neighborhood deleteMany
   */
  export type NeighborhoodDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Neighborhoods to delete
     */
    where?: NeighborhoodWhereInput;
  };

  /**
   * Neighborhood.addresses
   */
  export type Neighborhood$addressesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null;
    where?: AddressWhereInput;
    orderBy?:
      | AddressOrderByWithRelationInput
      | AddressOrderByWithRelationInput[];
    cursor?: AddressWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[];
  };

  /**
   * Neighborhood.businessNeighborhood
   */
  export type Neighborhood$businessNeighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    where?: BusinessNeighborhoodWhereInput;
    orderBy?:
      | BusinessNeighborhoodOrderByWithRelationInput
      | BusinessNeighborhoodOrderByWithRelationInput[];
    cursor?: BusinessNeighborhoodWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?:
      | BusinessNeighborhoodScalarFieldEnum
      | BusinessNeighborhoodScalarFieldEnum[];
  };

  /**
   * Neighborhood without action
   */
  export type NeighborhoodDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null;
  };

  /**
   * Model UserAddress
   */

  export type AggregateUserAddress = {
    _count: UserAddressCountAggregateOutputType | null;
    _min: UserAddressMinAggregateOutputType | null;
    _max: UserAddressMaxAggregateOutputType | null;
  };

  export type UserAddressMinAggregateOutputType = {
    id: string | null;
    addressId: string | null;
    userId: string | null;
    businessId: string | null;
  };

  export type UserAddressMaxAggregateOutputType = {
    id: string | null;
    addressId: string | null;
    userId: string | null;
    businessId: string | null;
  };

  export type UserAddressCountAggregateOutputType = {
    id: number;
    addressId: number;
    userId: number;
    businessId: number;
    _all: number;
  };

  export type UserAddressMinAggregateInputType = {
    id?: true;
    addressId?: true;
    userId?: true;
    businessId?: true;
  };

  export type UserAddressMaxAggregateInputType = {
    id?: true;
    addressId?: true;
    userId?: true;
    businessId?: true;
  };

  export type UserAddressCountAggregateInputType = {
    id?: true;
    addressId?: true;
    userId?: true;
    businessId?: true;
    _all?: true;
  };

  export type UserAddressAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserAddress to aggregate.
     */
    where?: UserAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?:
      | UserAddressOrderByWithRelationInput
      | UserAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserAddresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned UserAddresses
     **/
    _count?: true | UserAddressCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserAddressMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserAddressMaxAggregateInputType;
  };

  export type GetUserAddressAggregateType<T extends UserAddressAggregateArgs> =
    {
      [P in keyof T & keyof AggregateUserAddress]: P extends "_count" | "count"
        ? T[P] extends true
          ? number
          : GetScalarType<T[P], AggregateUserAddress[P]>
        : GetScalarType<T[P], AggregateUserAddress[P]>;
    };

  export type UserAddressGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserAddressWhereInput;
    orderBy?:
      | UserAddressOrderByWithAggregationInput
      | UserAddressOrderByWithAggregationInput[];
    by: UserAddressScalarFieldEnum[] | UserAddressScalarFieldEnum;
    having?: UserAddressScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserAddressCountAggregateInputType | true;
    _min?: UserAddressMinAggregateInputType;
    _max?: UserAddressMaxAggregateInputType;
  };

  export type UserAddressGroupByOutputType = {
    id: string;
    addressId: string;
    userId: string;
    businessId: string | null;
    _count: UserAddressCountAggregateOutputType | null;
    _min: UserAddressMinAggregateOutputType | null;
    _max: UserAddressMaxAggregateOutputType | null;
  };

  type GetUserAddressGroupByPayload<T extends UserAddressGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<UserAddressGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof UserAddressGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
            : GetScalarType<T[P], UserAddressGroupByOutputType[P]>;
        }
      >
    >;

  export type UserAddressSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      addressId?: boolean;
      userId?: boolean;
      businessId?: boolean;
      address?: boolean | AddressDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      business?: boolean | UserAddress$businessArgs<ExtArgs>;
    },
    ExtArgs["result"]["userAddress"]
  >;

  export type UserAddressSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      addressId?: boolean;
      userId?: boolean;
      businessId?: boolean;
      address?: boolean | AddressDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      business?: boolean | UserAddress$businessArgs<ExtArgs>;
    },
    ExtArgs["result"]["userAddress"]
  >;

  export type UserAddressSelectScalar = {
    id?: boolean;
    addressId?: boolean;
    userId?: boolean;
    businessId?: boolean;
  };

  export type UserAddressInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    address?: boolean | AddressDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
    business?: boolean | UserAddress$businessArgs<ExtArgs>;
  };
  export type UserAddressIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    address?: boolean | AddressDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
    business?: boolean | UserAddress$businessArgs<ExtArgs>;
  };

  export type $UserAddressPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "UserAddress";
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
      business: Prisma.$BusinessPayload<ExtArgs> | null;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        addressId: string;
        userId: string;
        businessId: string | null;
      },
      ExtArgs["result"]["userAddress"]
    >;
    composites: {};
  };

  type UserAddressGetPayload<
    S extends boolean | null | undefined | UserAddressDefaultArgs,
  > = $Result.GetResult<Prisma.$UserAddressPayload, S>;

  type UserAddressCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<UserAddressFindManyArgs, "select" | "include" | "distinct"> & {
    select?: UserAddressCountAggregateInputType | true;
  };

  export interface UserAddressDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["UserAddress"];
      meta: { name: "UserAddress" };
    };
    /**
     * Find zero or one UserAddress that matches the filter.
     * @param {UserAddressFindUniqueArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAddressFindUniqueArgs>(
      args: SelectSubset<T, UserAddressFindUniqueArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<
        Prisma.$UserAddressPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one UserAddress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAddressFindUniqueOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAddressFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserAddressFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<
        Prisma.$UserAddressPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first UserAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAddressFindFirstArgs>(
      args?: SelectSubset<T, UserAddressFindFirstArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<
        Prisma.$UserAddressPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first UserAddress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserAddressFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<
        Prisma.$UserAddressPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more UserAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAddresses
     * const userAddresses = await prisma.userAddress.findMany()
     *
     * // Get first 10 UserAddresses
     * const userAddresses = await prisma.userAddress.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userAddressWithIdOnly = await prisma.userAddress.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserAddressFindManyArgs>(
      args?: SelectSubset<T, UserAddressFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a UserAddress.
     * @param {UserAddressCreateArgs} args - Arguments to create a UserAddress.
     * @example
     * // Create one UserAddress
     * const UserAddress = await prisma.userAddress.create({
     *   data: {
     *     // ... data to create a UserAddress
     *   }
     * })
     *
     */
    create<T extends UserAddressCreateArgs>(
      args: SelectSubset<T, UserAddressCreateArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many UserAddresses.
     * @param {UserAddressCreateManyArgs} args - Arguments to create many UserAddresses.
     * @example
     * // Create many UserAddresses
     * const userAddress = await prisma.userAddress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserAddressCreateManyArgs>(
      args?: SelectSubset<T, UserAddressCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many UserAddresses and returns the data saved in the database.
     * @param {UserAddressCreateManyAndReturnArgs} args - Arguments to create many UserAddresses.
     * @example
     * // Create many UserAddresses
     * const userAddress = await prisma.userAddress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many UserAddresses and only return the `id`
     * const userAddressWithIdOnly = await prisma.userAddress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserAddressCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserAddressCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserAddressPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a UserAddress.
     * @param {UserAddressDeleteArgs} args - Arguments to delete one UserAddress.
     * @example
     * // Delete one UserAddress
     * const UserAddress = await prisma.userAddress.delete({
     *   where: {
     *     // ... filter to delete one UserAddress
     *   }
     * })
     *
     */
    delete<T extends UserAddressDeleteArgs>(
      args: SelectSubset<T, UserAddressDeleteArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one UserAddress.
     * @param {UserAddressUpdateArgs} args - Arguments to update one UserAddress.
     * @example
     * // Update one UserAddress
     * const userAddress = await prisma.userAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserAddressUpdateArgs>(
      args: SelectSubset<T, UserAddressUpdateArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more UserAddresses.
     * @param {UserAddressDeleteManyArgs} args - Arguments to filter UserAddresses to delete.
     * @example
     * // Delete a few UserAddresses
     * const { count } = await prisma.userAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserAddressDeleteManyArgs>(
      args?: SelectSubset<T, UserAddressDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAddresses
     * const userAddress = await prisma.userAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserAddressUpdateManyArgs>(
      args: SelectSubset<T, UserAddressUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one UserAddress.
     * @param {UserAddressUpsertArgs} args - Arguments to update or create a UserAddress.
     * @example
     * // Update or create a UserAddress
     * const userAddress = await prisma.userAddress.upsert({
     *   create: {
     *     // ... data to create a UserAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAddress we want to update
     *   }
     * })
     */
    upsert<T extends UserAddressUpsertArgs>(
      args: SelectSubset<T, UserAddressUpsertArgs<ExtArgs>>,
    ): Prisma__UserAddressClient<
      $Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressCountArgs} args - Arguments to filter UserAddresses to count.
     * @example
     * // Count the number of UserAddresses
     * const count = await prisma.userAddress.count({
     *   where: {
     *     // ... the filter for the UserAddresses we want to count
     *   }
     * })
     **/
    count<T extends UserAddressCountArgs>(
      args?: Subset<T, UserAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], UserAddressCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserAddressAggregateArgs>(
      args: Subset<T, UserAddressAggregateArgs>,
    ): Prisma.PrismaPromise<GetUserAddressAggregateType<T>>;

    /**
     * Group by UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAddressGroupByArgs["orderBy"] }
        : { orderBy?: UserAddressGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserAddressGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetUserAddressGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the UserAddress model
     */
    readonly fields: UserAddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAddressClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    address<T extends AddressDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, AddressDefaultArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      | $Result.GetResult<
          Prisma.$AddressPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>,
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    business<T extends UserAddress$businessArgs<ExtArgs> = {}>(
      args?: Subset<T, UserAddress$businessArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      $Result.GetResult<
        Prisma.$BusinessPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      > | null,
      null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the UserAddress model
   */
  interface UserAddressFieldRefs {
    readonly id: FieldRef<"UserAddress", "String">;
    readonly addressId: FieldRef<"UserAddress", "String">;
    readonly userId: FieldRef<"UserAddress", "String">;
    readonly businessId: FieldRef<"UserAddress", "String">;
  }

  // Custom InputTypes
  /**
   * UserAddress findUnique
   */
  export type UserAddressFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * Filter, which UserAddress to fetch.
     */
    where: UserAddressWhereUniqueInput;
  };

  /**
   * UserAddress findUniqueOrThrow
   */
  export type UserAddressFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * Filter, which UserAddress to fetch.
     */
    where: UserAddressWhereUniqueInput;
  };

  /**
   * UserAddress findFirst
   */
  export type UserAddressFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * Filter, which UserAddress to fetch.
     */
    where?: UserAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?:
      | UserAddressOrderByWithRelationInput
      | UserAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserAddresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserAddresses.
     */
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[];
  };

  /**
   * UserAddress findFirstOrThrow
   */
  export type UserAddressFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * Filter, which UserAddress to fetch.
     */
    where?: UserAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?:
      | UserAddressOrderByWithRelationInput
      | UserAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserAddresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserAddresses.
     */
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[];
  };

  /**
   * UserAddress findMany
   */
  export type UserAddressFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * Filter, which UserAddresses to fetch.
     */
    where?: UserAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?:
      | UserAddressOrderByWithRelationInput
      | UserAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserAddresses.
     */
    skip?: number;
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[];
  };

  /**
   * UserAddress create
   */
  export type UserAddressCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * The data needed to create a UserAddress.
     */
    data: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>;
  };

  /**
   * UserAddress createMany
   */
  export type UserAddressCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many UserAddresses.
     */
    data: UserAddressCreateManyInput | UserAddressCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * UserAddress createManyAndReturn
   */
  export type UserAddressCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many UserAddresses.
     */
    data: UserAddressCreateManyInput | UserAddressCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserAddress update
   */
  export type UserAddressUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * The data needed to update a UserAddress.
     */
    data: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>;
    /**
     * Choose, which UserAddress to update.
     */
    where: UserAddressWhereUniqueInput;
  };

  /**
   * UserAddress updateMany
   */
  export type UserAddressUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update UserAddresses.
     */
    data: XOR<
      UserAddressUpdateManyMutationInput,
      UserAddressUncheckedUpdateManyInput
    >;
    /**
     * Filter which UserAddresses to update
     */
    where?: UserAddressWhereInput;
  };

  /**
   * UserAddress upsert
   */
  export type UserAddressUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * The filter to search for the UserAddress to update in case it exists.
     */
    where: UserAddressWhereUniqueInput;
    /**
     * In case the UserAddress found by the `where` argument doesn't exist, create a new UserAddress with this data.
     */
    create: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>;
    /**
     * In case the UserAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>;
  };

  /**
   * UserAddress delete
   */
  export type UserAddressDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
    /**
     * Filter which UserAddress to delete.
     */
    where: UserAddressWhereUniqueInput;
  };

  /**
   * UserAddress deleteMany
   */
  export type UserAddressDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserAddresses to delete
     */
    where?: UserAddressWhereInput;
  };

  /**
   * UserAddress.business
   */
  export type UserAddress$businessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null;
    where?: BusinessWhereInput;
  };

  /**
   * UserAddress without action
   */
  export type UserAddressDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null;
  };

  /**
   * Model OrderAddress
   */

  export type AggregateOrderAddress = {
    _count: OrderAddressCountAggregateOutputType | null;
    _min: OrderAddressMinAggregateOutputType | null;
    _max: OrderAddressMaxAggregateOutputType | null;
  };

  export type OrderAddressMinAggregateOutputType = {
    id: string | null;
    addressId: string | null;
    orderId: string | null;
  };

  export type OrderAddressMaxAggregateOutputType = {
    id: string | null;
    addressId: string | null;
    orderId: string | null;
  };

  export type OrderAddressCountAggregateOutputType = {
    id: number;
    addressId: number;
    orderId: number;
    _all: number;
  };

  export type OrderAddressMinAggregateInputType = {
    id?: true;
    addressId?: true;
    orderId?: true;
  };

  export type OrderAddressMaxAggregateInputType = {
    id?: true;
    addressId?: true;
    orderId?: true;
  };

  export type OrderAddressCountAggregateInputType = {
    id?: true;
    addressId?: true;
    orderId?: true;
    _all?: true;
  };

  export type OrderAddressAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which OrderAddress to aggregate.
     */
    where?: OrderAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderAddresses to fetch.
     */
    orderBy?:
      | OrderAddressOrderByWithRelationInput
      | OrderAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: OrderAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderAddresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned OrderAddresses
     **/
    _count?: true | OrderAddressCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: OrderAddressMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: OrderAddressMaxAggregateInputType;
  };

  export type GetOrderAddressAggregateType<
    T extends OrderAddressAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateOrderAddress]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderAddress[P]>
      : GetScalarType<T[P], AggregateOrderAddress[P]>;
  };

  export type OrderAddressGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: OrderAddressWhereInput;
    orderBy?:
      | OrderAddressOrderByWithAggregationInput
      | OrderAddressOrderByWithAggregationInput[];
    by: OrderAddressScalarFieldEnum[] | OrderAddressScalarFieldEnum;
    having?: OrderAddressScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: OrderAddressCountAggregateInputType | true;
    _min?: OrderAddressMinAggregateInputType;
    _max?: OrderAddressMaxAggregateInputType;
  };

  export type OrderAddressGroupByOutputType = {
    id: string;
    addressId: string;
    orderId: string;
    _count: OrderAddressCountAggregateOutputType | null;
    _min: OrderAddressMinAggregateOutputType | null;
    _max: OrderAddressMaxAggregateOutputType | null;
  };

  type GetOrderAddressGroupByPayload<T extends OrderAddressGroupByArgs> =
    Prisma.PrismaPromise<
      Array<
        PickEnumerable<OrderAddressGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof OrderAddressGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderAddressGroupByOutputType[P]>
            : GetScalarType<T[P], OrderAddressGroupByOutputType[P]>;
        }
      >
    >;

  export type OrderAddressSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      addressId?: boolean;
      orderId?: boolean;
      address?: boolean | AddressDefaultArgs<ExtArgs>;
      order?: boolean | OrderDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["orderAddress"]
  >;

  export type OrderAddressSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      addressId?: boolean;
      orderId?: boolean;
      address?: boolean | AddressDefaultArgs<ExtArgs>;
      order?: boolean | OrderDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["orderAddress"]
  >;

  export type OrderAddressSelectScalar = {
    id?: boolean;
    addressId?: boolean;
    orderId?: boolean;
  };

  export type OrderAddressInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    address?: boolean | AddressDefaultArgs<ExtArgs>;
    order?: boolean | OrderDefaultArgs<ExtArgs>;
  };
  export type OrderAddressIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    address?: boolean | AddressDefaultArgs<ExtArgs>;
    order?: boolean | OrderDefaultArgs<ExtArgs>;
  };

  export type $OrderAddressPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "OrderAddress";
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>;
      order: Prisma.$OrderPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        addressId: string;
        orderId: string;
      },
      ExtArgs["result"]["orderAddress"]
    >;
    composites: {};
  };

  type OrderAddressGetPayload<
    S extends boolean | null | undefined | OrderAddressDefaultArgs,
  > = $Result.GetResult<Prisma.$OrderAddressPayload, S>;

  type OrderAddressCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<OrderAddressFindManyArgs, "select" | "include" | "distinct"> & {
    select?: OrderAddressCountAggregateInputType | true;
  };

  export interface OrderAddressDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["OrderAddress"];
      meta: { name: "OrderAddress" };
    };
    /**
     * Find zero or one OrderAddress that matches the filter.
     * @param {OrderAddressFindUniqueArgs} args - Arguments to find a OrderAddress
     * @example
     * // Get one OrderAddress
     * const orderAddress = await prisma.orderAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderAddressFindUniqueArgs>(
      args: SelectSubset<T, OrderAddressFindUniqueArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one OrderAddress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderAddressFindUniqueOrThrowArgs} args - Arguments to find a OrderAddress
     * @example
     * // Get one OrderAddress
     * const orderAddress = await prisma.orderAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderAddressFindUniqueOrThrowArgs>(
      args: SelectSubset<T, OrderAddressFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first OrderAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressFindFirstArgs} args - Arguments to find a OrderAddress
     * @example
     * // Get one OrderAddress
     * const orderAddress = await prisma.orderAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderAddressFindFirstArgs>(
      args?: SelectSubset<T, OrderAddressFindFirstArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first OrderAddress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressFindFirstOrThrowArgs} args - Arguments to find a OrderAddress
     * @example
     * // Get one OrderAddress
     * const orderAddress = await prisma.orderAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrderAddressFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more OrderAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderAddresses
     * const orderAddresses = await prisma.orderAddress.findMany()
     *
     * // Get first 10 OrderAddresses
     * const orderAddresses = await prisma.orderAddress.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const orderAddressWithIdOnly = await prisma.orderAddress.findMany({ select: { id: true } })
     *
     */
    findMany<T extends OrderAddressFindManyArgs>(
      args?: SelectSubset<T, OrderAddressFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$OrderAddressPayload<ExtArgs>, T, "findMany">
    >;

    /**
     * Create a OrderAddress.
     * @param {OrderAddressCreateArgs} args - Arguments to create a OrderAddress.
     * @example
     * // Create one OrderAddress
     * const OrderAddress = await prisma.orderAddress.create({
     *   data: {
     *     // ... data to create a OrderAddress
     *   }
     * })
     *
     */
    create<T extends OrderAddressCreateArgs>(
      args: SelectSubset<T, OrderAddressCreateArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<Prisma.$OrderAddressPayload<ExtArgs>, T, "create">,
      never,
      ExtArgs
    >;

    /**
     * Create many OrderAddresses.
     * @param {OrderAddressCreateManyArgs} args - Arguments to create many OrderAddresses.
     * @example
     * // Create many OrderAddresses
     * const orderAddress = await prisma.orderAddress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends OrderAddressCreateManyArgs>(
      args?: SelectSubset<T, OrderAddressCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many OrderAddresses and returns the data saved in the database.
     * @param {OrderAddressCreateManyAndReturnArgs} args - Arguments to create many OrderAddresses.
     * @example
     * // Create many OrderAddresses
     * const orderAddress = await prisma.orderAddress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many OrderAddresses and only return the `id`
     * const orderAddressWithIdOnly = await prisma.orderAddress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends OrderAddressCreateManyAndReturnArgs>(
      args?: SelectSubset<T, OrderAddressCreateManyAndReturnArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$OrderAddressPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a OrderAddress.
     * @param {OrderAddressDeleteArgs} args - Arguments to delete one OrderAddress.
     * @example
     * // Delete one OrderAddress
     * const OrderAddress = await prisma.orderAddress.delete({
     *   where: {
     *     // ... filter to delete one OrderAddress
     *   }
     * })
     *
     */
    delete<T extends OrderAddressDeleteArgs>(
      args: SelectSubset<T, OrderAddressDeleteArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<Prisma.$OrderAddressPayload<ExtArgs>, T, "delete">,
      never,
      ExtArgs
    >;

    /**
     * Update one OrderAddress.
     * @param {OrderAddressUpdateArgs} args - Arguments to update one OrderAddress.
     * @example
     * // Update one OrderAddress
     * const orderAddress = await prisma.orderAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends OrderAddressUpdateArgs>(
      args: SelectSubset<T, OrderAddressUpdateArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<Prisma.$OrderAddressPayload<ExtArgs>, T, "update">,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more OrderAddresses.
     * @param {OrderAddressDeleteManyArgs} args - Arguments to filter OrderAddresses to delete.
     * @example
     * // Delete a few OrderAddresses
     * const { count } = await prisma.orderAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends OrderAddressDeleteManyArgs>(
      args?: SelectSubset<T, OrderAddressDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more OrderAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderAddresses
     * const orderAddress = await prisma.orderAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends OrderAddressUpdateManyArgs>(
      args: SelectSubset<T, OrderAddressUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one OrderAddress.
     * @param {OrderAddressUpsertArgs} args - Arguments to update or create a OrderAddress.
     * @example
     * // Update or create a OrderAddress
     * const orderAddress = await prisma.orderAddress.upsert({
     *   create: {
     *     // ... data to create a OrderAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderAddress we want to update
     *   }
     * })
     */
    upsert<T extends OrderAddressUpsertArgs>(
      args: SelectSubset<T, OrderAddressUpsertArgs<ExtArgs>>,
    ): Prisma__OrderAddressClient<
      $Result.GetResult<Prisma.$OrderAddressPayload<ExtArgs>, T, "upsert">,
      never,
      ExtArgs
    >;

    /**
     * Count the number of OrderAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressCountArgs} args - Arguments to filter OrderAddresses to count.
     * @example
     * // Count the number of OrderAddresses
     * const count = await prisma.orderAddress.count({
     *   where: {
     *     // ... the filter for the OrderAddresses we want to count
     *   }
     * })
     **/
    count<T extends OrderAddressCountArgs>(
      args?: Subset<T, OrderAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], OrderAddressCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a OrderAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends OrderAddressAggregateArgs>(
      args: Subset<T, OrderAddressAggregateArgs>,
    ): Prisma.PrismaPromise<GetOrderAddressAggregateType<T>>;

    /**
     * Group by OrderAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends OrderAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderAddressGroupByArgs["orderBy"] }
        : { orderBy?: OrderAddressGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, OrderAddressGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetOrderAddressGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the OrderAddress model
     */
    readonly fields: OrderAddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderAddressClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    address<T extends AddressDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, AddressDefaultArgs<ExtArgs>>,
    ): Prisma__AddressClient<
      | $Result.GetResult<
          Prisma.$AddressPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, OrderDefaultArgs<ExtArgs>>,
    ): Prisma__OrderClient<
      | $Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the OrderAddress model
   */
  interface OrderAddressFieldRefs {
    readonly id: FieldRef<"OrderAddress", "String">;
    readonly addressId: FieldRef<"OrderAddress", "String">;
    readonly orderId: FieldRef<"OrderAddress", "String">;
  }

  // Custom InputTypes
  /**
   * OrderAddress findUnique
   */
  export type OrderAddressFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * Filter, which OrderAddress to fetch.
     */
    where: OrderAddressWhereUniqueInput;
  };

  /**
   * OrderAddress findUniqueOrThrow
   */
  export type OrderAddressFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * Filter, which OrderAddress to fetch.
     */
    where: OrderAddressWhereUniqueInput;
  };

  /**
   * OrderAddress findFirst
   */
  export type OrderAddressFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * Filter, which OrderAddress to fetch.
     */
    where?: OrderAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderAddresses to fetch.
     */
    orderBy?:
      | OrderAddressOrderByWithRelationInput
      | OrderAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for OrderAddresses.
     */
    cursor?: OrderAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderAddresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of OrderAddresses.
     */
    distinct?: OrderAddressScalarFieldEnum | OrderAddressScalarFieldEnum[];
  };

  /**
   * OrderAddress findFirstOrThrow
   */
  export type OrderAddressFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * Filter, which OrderAddress to fetch.
     */
    where?: OrderAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderAddresses to fetch.
     */
    orderBy?:
      | OrderAddressOrderByWithRelationInput
      | OrderAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for OrderAddresses.
     */
    cursor?: OrderAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderAddresses.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of OrderAddresses.
     */
    distinct?: OrderAddressScalarFieldEnum | OrderAddressScalarFieldEnum[];
  };

  /**
   * OrderAddress findMany
   */
  export type OrderAddressFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * Filter, which OrderAddresses to fetch.
     */
    where?: OrderAddressWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of OrderAddresses to fetch.
     */
    orderBy?:
      | OrderAddressOrderByWithRelationInput
      | OrderAddressOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing OrderAddresses.
     */
    cursor?: OrderAddressWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` OrderAddresses from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` OrderAddresses.
     */
    skip?: number;
    distinct?: OrderAddressScalarFieldEnum | OrderAddressScalarFieldEnum[];
  };

  /**
   * OrderAddress create
   */
  export type OrderAddressCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * The data needed to create a OrderAddress.
     */
    data: XOR<OrderAddressCreateInput, OrderAddressUncheckedCreateInput>;
  };

  /**
   * OrderAddress createMany
   */
  export type OrderAddressCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many OrderAddresses.
     */
    data: OrderAddressCreateManyInput | OrderAddressCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * OrderAddress createManyAndReturn
   */
  export type OrderAddressCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many OrderAddresses.
     */
    data: OrderAddressCreateManyInput | OrderAddressCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * OrderAddress update
   */
  export type OrderAddressUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * The data needed to update a OrderAddress.
     */
    data: XOR<OrderAddressUpdateInput, OrderAddressUncheckedUpdateInput>;
    /**
     * Choose, which OrderAddress to update.
     */
    where: OrderAddressWhereUniqueInput;
  };

  /**
   * OrderAddress updateMany
   */
  export type OrderAddressUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update OrderAddresses.
     */
    data: XOR<
      OrderAddressUpdateManyMutationInput,
      OrderAddressUncheckedUpdateManyInput
    >;
    /**
     * Filter which OrderAddresses to update
     */
    where?: OrderAddressWhereInput;
  };

  /**
   * OrderAddress upsert
   */
  export type OrderAddressUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * The filter to search for the OrderAddress to update in case it exists.
     */
    where: OrderAddressWhereUniqueInput;
    /**
     * In case the OrderAddress found by the `where` argument doesn't exist, create a new OrderAddress with this data.
     */
    create: XOR<OrderAddressCreateInput, OrderAddressUncheckedCreateInput>;
    /**
     * In case the OrderAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderAddressUpdateInput, OrderAddressUncheckedUpdateInput>;
  };

  /**
   * OrderAddress delete
   */
  export type OrderAddressDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
    /**
     * Filter which OrderAddress to delete.
     */
    where: OrderAddressWhereUniqueInput;
  };

  /**
   * OrderAddress deleteMany
   */
  export type OrderAddressDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which OrderAddresses to delete
     */
    where?: OrderAddressWhereInput;
  };

  /**
   * OrderAddress without action
   */
  export type OrderAddressDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the OrderAddress
     */
    select?: OrderAddressSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderAddressInclude<ExtArgs> | null;
  };

  /**
   * Model BusinessNeighborhood
   */

  export type AggregateBusinessNeighborhood = {
    _count: BusinessNeighborhoodCountAggregateOutputType | null;
    _avg: BusinessNeighborhoodAvgAggregateOutputType | null;
    _sum: BusinessNeighborhoodSumAggregateOutputType | null;
    _min: BusinessNeighborhoodMinAggregateOutputType | null;
    _max: BusinessNeighborhoodMaxAggregateOutputType | null;
  };

  export type BusinessNeighborhoodAvgAggregateOutputType = {
    shipping: number | null;
  };

  export type BusinessNeighborhoodSumAggregateOutputType = {
    shipping: number | null;
  };

  export type BusinessNeighborhoodMinAggregateOutputType = {
    id: string | null;
    shipping: number | null;
    active: boolean | null;
    businessId: string | null;
    neighborhoodId: string | null;
  };

  export type BusinessNeighborhoodMaxAggregateOutputType = {
    id: string | null;
    shipping: number | null;
    active: boolean | null;
    businessId: string | null;
    neighborhoodId: string | null;
  };

  export type BusinessNeighborhoodCountAggregateOutputType = {
    id: number;
    shipping: number;
    active: number;
    businessId: number;
    neighborhoodId: number;
    _all: number;
  };

  export type BusinessNeighborhoodAvgAggregateInputType = {
    shipping?: true;
  };

  export type BusinessNeighborhoodSumAggregateInputType = {
    shipping?: true;
  };

  export type BusinessNeighborhoodMinAggregateInputType = {
    id?: true;
    shipping?: true;
    active?: true;
    businessId?: true;
    neighborhoodId?: true;
  };

  export type BusinessNeighborhoodMaxAggregateInputType = {
    id?: true;
    shipping?: true;
    active?: true;
    businessId?: true;
    neighborhoodId?: true;
  };

  export type BusinessNeighborhoodCountAggregateInputType = {
    id?: true;
    shipping?: true;
    active?: true;
    businessId?: true;
    neighborhoodId?: true;
    _all?: true;
  };

  export type BusinessNeighborhoodAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which BusinessNeighborhood to aggregate.
     */
    where?: BusinessNeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of BusinessNeighborhoods to fetch.
     */
    orderBy?:
      | BusinessNeighborhoodOrderByWithRelationInput
      | BusinessNeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: BusinessNeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` BusinessNeighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` BusinessNeighborhoods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned BusinessNeighborhoods
     **/
    _count?: true | BusinessNeighborhoodCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: BusinessNeighborhoodAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: BusinessNeighborhoodSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: BusinessNeighborhoodMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: BusinessNeighborhoodMaxAggregateInputType;
  };

  export type GetBusinessNeighborhoodAggregateType<
    T extends BusinessNeighborhoodAggregateArgs,
  > = {
    [P in keyof T & keyof AggregateBusinessNeighborhood]: P extends
      | "_count"
      | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessNeighborhood[P]>
      : GetScalarType<T[P], AggregateBusinessNeighborhood[P]>;
  };

  export type BusinessNeighborhoodGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: BusinessNeighborhoodWhereInput;
    orderBy?:
      | BusinessNeighborhoodOrderByWithAggregationInput
      | BusinessNeighborhoodOrderByWithAggregationInput[];
    by:
      | BusinessNeighborhoodScalarFieldEnum[]
      | BusinessNeighborhoodScalarFieldEnum;
    having?: BusinessNeighborhoodScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: BusinessNeighborhoodCountAggregateInputType | true;
    _avg?: BusinessNeighborhoodAvgAggregateInputType;
    _sum?: BusinessNeighborhoodSumAggregateInputType;
    _min?: BusinessNeighborhoodMinAggregateInputType;
    _max?: BusinessNeighborhoodMaxAggregateInputType;
  };

  export type BusinessNeighborhoodGroupByOutputType = {
    id: string;
    shipping: number;
    active: boolean;
    businessId: string;
    neighborhoodId: string;
    _count: BusinessNeighborhoodCountAggregateOutputType | null;
    _avg: BusinessNeighborhoodAvgAggregateOutputType | null;
    _sum: BusinessNeighborhoodSumAggregateOutputType | null;
    _min: BusinessNeighborhoodMinAggregateOutputType | null;
    _max: BusinessNeighborhoodMaxAggregateOutputType | null;
  };

  type GetBusinessNeighborhoodGroupByPayload<
    T extends BusinessNeighborhoodGroupByArgs,
  > = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessNeighborhoodGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof BusinessNeighborhoodGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], BusinessNeighborhoodGroupByOutputType[P]>
          : GetScalarType<T[P], BusinessNeighborhoodGroupByOutputType[P]>;
      }
    >
  >;

  export type BusinessNeighborhoodSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      shipping?: boolean;
      active?: boolean;
      businessId?: boolean;
      neighborhoodId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
      neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["businessNeighborhood"]
  >;

  export type BusinessNeighborhoodSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      shipping?: boolean;
      active?: boolean;
      businessId?: boolean;
      neighborhoodId?: boolean;
      business?: boolean | BusinessDefaultArgs<ExtArgs>;
      neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>;
    },
    ExtArgs["result"]["businessNeighborhood"]
  >;

  export type BusinessNeighborhoodSelectScalar = {
    id?: boolean;
    shipping?: boolean;
    active?: boolean;
    businessId?: boolean;
    neighborhoodId?: boolean;
  };

  export type BusinessNeighborhoodInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>;
  };
  export type BusinessNeighborhoodIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>;
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>;
  };

  export type $BusinessNeighborhoodPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: "BusinessNeighborhood";
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>;
      neighborhood: Prisma.$NeighborhoodPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: string;
        shipping: number;
        active: boolean;
        businessId: string;
        neighborhoodId: string;
      },
      ExtArgs["result"]["businessNeighborhood"]
    >;
    composites: {};
  };

  type BusinessNeighborhoodGetPayload<
    S extends boolean | null | undefined | BusinessNeighborhoodDefaultArgs,
  > = $Result.GetResult<Prisma.$BusinessNeighborhoodPayload, S>;

  type BusinessNeighborhoodCountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = Omit<
    BusinessNeighborhoodFindManyArgs,
    "select" | "include" | "distinct"
  > & {
    select?: BusinessNeighborhoodCountAggregateInputType | true;
  };

  export interface BusinessNeighborhoodDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>["model"]["BusinessNeighborhood"];
      meta: { name: "BusinessNeighborhood" };
    };
    /**
     * Find zero or one BusinessNeighborhood that matches the filter.
     * @param {BusinessNeighborhoodFindUniqueArgs} args - Arguments to find a BusinessNeighborhood
     * @example
     * // Get one BusinessNeighborhood
     * const businessNeighborhood = await prisma.businessNeighborhood.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessNeighborhoodFindUniqueArgs>(
      args: SelectSubset<T, BusinessNeighborhoodFindUniqueArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "findUnique"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find one BusinessNeighborhood that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessNeighborhoodFindUniqueOrThrowArgs} args - Arguments to find a BusinessNeighborhood
     * @example
     * // Get one BusinessNeighborhood
     * const businessNeighborhood = await prisma.businessNeighborhood.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessNeighborhoodFindUniqueOrThrowArgs>(
      args: SelectSubset<T, BusinessNeighborhoodFindUniqueOrThrowArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "findUniqueOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find the first BusinessNeighborhood that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodFindFirstArgs} args - Arguments to find a BusinessNeighborhood
     * @example
     * // Get one BusinessNeighborhood
     * const businessNeighborhood = await prisma.businessNeighborhood.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessNeighborhoodFindFirstArgs>(
      args?: SelectSubset<T, BusinessNeighborhoodFindFirstArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "findFirst"
      > | null,
      null,
      ExtArgs
    >;

    /**
     * Find the first BusinessNeighborhood that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodFindFirstOrThrowArgs} args - Arguments to find a BusinessNeighborhood
     * @example
     * // Get one BusinessNeighborhood
     * const businessNeighborhood = await prisma.businessNeighborhood.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessNeighborhoodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BusinessNeighborhoodFindFirstOrThrowArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "findFirstOrThrow"
      >,
      never,
      ExtArgs
    >;

    /**
     * Find zero or more BusinessNeighborhoods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessNeighborhoods
     * const businessNeighborhoods = await prisma.businessNeighborhood.findMany()
     *
     * // Get first 10 BusinessNeighborhoods
     * const businessNeighborhoods = await prisma.businessNeighborhood.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const businessNeighborhoodWithIdOnly = await prisma.businessNeighborhood.findMany({ select: { id: true } })
     *
     */
    findMany<T extends BusinessNeighborhoodFindManyArgs>(
      args?: SelectSubset<T, BusinessNeighborhoodFindManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "findMany"
      >
    >;

    /**
     * Create a BusinessNeighborhood.
     * @param {BusinessNeighborhoodCreateArgs} args - Arguments to create a BusinessNeighborhood.
     * @example
     * // Create one BusinessNeighborhood
     * const BusinessNeighborhood = await prisma.businessNeighborhood.create({
     *   data: {
     *     // ... data to create a BusinessNeighborhood
     *   }
     * })
     *
     */
    create<T extends BusinessNeighborhoodCreateArgs>(
      args: SelectSubset<T, BusinessNeighborhoodCreateArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "create"
      >,
      never,
      ExtArgs
    >;

    /**
     * Create many BusinessNeighborhoods.
     * @param {BusinessNeighborhoodCreateManyArgs} args - Arguments to create many BusinessNeighborhoods.
     * @example
     * // Create many BusinessNeighborhoods
     * const businessNeighborhood = await prisma.businessNeighborhood.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends BusinessNeighborhoodCreateManyArgs>(
      args?: SelectSubset<T, BusinessNeighborhoodCreateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many BusinessNeighborhoods and returns the data saved in the database.
     * @param {BusinessNeighborhoodCreateManyAndReturnArgs} args - Arguments to create many BusinessNeighborhoods.
     * @example
     * // Create many BusinessNeighborhoods
     * const businessNeighborhood = await prisma.businessNeighborhood.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many BusinessNeighborhoods and only return the `id`
     * const businessNeighborhoodWithIdOnly = await prisma.businessNeighborhood.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends BusinessNeighborhoodCreateManyAndReturnArgs>(
      args?: SelectSubset<
        T,
        BusinessNeighborhoodCreateManyAndReturnArgs<ExtArgs>
      >,
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "createManyAndReturn"
      >
    >;

    /**
     * Delete a BusinessNeighborhood.
     * @param {BusinessNeighborhoodDeleteArgs} args - Arguments to delete one BusinessNeighborhood.
     * @example
     * // Delete one BusinessNeighborhood
     * const BusinessNeighborhood = await prisma.businessNeighborhood.delete({
     *   where: {
     *     // ... filter to delete one BusinessNeighborhood
     *   }
     * })
     *
     */
    delete<T extends BusinessNeighborhoodDeleteArgs>(
      args: SelectSubset<T, BusinessNeighborhoodDeleteArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "delete"
      >,
      never,
      ExtArgs
    >;

    /**
     * Update one BusinessNeighborhood.
     * @param {BusinessNeighborhoodUpdateArgs} args - Arguments to update one BusinessNeighborhood.
     * @example
     * // Update one BusinessNeighborhood
     * const businessNeighborhood = await prisma.businessNeighborhood.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends BusinessNeighborhoodUpdateArgs>(
      args: SelectSubset<T, BusinessNeighborhoodUpdateArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "update"
      >,
      never,
      ExtArgs
    >;

    /**
     * Delete zero or more BusinessNeighborhoods.
     * @param {BusinessNeighborhoodDeleteManyArgs} args - Arguments to filter BusinessNeighborhoods to delete.
     * @example
     * // Delete a few BusinessNeighborhoods
     * const { count } = await prisma.businessNeighborhood.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends BusinessNeighborhoodDeleteManyArgs>(
      args?: SelectSubset<T, BusinessNeighborhoodDeleteManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more BusinessNeighborhoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessNeighborhoods
     * const businessNeighborhood = await prisma.businessNeighborhood.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends BusinessNeighborhoodUpdateManyArgs>(
      args: SelectSubset<T, BusinessNeighborhoodUpdateManyArgs<ExtArgs>>,
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create or update one BusinessNeighborhood.
     * @param {BusinessNeighborhoodUpsertArgs} args - Arguments to update or create a BusinessNeighborhood.
     * @example
     * // Update or create a BusinessNeighborhood
     * const businessNeighborhood = await prisma.businessNeighborhood.upsert({
     *   create: {
     *     // ... data to create a BusinessNeighborhood
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessNeighborhood we want to update
     *   }
     * })
     */
    upsert<T extends BusinessNeighborhoodUpsertArgs>(
      args: SelectSubset<T, BusinessNeighborhoodUpsertArgs<ExtArgs>>,
    ): Prisma__BusinessNeighborhoodClient<
      $Result.GetResult<
        Prisma.$BusinessNeighborhoodPayload<ExtArgs>,
        T,
        "upsert"
      >,
      never,
      ExtArgs
    >;

    /**
     * Count the number of BusinessNeighborhoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodCountArgs} args - Arguments to filter BusinessNeighborhoods to count.
     * @example
     * // Count the number of BusinessNeighborhoods
     * const count = await prisma.businessNeighborhood.count({
     *   where: {
     *     // ... the filter for the BusinessNeighborhoods we want to count
     *   }
     * })
     **/
    count<T extends BusinessNeighborhoodCountArgs>(
      args?: Subset<T, BusinessNeighborhoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<
              T["select"],
              BusinessNeighborhoodCountAggregateOutputType
            >
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a BusinessNeighborhood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends BusinessNeighborhoodAggregateArgs>(
      args: Subset<T, BusinessNeighborhoodAggregateArgs>,
    ): Prisma.PrismaPromise<GetBusinessNeighborhoodAggregateType<T>>;

    /**
     * Group by BusinessNeighborhood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessNeighborhoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends BusinessNeighborhoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessNeighborhoodGroupByArgs["orderBy"] }
        : { orderBy?: BusinessNeighborhoodGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends MaybeTupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [
                      Error,
                      "Field ",
                      P,
                      ` in "having" needs to be provided in "by"`,
                    ];
            }[HavingFields]
          : "take" extends Keys<T>
            ? "orderBy" extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : "skip" extends Keys<T>
              ? "orderBy" extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, BusinessNeighborhoodGroupByArgs, OrderByArg> &
        InputErrors,
    ): {} extends InputErrors
      ? GetBusinessNeighborhoodGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the BusinessNeighborhood model
     */
    readonly fields: BusinessNeighborhoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessNeighborhood.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessNeighborhoodClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise";
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, BusinessDefaultArgs<ExtArgs>>,
    ): Prisma__BusinessClient<
      | $Result.GetResult<
          Prisma.$BusinessPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    neighborhood<T extends NeighborhoodDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, NeighborhoodDefaultArgs<ExtArgs>>,
    ): Prisma__NeighborhoodClient<
      | $Result.GetResult<
          Prisma.$NeighborhoodPayload<ExtArgs>,
          T,
          "findUniqueOrThrow"
        >
      | Null,
      Null,
      ExtArgs
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null,
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null,
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the BusinessNeighborhood model
   */
  interface BusinessNeighborhoodFieldRefs {
    readonly id: FieldRef<"BusinessNeighborhood", "String">;
    readonly shipping: FieldRef<"BusinessNeighborhood", "Int">;
    readonly active: FieldRef<"BusinessNeighborhood", "Boolean">;
    readonly businessId: FieldRef<"BusinessNeighborhood", "String">;
    readonly neighborhoodId: FieldRef<"BusinessNeighborhood", "String">;
  }

  // Custom InputTypes
  /**
   * BusinessNeighborhood findUnique
   */
  export type BusinessNeighborhoodFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which BusinessNeighborhood to fetch.
     */
    where: BusinessNeighborhoodWhereUniqueInput;
  };

  /**
   * BusinessNeighborhood findUniqueOrThrow
   */
  export type BusinessNeighborhoodFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which BusinessNeighborhood to fetch.
     */
    where: BusinessNeighborhoodWhereUniqueInput;
  };

  /**
   * BusinessNeighborhood findFirst
   */
  export type BusinessNeighborhoodFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which BusinessNeighborhood to fetch.
     */
    where?: BusinessNeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of BusinessNeighborhoods to fetch.
     */
    orderBy?:
      | BusinessNeighborhoodOrderByWithRelationInput
      | BusinessNeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for BusinessNeighborhoods.
     */
    cursor?: BusinessNeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` BusinessNeighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` BusinessNeighborhoods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of BusinessNeighborhoods.
     */
    distinct?:
      | BusinessNeighborhoodScalarFieldEnum
      | BusinessNeighborhoodScalarFieldEnum[];
  };

  /**
   * BusinessNeighborhood findFirstOrThrow
   */
  export type BusinessNeighborhoodFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which BusinessNeighborhood to fetch.
     */
    where?: BusinessNeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of BusinessNeighborhoods to fetch.
     */
    orderBy?:
      | BusinessNeighborhoodOrderByWithRelationInput
      | BusinessNeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for BusinessNeighborhoods.
     */
    cursor?: BusinessNeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` BusinessNeighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` BusinessNeighborhoods.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of BusinessNeighborhoods.
     */
    distinct?:
      | BusinessNeighborhoodScalarFieldEnum
      | BusinessNeighborhoodScalarFieldEnum[];
  };

  /**
   * BusinessNeighborhood findMany
   */
  export type BusinessNeighborhoodFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter, which BusinessNeighborhoods to fetch.
     */
    where?: BusinessNeighborhoodWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of BusinessNeighborhoods to fetch.
     */
    orderBy?:
      | BusinessNeighborhoodOrderByWithRelationInput
      | BusinessNeighborhoodOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing BusinessNeighborhoods.
     */
    cursor?: BusinessNeighborhoodWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` BusinessNeighborhoods from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` BusinessNeighborhoods.
     */
    skip?: number;
    distinct?:
      | BusinessNeighborhoodScalarFieldEnum
      | BusinessNeighborhoodScalarFieldEnum[];
  };

  /**
   * BusinessNeighborhood create
   */
  export type BusinessNeighborhoodCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * The data needed to create a BusinessNeighborhood.
     */
    data: XOR<
      BusinessNeighborhoodCreateInput,
      BusinessNeighborhoodUncheckedCreateInput
    >;
  };

  /**
   * BusinessNeighborhood createMany
   */
  export type BusinessNeighborhoodCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many BusinessNeighborhoods.
     */
    data:
      | BusinessNeighborhoodCreateManyInput
      | BusinessNeighborhoodCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * BusinessNeighborhood createManyAndReturn
   */
  export type BusinessNeighborhoodCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * The data used to create many BusinessNeighborhoods.
     */
    data:
      | BusinessNeighborhoodCreateManyInput
      | BusinessNeighborhoodCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * BusinessNeighborhood update
   */
  export type BusinessNeighborhoodUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * The data needed to update a BusinessNeighborhood.
     */
    data: XOR<
      BusinessNeighborhoodUpdateInput,
      BusinessNeighborhoodUncheckedUpdateInput
    >;
    /**
     * Choose, which BusinessNeighborhood to update.
     */
    where: BusinessNeighborhoodWhereUniqueInput;
  };

  /**
   * BusinessNeighborhood updateMany
   */
  export type BusinessNeighborhoodUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update BusinessNeighborhoods.
     */
    data: XOR<
      BusinessNeighborhoodUpdateManyMutationInput,
      BusinessNeighborhoodUncheckedUpdateManyInput
    >;
    /**
     * Filter which BusinessNeighborhoods to update
     */
    where?: BusinessNeighborhoodWhereInput;
  };

  /**
   * BusinessNeighborhood upsert
   */
  export type BusinessNeighborhoodUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * The filter to search for the BusinessNeighborhood to update in case it exists.
     */
    where: BusinessNeighborhoodWhereUniqueInput;
    /**
     * In case the BusinessNeighborhood found by the `where` argument doesn't exist, create a new BusinessNeighborhood with this data.
     */
    create: XOR<
      BusinessNeighborhoodCreateInput,
      BusinessNeighborhoodUncheckedCreateInput
    >;
    /**
     * In case the BusinessNeighborhood was found with the provided `where` argument, update it with this data.
     */
    update: XOR<
      BusinessNeighborhoodUpdateInput,
      BusinessNeighborhoodUncheckedUpdateInput
    >;
  };

  /**
   * BusinessNeighborhood delete
   */
  export type BusinessNeighborhoodDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
    /**
     * Filter which BusinessNeighborhood to delete.
     */
    where: BusinessNeighborhoodWhereUniqueInput;
  };

  /**
   * BusinessNeighborhood deleteMany
   */
  export type BusinessNeighborhoodDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which BusinessNeighborhoods to delete
     */
    where?: BusinessNeighborhoodWhereInput;
  };

  /**
   * BusinessNeighborhood without action
   */
  export type BusinessNeighborhoodDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the BusinessNeighborhood
     */
    select?: BusinessNeighborhoodSelect<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessNeighborhoodInclude<ExtArgs> | null;
  };

  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: "ReadUncommitted";
    ReadCommitted: "ReadCommitted";
    RepeatableRead: "RepeatableRead";
    Serializable: "Serializable";
  };

  export type TransactionIsolationLevel =
    (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

  export const BusinessScalarFieldEnum: {
    id: "id";
    name: "name";
    description: "description";
    address: "address";
    phone: "phone";
    howToArrive: "howToArrive";
    coordinates: "coordinates";
    slug: "slug";
    active: "active";
    requestAddress: "requestAddress";
    plan: "plan";
    sendOrderToWhatsapp: "sendOrderToWhatsapp";
    defaultPaymentMethodId: "defaultPaymentMethodId";
  };

  export type BusinessScalarFieldEnum =
    (typeof BusinessScalarFieldEnum)[keyof typeof BusinessScalarFieldEnum];

  export const TelegramBusinessScalarFieldEnum: {
    id: "id";
    groupId: "groupId";
    invitationLink: "invitationLink";
    businessId: "businessId";
  };

  export type TelegramBusinessScalarFieldEnum =
    (typeof TelegramBusinessScalarFieldEnum)[keyof typeof TelegramBusinessScalarFieldEnum];

  export const PaymentMethodScalarFieldEnum: {
    id: "id";
    name: "name";
    type: "type";
    data: "data";
    businessId: "businessId";
  };

  export type PaymentMethodScalarFieldEnum =
    (typeof PaymentMethodScalarFieldEnum)[keyof typeof PaymentMethodScalarFieldEnum];

  export const CategoryScalarFieldEnum: {
    id: "id";
    name: "name";
    slug: "slug";
    active: "active";
    priority: "priority";
    businessId: "businessId";
  };

  export type CategoryScalarFieldEnum =
    (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum];

  export const ProductScalarFieldEnum: {
    id: "id";
    name: "name";
    slug: "slug";
    image: "image";
    description: "description";
    price: "price";
    offerPrice: "offerPrice";
    images: "images";
    active: "active";
    isNew: "isNew";
    priority: "priority";
    stock: "stock";
    allowOrderOutOfStock: "allowOrderOutOfStock";
    isExhaustible: "isExhaustible";
    businessId: "businessId";
    categoryId: "categoryId";
  };

  export type ProductScalarFieldEnum =
    (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum];

  export const UserScalarFieldEnum: {
    id: "id";
    role: "role";
    name: "name";
    phone: "phone";
    email: "email";
    emailVerified: "emailVerified";
    image: "image";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type UserScalarFieldEnum =
    (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

  export const UserBusinessScalarFieldEnum: {
    userId: "userId";
    businessId: "businessId";
    type: "type";
  };

  export type UserBusinessScalarFieldEnum =
    (typeof UserBusinessScalarFieldEnum)[keyof typeof UserBusinessScalarFieldEnum];

  export const InvitationLinkScalarFieldEnum: {
    id: "id";
    code: "code";
    businessId: "businessId";
    createdAt: "createdAt";
  };

  export type InvitationLinkScalarFieldEnum =
    (typeof InvitationLinkScalarFieldEnum)[keyof typeof InvitationLinkScalarFieldEnum];

  export const OrderScalarFieldEnum: {
    id: "id";
    userId: "userId";
    productsDetails: "productsDetails";
    shipping: "shipping";
    hasShipping: "hasShipping";
    total: "total";
    status: "status";
    sentAt: "sentAt";
    position: "position";
    businessId: "businessId";
    identifier: "identifier";
  };

  export type OrderScalarFieldEnum =
    (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum];

  export const OrderProductScalarFieldEnum: {
    productId: "productId";
    orderId: "orderId";
    price: "price";
    position: "position";
    quantity: "quantity";
  };

  export type OrderProductScalarFieldEnum =
    (typeof OrderProductScalarFieldEnum)[keyof typeof OrderProductScalarFieldEnum];

  export const AccountScalarFieldEnum: {
    userId: "userId";
    type: "type";
    provider: "provider";
    providerAccountId: "providerAccountId";
    refresh_token: "refresh_token";
    access_token: "access_token";
    expires_at: "expires_at";
    token_type: "token_type";
    scope: "scope";
    id_token: "id_token";
    session_state: "session_state";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type AccountScalarFieldEnum =
    (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

  export const SessionScalarFieldEnum: {
    sessionToken: "sessionToken";
    userId: "userId";
    expires: "expires";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type SessionScalarFieldEnum =
    (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];

  export const VerificationTokenScalarFieldEnum: {
    identifier: "identifier";
    token: "token";
    expires: "expires";
  };

  export type VerificationTokenScalarFieldEnum =
    (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum];

  export const AuthenticatorScalarFieldEnum: {
    credentialID: "credentialID";
    userId: "userId";
    providerAccountId: "providerAccountId";
    credentialPublicKey: "credentialPublicKey";
    counter: "counter";
    credentialDeviceType: "credentialDeviceType";
    credentialBackedUp: "credentialBackedUp";
    transports: "transports";
  };

  export type AuthenticatorScalarFieldEnum =
    (typeof AuthenticatorScalarFieldEnum)[keyof typeof AuthenticatorScalarFieldEnum];

  export const AddressScalarFieldEnum: {
    id: "id";
    alias: "alias";
    name: "name";
    address: "address";
    city: "city";
    state: "state";
    reference: "reference";
    neighborhoodId: "neighborhoodId";
  };

  export type AddressScalarFieldEnum =
    (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum];

  export const NeighborhoodScalarFieldEnum: {
    id: "id";
    name: "name";
    city: "city";
  };

  export type NeighborhoodScalarFieldEnum =
    (typeof NeighborhoodScalarFieldEnum)[keyof typeof NeighborhoodScalarFieldEnum];

  export const UserAddressScalarFieldEnum: {
    id: "id";
    addressId: "addressId";
    userId: "userId";
    businessId: "businessId";
  };

  export type UserAddressScalarFieldEnum =
    (typeof UserAddressScalarFieldEnum)[keyof typeof UserAddressScalarFieldEnum];

  export const OrderAddressScalarFieldEnum: {
    id: "id";
    addressId: "addressId";
    orderId: "orderId";
  };

  export type OrderAddressScalarFieldEnum =
    (typeof OrderAddressScalarFieldEnum)[keyof typeof OrderAddressScalarFieldEnum];

  export const BusinessNeighborhoodScalarFieldEnum: {
    id: "id";
    shipping: "shipping";
    active: "active";
    businessId: "businessId";
    neighborhoodId: "neighborhoodId";
  };

  export type BusinessNeighborhoodScalarFieldEnum =
    (typeof BusinessNeighborhoodScalarFieldEnum)[keyof typeof BusinessNeighborhoodScalarFieldEnum];

  export const SortOrder: {
    asc: "asc";
    desc: "desc";
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull;
  };

  export type JsonNullValueInput =
    (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput];

  export const QueryMode: {
    default: "default";
    insensitive: "insensitive";
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

  export const NullsOrder: {
    first: "first";
    last: "last";
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

  export const JsonNullValueFilter: {
    DbNull: typeof DbNull;
    JsonNull: typeof JsonNull;
    AnyNull: typeof AnyNull;
  };

  export type JsonNullValueFilter =
    (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

  /**
   * Field references
   */

  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "String"
  >;

  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "String[]"
  >;

  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Float[]"
  >;

  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Float"
  >;

  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Boolean"
  >;

  /**
   * Reference to a field of type 'BusinessPlan'
   */
  export type EnumBusinessPlanFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "BusinessPlan"
  >;

  /**
   * Reference to a field of type 'BusinessPlan[]'
   */
  export type ListEnumBusinessPlanFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "BusinessPlan[]">;

  /**
   * Reference to a field of type 'PaymentMethodType'
   */
  export type EnumPaymentMethodTypeFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "PaymentMethodType">;

  /**
   * Reference to a field of type 'PaymentMethodType[]'
   */
  export type ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "PaymentMethodType[]">;

  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Json"
  >;

  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Int"
  >;

  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Int[]"
  >;

  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "Json[]"
  >;

  /**
   * Reference to a field of type 'UserRoles'
   */
  export type EnumUserRolesFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "UserRoles"
  >;

  /**
   * Reference to a field of type 'UserRoles[]'
   */
  export type ListEnumUserRolesFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "UserRoles[]"
  >;

  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "DateTime"
  >;

  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "DateTime[]"
  >;

  /**
   * Reference to a field of type 'UserBusinessType'
   */
  export type EnumUserBusinessTypeFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "UserBusinessType">;

  /**
   * Reference to a field of type 'UserBusinessType[]'
   */
  export type ListEnumUserBusinessTypeFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "UserBusinessType[]">;

  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    "OrderStatus"
  >;

  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> =
    FieldRefInputType<$PrismaModel, "OrderStatus[]">;

  /**
   * Deep Input Types
   */

  export type BusinessWhereInput = {
    AND?: BusinessWhereInput | BusinessWhereInput[];
    OR?: BusinessWhereInput[];
    NOT?: BusinessWhereInput | BusinessWhereInput[];
    id?: StringFilter<"Business"> | string;
    name?: StringFilter<"Business"> | string;
    description?: StringNullableFilter<"Business"> | string | null;
    address?: StringNullableFilter<"Business"> | string | null;
    phone?: StringNullableFilter<"Business"> | string | null;
    howToArrive?: StringNullableFilter<"Business"> | string | null;
    coordinates?: FloatNullableListFilter<"Business">;
    slug?: StringNullableFilter<"Business"> | string | null;
    active?: BoolFilter<"Business"> | boolean;
    requestAddress?: BoolFilter<"Business"> | boolean;
    plan?: EnumBusinessPlanFilter<"Business"> | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFilter<"Business"> | boolean;
    defaultPaymentMethodId?: StringNullableFilter<"Business"> | string | null;
    defaultPaymentMethod?: XOR<
      PaymentMethodNullableRelationFilter,
      PaymentMethodWhereInput
    > | null;
    telegram?: XOR<
      TelegramBusinessNullableRelationFilter,
      TelegramBusinessWhereInput
    > | null;
    categories?: CategoryListRelationFilter;
    products?: ProductListRelationFilter;
    orders?: OrderListRelationFilter;
    users?: UserBusinessListRelationFilter;
    businessNeighborhood?: BusinessNeighborhoodListRelationFilter;
    userAddress?: UserAddressListRelationFilter;
    paymentMethod?: PaymentMethodListRelationFilter;
    invitationLinks?: InvitationLinkListRelationFilter;
  };

  export type BusinessOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrderInput | SortOrder;
    address?: SortOrderInput | SortOrder;
    phone?: SortOrderInput | SortOrder;
    howToArrive?: SortOrderInput | SortOrder;
    coordinates?: SortOrder;
    slug?: SortOrderInput | SortOrder;
    active?: SortOrder;
    requestAddress?: SortOrder;
    plan?: SortOrder;
    sendOrderToWhatsapp?: SortOrder;
    defaultPaymentMethodId?: SortOrderInput | SortOrder;
    defaultPaymentMethod?: PaymentMethodOrderByWithRelationInput;
    telegram?: TelegramBusinessOrderByWithRelationInput;
    categories?: CategoryOrderByRelationAggregateInput;
    products?: ProductOrderByRelationAggregateInput;
    orders?: OrderOrderByRelationAggregateInput;
    users?: UserBusinessOrderByRelationAggregateInput;
    businessNeighborhood?: BusinessNeighborhoodOrderByRelationAggregateInput;
    userAddress?: UserAddressOrderByRelationAggregateInput;
    paymentMethod?: PaymentMethodOrderByRelationAggregateInput;
    invitationLinks?: InvitationLinkOrderByRelationAggregateInput;
  };

  export type BusinessWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      slug?: string;
      defaultPaymentMethodId?: string;
      AND?: BusinessWhereInput | BusinessWhereInput[];
      OR?: BusinessWhereInput[];
      NOT?: BusinessWhereInput | BusinessWhereInput[];
      name?: StringFilter<"Business"> | string;
      description?: StringNullableFilter<"Business"> | string | null;
      address?: StringNullableFilter<"Business"> | string | null;
      phone?: StringNullableFilter<"Business"> | string | null;
      howToArrive?: StringNullableFilter<"Business"> | string | null;
      coordinates?: FloatNullableListFilter<"Business">;
      active?: BoolFilter<"Business"> | boolean;
      requestAddress?: BoolFilter<"Business"> | boolean;
      plan?: EnumBusinessPlanFilter<"Business"> | $Enums.BusinessPlan;
      sendOrderToWhatsapp?: BoolFilter<"Business"> | boolean;
      defaultPaymentMethod?: XOR<
        PaymentMethodNullableRelationFilter,
        PaymentMethodWhereInput
      > | null;
      telegram?: XOR<
        TelegramBusinessNullableRelationFilter,
        TelegramBusinessWhereInput
      > | null;
      categories?: CategoryListRelationFilter;
      products?: ProductListRelationFilter;
      orders?: OrderListRelationFilter;
      users?: UserBusinessListRelationFilter;
      businessNeighborhood?: BusinessNeighborhoodListRelationFilter;
      userAddress?: UserAddressListRelationFilter;
      paymentMethod?: PaymentMethodListRelationFilter;
      invitationLinks?: InvitationLinkListRelationFilter;
    },
    "id" | "slug" | "defaultPaymentMethodId"
  >;

  export type BusinessOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrderInput | SortOrder;
    address?: SortOrderInput | SortOrder;
    phone?: SortOrderInput | SortOrder;
    howToArrive?: SortOrderInput | SortOrder;
    coordinates?: SortOrder;
    slug?: SortOrderInput | SortOrder;
    active?: SortOrder;
    requestAddress?: SortOrder;
    plan?: SortOrder;
    sendOrderToWhatsapp?: SortOrder;
    defaultPaymentMethodId?: SortOrderInput | SortOrder;
    _count?: BusinessCountOrderByAggregateInput;
    _avg?: BusinessAvgOrderByAggregateInput;
    _max?: BusinessMaxOrderByAggregateInput;
    _min?: BusinessMinOrderByAggregateInput;
    _sum?: BusinessSumOrderByAggregateInput;
  };

  export type BusinessScalarWhereWithAggregatesInput = {
    AND?:
      | BusinessScalarWhereWithAggregatesInput
      | BusinessScalarWhereWithAggregatesInput[];
    OR?: BusinessScalarWhereWithAggregatesInput[];
    NOT?:
      | BusinessScalarWhereWithAggregatesInput
      | BusinessScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Business"> | string;
    name?: StringWithAggregatesFilter<"Business"> | string;
    description?:
      | StringNullableWithAggregatesFilter<"Business">
      | string
      | null;
    address?: StringNullableWithAggregatesFilter<"Business"> | string | null;
    phone?: StringNullableWithAggregatesFilter<"Business"> | string | null;
    howToArrive?:
      | StringNullableWithAggregatesFilter<"Business">
      | string
      | null;
    coordinates?: FloatNullableListFilter<"Business">;
    slug?: StringNullableWithAggregatesFilter<"Business"> | string | null;
    active?: BoolWithAggregatesFilter<"Business"> | boolean;
    requestAddress?: BoolWithAggregatesFilter<"Business"> | boolean;
    plan?:
      | EnumBusinessPlanWithAggregatesFilter<"Business">
      | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolWithAggregatesFilter<"Business"> | boolean;
    defaultPaymentMethodId?:
      | StringNullableWithAggregatesFilter<"Business">
      | string
      | null;
  };

  export type TelegramBusinessWhereInput = {
    AND?: TelegramBusinessWhereInput | TelegramBusinessWhereInput[];
    OR?: TelegramBusinessWhereInput[];
    NOT?: TelegramBusinessWhereInput | TelegramBusinessWhereInput[];
    id?: StringFilter<"TelegramBusiness"> | string;
    groupId?: StringFilter<"TelegramBusiness"> | string;
    invitationLink?: StringFilter<"TelegramBusiness"> | string;
    businessId?: StringFilter<"TelegramBusiness"> | string;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
  };

  export type TelegramBusinessOrderByWithRelationInput = {
    id?: SortOrder;
    groupId?: SortOrder;
    invitationLink?: SortOrder;
    businessId?: SortOrder;
    business?: BusinessOrderByWithRelationInput;
  };

  export type TelegramBusinessWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      businessId?: string;
      AND?: TelegramBusinessWhereInput | TelegramBusinessWhereInput[];
      OR?: TelegramBusinessWhereInput[];
      NOT?: TelegramBusinessWhereInput | TelegramBusinessWhereInput[];
      groupId?: StringFilter<"TelegramBusiness"> | string;
      invitationLink?: StringFilter<"TelegramBusiness"> | string;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    },
    "id" | "businessId"
  >;

  export type TelegramBusinessOrderByWithAggregationInput = {
    id?: SortOrder;
    groupId?: SortOrder;
    invitationLink?: SortOrder;
    businessId?: SortOrder;
    _count?: TelegramBusinessCountOrderByAggregateInput;
    _max?: TelegramBusinessMaxOrderByAggregateInput;
    _min?: TelegramBusinessMinOrderByAggregateInput;
  };

  export type TelegramBusinessScalarWhereWithAggregatesInput = {
    AND?:
      | TelegramBusinessScalarWhereWithAggregatesInput
      | TelegramBusinessScalarWhereWithAggregatesInput[];
    OR?: TelegramBusinessScalarWhereWithAggregatesInput[];
    NOT?:
      | TelegramBusinessScalarWhereWithAggregatesInput
      | TelegramBusinessScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"TelegramBusiness"> | string;
    groupId?: StringWithAggregatesFilter<"TelegramBusiness"> | string;
    invitationLink?: StringWithAggregatesFilter<"TelegramBusiness"> | string;
    businessId?: StringWithAggregatesFilter<"TelegramBusiness"> | string;
  };

  export type PaymentMethodWhereInput = {
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[];
    OR?: PaymentMethodWhereInput[];
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[];
    id?: StringFilter<"PaymentMethod"> | string;
    name?: StringFilter<"PaymentMethod"> | string;
    type?:
      | EnumPaymentMethodTypeFilter<"PaymentMethod">
      | $Enums.PaymentMethodType;
    data?: JsonFilter<"PaymentMethod">;
    businessId?: StringFilter<"PaymentMethod"> | string;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    defaultBusiness?: XOR<
      BusinessNullableRelationFilter,
      BusinessWhereInput
    > | null;
  };

  export type PaymentMethodOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    type?: SortOrder;
    data?: SortOrder;
    businessId?: SortOrder;
    business?: BusinessOrderByWithRelationInput;
    defaultBusiness?: BusinessOrderByWithRelationInput;
  };

  export type PaymentMethodWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[];
      OR?: PaymentMethodWhereInput[];
      NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[];
      name?: StringFilter<"PaymentMethod"> | string;
      type?:
        | EnumPaymentMethodTypeFilter<"PaymentMethod">
        | $Enums.PaymentMethodType;
      data?: JsonFilter<"PaymentMethod">;
      businessId?: StringFilter<"PaymentMethod"> | string;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
      defaultBusiness?: XOR<
        BusinessNullableRelationFilter,
        BusinessWhereInput
      > | null;
    },
    "id"
  >;

  export type PaymentMethodOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    type?: SortOrder;
    data?: SortOrder;
    businessId?: SortOrder;
    _count?: PaymentMethodCountOrderByAggregateInput;
    _max?: PaymentMethodMaxOrderByAggregateInput;
    _min?: PaymentMethodMinOrderByAggregateInput;
  };

  export type PaymentMethodScalarWhereWithAggregatesInput = {
    AND?:
      | PaymentMethodScalarWhereWithAggregatesInput
      | PaymentMethodScalarWhereWithAggregatesInput[];
    OR?: PaymentMethodScalarWhereWithAggregatesInput[];
    NOT?:
      | PaymentMethodScalarWhereWithAggregatesInput
      | PaymentMethodScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"PaymentMethod"> | string;
    name?: StringWithAggregatesFilter<"PaymentMethod"> | string;
    type?:
      | EnumPaymentMethodTypeWithAggregatesFilter<"PaymentMethod">
      | $Enums.PaymentMethodType;
    data?: JsonWithAggregatesFilter<"PaymentMethod">;
    businessId?: StringWithAggregatesFilter<"PaymentMethod"> | string;
  };

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[];
    OR?: CategoryWhereInput[];
    NOT?: CategoryWhereInput | CategoryWhereInput[];
    id?: StringFilter<"Category"> | string;
    name?: StringFilter<"Category"> | string;
    slug?: StringNullableFilter<"Category"> | string | null;
    active?: BoolFilter<"Category"> | boolean;
    priority?: IntFilter<"Category"> | number;
    businessId?: StringFilter<"Category"> | string;
    products?: ProductListRelationFilter;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
  };

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrderInput | SortOrder;
    active?: SortOrder;
    priority?: SortOrder;
    businessId?: SortOrder;
    products?: ProductOrderByRelationAggregateInput;
    business?: BusinessOrderByWithRelationInput;
  };

  export type CategoryWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      slug?: string;
      AND?: CategoryWhereInput | CategoryWhereInput[];
      OR?: CategoryWhereInput[];
      NOT?: CategoryWhereInput | CategoryWhereInput[];
      name?: StringFilter<"Category"> | string;
      active?: BoolFilter<"Category"> | boolean;
      priority?: IntFilter<"Category"> | number;
      businessId?: StringFilter<"Category"> | string;
      products?: ProductListRelationFilter;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    },
    "id" | "slug"
  >;

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrderInput | SortOrder;
    active?: SortOrder;
    priority?: SortOrder;
    businessId?: SortOrder;
    _count?: CategoryCountOrderByAggregateInput;
    _avg?: CategoryAvgOrderByAggregateInput;
    _max?: CategoryMaxOrderByAggregateInput;
    _min?: CategoryMinOrderByAggregateInput;
    _sum?: CategorySumOrderByAggregateInput;
  };

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?:
      | CategoryScalarWhereWithAggregatesInput
      | CategoryScalarWhereWithAggregatesInput[];
    OR?: CategoryScalarWhereWithAggregatesInput[];
    NOT?:
      | CategoryScalarWhereWithAggregatesInput
      | CategoryScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Category"> | string;
    name?: StringWithAggregatesFilter<"Category"> | string;
    slug?: StringNullableWithAggregatesFilter<"Category"> | string | null;
    active?: BoolWithAggregatesFilter<"Category"> | boolean;
    priority?: IntWithAggregatesFilter<"Category"> | number;
    businessId?: StringWithAggregatesFilter<"Category"> | string;
  };

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[];
    OR?: ProductWhereInput[];
    NOT?: ProductWhereInput | ProductWhereInput[];
    id?: StringFilter<"Product"> | string;
    name?: StringFilter<"Product"> | string;
    slug?: StringNullableFilter<"Product"> | string | null;
    image?: JsonFilter<"Product">;
    description?: StringFilter<"Product"> | string;
    price?: IntFilter<"Product"> | number;
    offerPrice?: IntNullableFilter<"Product"> | number | null;
    images?: JsonNullableListFilter<"Product">;
    active?: BoolFilter<"Product"> | boolean;
    isNew?: BoolFilter<"Product"> | boolean;
    priority?: IntFilter<"Product"> | number;
    stock?: IntFilter<"Product"> | number;
    allowOrderOutOfStock?: BoolFilter<"Product"> | boolean;
    isExhaustible?: BoolFilter<"Product"> | boolean;
    businessId?: StringFilter<"Product"> | string;
    categoryId?: StringNullableFilter<"Product"> | string | null;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null;
    orderItems?: OrderProductListRelationFilter;
  };

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrderInput | SortOrder;
    image?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    offerPrice?: SortOrderInput | SortOrder;
    images?: SortOrder;
    active?: SortOrder;
    isNew?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
    allowOrderOutOfStock?: SortOrder;
    isExhaustible?: SortOrder;
    businessId?: SortOrder;
    categoryId?: SortOrderInput | SortOrder;
    business?: BusinessOrderByWithRelationInput;
    category?: CategoryOrderByWithRelationInput;
    orderItems?: OrderProductOrderByRelationAggregateInput;
  };

  export type ProductWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      slug?: string;
      AND?: ProductWhereInput | ProductWhereInput[];
      OR?: ProductWhereInput[];
      NOT?: ProductWhereInput | ProductWhereInput[];
      name?: StringFilter<"Product"> | string;
      image?: JsonFilter<"Product">;
      description?: StringFilter<"Product"> | string;
      price?: IntFilter<"Product"> | number;
      offerPrice?: IntNullableFilter<"Product"> | number | null;
      images?: JsonNullableListFilter<"Product">;
      active?: BoolFilter<"Product"> | boolean;
      isNew?: BoolFilter<"Product"> | boolean;
      priority?: IntFilter<"Product"> | number;
      stock?: IntFilter<"Product"> | number;
      allowOrderOutOfStock?: BoolFilter<"Product"> | boolean;
      isExhaustible?: BoolFilter<"Product"> | boolean;
      businessId?: StringFilter<"Product"> | string;
      categoryId?: StringNullableFilter<"Product"> | string | null;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
      category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null;
      orderItems?: OrderProductListRelationFilter;
    },
    "id" | "slug"
  >;

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrderInput | SortOrder;
    image?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    offerPrice?: SortOrderInput | SortOrder;
    images?: SortOrder;
    active?: SortOrder;
    isNew?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
    allowOrderOutOfStock?: SortOrder;
    isExhaustible?: SortOrder;
    businessId?: SortOrder;
    categoryId?: SortOrderInput | SortOrder;
    _count?: ProductCountOrderByAggregateInput;
    _avg?: ProductAvgOrderByAggregateInput;
    _max?: ProductMaxOrderByAggregateInput;
    _min?: ProductMinOrderByAggregateInput;
    _sum?: ProductSumOrderByAggregateInput;
  };

  export type ProductScalarWhereWithAggregatesInput = {
    AND?:
      | ProductScalarWhereWithAggregatesInput
      | ProductScalarWhereWithAggregatesInput[];
    OR?: ProductScalarWhereWithAggregatesInput[];
    NOT?:
      | ProductScalarWhereWithAggregatesInput
      | ProductScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Product"> | string;
    name?: StringWithAggregatesFilter<"Product"> | string;
    slug?: StringNullableWithAggregatesFilter<"Product"> | string | null;
    image?: JsonWithAggregatesFilter<"Product">;
    description?: StringWithAggregatesFilter<"Product"> | string;
    price?: IntWithAggregatesFilter<"Product"> | number;
    offerPrice?: IntNullableWithAggregatesFilter<"Product"> | number | null;
    images?: JsonNullableListFilter<"Product">;
    active?: BoolWithAggregatesFilter<"Product"> | boolean;
    isNew?: BoolWithAggregatesFilter<"Product"> | boolean;
    priority?: IntWithAggregatesFilter<"Product"> | number;
    stock?: IntWithAggregatesFilter<"Product"> | number;
    allowOrderOutOfStock?: BoolWithAggregatesFilter<"Product"> | boolean;
    isExhaustible?: BoolWithAggregatesFilter<"Product"> | boolean;
    businessId?: StringWithAggregatesFilter<"Product"> | string;
    categoryId?: StringNullableWithAggregatesFilter<"Product"> | string | null;
  };

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[];
    OR?: UserWhereInput[];
    NOT?: UserWhereInput | UserWhereInput[];
    id?: StringFilter<"User"> | string;
    role?: EnumUserRolesFilter<"User"> | $Enums.UserRoles;
    name?: StringNullableFilter<"User"> | string | null;
    phone?: StringNullableFilter<"User"> | string | null;
    email?: StringFilter<"User"> | string;
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null;
    image?: StringNullableFilter<"User"> | string | null;
    createdAt?: DateTimeFilter<"User"> | Date | string;
    updatedAt?: DateTimeFilter<"User"> | Date | string;
    orders?: OrderListRelationFilter;
    accounts?: AccountListRelationFilter;
    sessions?: SessionListRelationFilter;
    Authenticator?: AuthenticatorListRelationFilter;
    business?: UserBusinessListRelationFilter;
    address?: UserAddressListRelationFilter;
  };

  export type UserOrderByWithRelationInput = {
    id?: SortOrder;
    role?: SortOrder;
    name?: SortOrderInput | SortOrder;
    phone?: SortOrderInput | SortOrder;
    email?: SortOrder;
    emailVerified?: SortOrderInput | SortOrder;
    image?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    orders?: OrderOrderByRelationAggregateInput;
    accounts?: AccountOrderByRelationAggregateInput;
    sessions?: SessionOrderByRelationAggregateInput;
    Authenticator?: AuthenticatorOrderByRelationAggregateInput;
    business?: UserBusinessOrderByRelationAggregateInput;
    address?: UserAddressOrderByRelationAggregateInput;
  };

  export type UserWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      email?: string;
      AND?: UserWhereInput | UserWhereInput[];
      OR?: UserWhereInput[];
      NOT?: UserWhereInput | UserWhereInput[];
      role?: EnumUserRolesFilter<"User"> | $Enums.UserRoles;
      name?: StringNullableFilter<"User"> | string | null;
      phone?: StringNullableFilter<"User"> | string | null;
      emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null;
      image?: StringNullableFilter<"User"> | string | null;
      createdAt?: DateTimeFilter<"User"> | Date | string;
      updatedAt?: DateTimeFilter<"User"> | Date | string;
      orders?: OrderListRelationFilter;
      accounts?: AccountListRelationFilter;
      sessions?: SessionListRelationFilter;
      Authenticator?: AuthenticatorListRelationFilter;
      business?: UserBusinessListRelationFilter;
      address?: UserAddressListRelationFilter;
    },
    "id" | "email"
  >;

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder;
    role?: SortOrder;
    name?: SortOrderInput | SortOrder;
    phone?: SortOrderInput | SortOrder;
    email?: SortOrder;
    emailVerified?: SortOrderInput | SortOrder;
    image?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: UserCountOrderByAggregateInput;
    _max?: UserMaxOrderByAggregateInput;
    _min?: UserMinOrderByAggregateInput;
  };

  export type UserScalarWhereWithAggregatesInput = {
    AND?:
      | UserScalarWhereWithAggregatesInput
      | UserScalarWhereWithAggregatesInput[];
    OR?: UserScalarWhereWithAggregatesInput[];
    NOT?:
      | UserScalarWhereWithAggregatesInput
      | UserScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"User"> | string;
    role?: EnumUserRolesWithAggregatesFilter<"User"> | $Enums.UserRoles;
    name?: StringNullableWithAggregatesFilter<"User"> | string | null;
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null;
    email?: StringWithAggregatesFilter<"User"> | string;
    emailVerified?:
      | DateTimeNullableWithAggregatesFilter<"User">
      | Date
      | string
      | null;
    image?: StringNullableWithAggregatesFilter<"User"> | string | null;
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string;
  };

  export type UserBusinessWhereInput = {
    AND?: UserBusinessWhereInput | UserBusinessWhereInput[];
    OR?: UserBusinessWhereInput[];
    NOT?: UserBusinessWhereInput | UserBusinessWhereInput[];
    userId?: StringFilter<"UserBusiness"> | string;
    businessId?: StringFilter<"UserBusiness"> | string;
    type?: EnumUserBusinessTypeFilter<"UserBusiness"> | $Enums.UserBusinessType;
    user?: XOR<UserRelationFilter, UserWhereInput>;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
  };

  export type UserBusinessOrderByWithRelationInput = {
    userId?: SortOrder;
    businessId?: SortOrder;
    type?: SortOrder;
    user?: UserOrderByWithRelationInput;
    business?: BusinessOrderByWithRelationInput;
  };

  export type UserBusinessWhereUniqueInput = Prisma.AtLeast<
    {
      userId_businessId?: UserBusinessUserIdBusinessIdCompoundUniqueInput;
      AND?: UserBusinessWhereInput | UserBusinessWhereInput[];
      OR?: UserBusinessWhereInput[];
      NOT?: UserBusinessWhereInput | UserBusinessWhereInput[];
      userId?: StringFilter<"UserBusiness"> | string;
      businessId?: StringFilter<"UserBusiness"> | string;
      type?:
        | EnumUserBusinessTypeFilter<"UserBusiness">
        | $Enums.UserBusinessType;
      user?: XOR<UserRelationFilter, UserWhereInput>;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    },
    "userId_businessId"
  >;

  export type UserBusinessOrderByWithAggregationInput = {
    userId?: SortOrder;
    businessId?: SortOrder;
    type?: SortOrder;
    _count?: UserBusinessCountOrderByAggregateInput;
    _max?: UserBusinessMaxOrderByAggregateInput;
    _min?: UserBusinessMinOrderByAggregateInput;
  };

  export type UserBusinessScalarWhereWithAggregatesInput = {
    AND?:
      | UserBusinessScalarWhereWithAggregatesInput
      | UserBusinessScalarWhereWithAggregatesInput[];
    OR?: UserBusinessScalarWhereWithAggregatesInput[];
    NOT?:
      | UserBusinessScalarWhereWithAggregatesInput
      | UserBusinessScalarWhereWithAggregatesInput[];
    userId?: StringWithAggregatesFilter<"UserBusiness"> | string;
    businessId?: StringWithAggregatesFilter<"UserBusiness"> | string;
    type?:
      | EnumUserBusinessTypeWithAggregatesFilter<"UserBusiness">
      | $Enums.UserBusinessType;
  };

  export type InvitationLinkWhereInput = {
    AND?: InvitationLinkWhereInput | InvitationLinkWhereInput[];
    OR?: InvitationLinkWhereInput[];
    NOT?: InvitationLinkWhereInput | InvitationLinkWhereInput[];
    id?: StringFilter<"InvitationLink"> | string;
    code?: StringFilter<"InvitationLink"> | string;
    businessId?: StringFilter<"InvitationLink"> | string;
    createdAt?: DateTimeFilter<"InvitationLink"> | Date | string;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
  };

  export type InvitationLinkOrderByWithRelationInput = {
    id?: SortOrder;
    code?: SortOrder;
    businessId?: SortOrder;
    createdAt?: SortOrder;
    business?: BusinessOrderByWithRelationInput;
  };

  export type InvitationLinkWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: InvitationLinkWhereInput | InvitationLinkWhereInput[];
      OR?: InvitationLinkWhereInput[];
      NOT?: InvitationLinkWhereInput | InvitationLinkWhereInput[];
      code?: StringFilter<"InvitationLink"> | string;
      businessId?: StringFilter<"InvitationLink"> | string;
      createdAt?: DateTimeFilter<"InvitationLink"> | Date | string;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    },
    "id"
  >;

  export type InvitationLinkOrderByWithAggregationInput = {
    id?: SortOrder;
    code?: SortOrder;
    businessId?: SortOrder;
    createdAt?: SortOrder;
    _count?: InvitationLinkCountOrderByAggregateInput;
    _max?: InvitationLinkMaxOrderByAggregateInput;
    _min?: InvitationLinkMinOrderByAggregateInput;
  };

  export type InvitationLinkScalarWhereWithAggregatesInput = {
    AND?:
      | InvitationLinkScalarWhereWithAggregatesInput
      | InvitationLinkScalarWhereWithAggregatesInput[];
    OR?: InvitationLinkScalarWhereWithAggregatesInput[];
    NOT?:
      | InvitationLinkScalarWhereWithAggregatesInput
      | InvitationLinkScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"InvitationLink"> | string;
    code?: StringWithAggregatesFilter<"InvitationLink"> | string;
    businessId?: StringWithAggregatesFilter<"InvitationLink"> | string;
    createdAt?: DateTimeWithAggregatesFilter<"InvitationLink"> | Date | string;
  };

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[];
    OR?: OrderWhereInput[];
    NOT?: OrderWhereInput | OrderWhereInput[];
    id?: StringFilter<"Order"> | string;
    userId?: StringNullableFilter<"Order"> | string | null;
    productsDetails?: JsonFilter<"Order">;
    shipping?: IntFilter<"Order"> | number;
    hasShipping?: BoolFilter<"Order"> | boolean;
    total?: IntFilter<"Order"> | number;
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus;
    sentAt?: DateTimeNullableFilter<"Order"> | Date | string | null;
    position?: IntNullableFilter<"Order"> | number | null;
    businessId?: StringNullableFilter<"Order"> | string | null;
    identifier?: StringNullableFilter<"Order"> | string | null;
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null;
    items?: OrderProductListRelationFilter;
    business?: XOR<BusinessNullableRelationFilter, BusinessWhereInput> | null;
    orderAddress?: XOR<
      OrderAddressNullableRelationFilter,
      OrderAddressWhereInput
    > | null;
  };

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder;
    userId?: SortOrderInput | SortOrder;
    productsDetails?: SortOrder;
    shipping?: SortOrder;
    hasShipping?: SortOrder;
    total?: SortOrder;
    status?: SortOrder;
    sentAt?: SortOrderInput | SortOrder;
    position?: SortOrderInput | SortOrder;
    businessId?: SortOrderInput | SortOrder;
    identifier?: SortOrderInput | SortOrder;
    user?: UserOrderByWithRelationInput;
    items?: OrderProductOrderByRelationAggregateInput;
    business?: BusinessOrderByWithRelationInput;
    orderAddress?: OrderAddressOrderByWithRelationInput;
  };

  export type OrderWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: OrderWhereInput | OrderWhereInput[];
      OR?: OrderWhereInput[];
      NOT?: OrderWhereInput | OrderWhereInput[];
      userId?: StringNullableFilter<"Order"> | string | null;
      productsDetails?: JsonFilter<"Order">;
      shipping?: IntFilter<"Order"> | number;
      hasShipping?: BoolFilter<"Order"> | boolean;
      total?: IntFilter<"Order"> | number;
      status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus;
      sentAt?: DateTimeNullableFilter<"Order"> | Date | string | null;
      position?: IntNullableFilter<"Order"> | number | null;
      businessId?: StringNullableFilter<"Order"> | string | null;
      identifier?: StringNullableFilter<"Order"> | string | null;
      user?: XOR<UserNullableRelationFilter, UserWhereInput> | null;
      items?: OrderProductListRelationFilter;
      business?: XOR<BusinessNullableRelationFilter, BusinessWhereInput> | null;
      orderAddress?: XOR<
        OrderAddressNullableRelationFilter,
        OrderAddressWhereInput
      > | null;
    },
    "id"
  >;

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder;
    userId?: SortOrderInput | SortOrder;
    productsDetails?: SortOrder;
    shipping?: SortOrder;
    hasShipping?: SortOrder;
    total?: SortOrder;
    status?: SortOrder;
    sentAt?: SortOrderInput | SortOrder;
    position?: SortOrderInput | SortOrder;
    businessId?: SortOrderInput | SortOrder;
    identifier?: SortOrderInput | SortOrder;
    _count?: OrderCountOrderByAggregateInput;
    _avg?: OrderAvgOrderByAggregateInput;
    _max?: OrderMaxOrderByAggregateInput;
    _min?: OrderMinOrderByAggregateInput;
    _sum?: OrderSumOrderByAggregateInput;
  };

  export type OrderScalarWhereWithAggregatesInput = {
    AND?:
      | OrderScalarWhereWithAggregatesInput
      | OrderScalarWhereWithAggregatesInput[];
    OR?: OrderScalarWhereWithAggregatesInput[];
    NOT?:
      | OrderScalarWhereWithAggregatesInput
      | OrderScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Order"> | string;
    userId?: StringNullableWithAggregatesFilter<"Order"> | string | null;
    productsDetails?: JsonWithAggregatesFilter<"Order">;
    shipping?: IntWithAggregatesFilter<"Order"> | number;
    hasShipping?: BoolWithAggregatesFilter<"Order"> | boolean;
    total?: IntWithAggregatesFilter<"Order"> | number;
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus;
    sentAt?:
      | DateTimeNullableWithAggregatesFilter<"Order">
      | Date
      | string
      | null;
    position?: IntNullableWithAggregatesFilter<"Order"> | number | null;
    businessId?: StringNullableWithAggregatesFilter<"Order"> | string | null;
    identifier?: StringNullableWithAggregatesFilter<"Order"> | string | null;
  };

  export type OrderProductWhereInput = {
    AND?: OrderProductWhereInput | OrderProductWhereInput[];
    OR?: OrderProductWhereInput[];
    NOT?: OrderProductWhereInput | OrderProductWhereInput[];
    productId?: StringFilter<"OrderProduct"> | string;
    orderId?: StringFilter<"OrderProduct"> | string;
    price?: IntFilter<"OrderProduct"> | number;
    position?: IntFilter<"OrderProduct"> | number;
    quantity?: IntFilter<"OrderProduct"> | number;
    product?: XOR<ProductRelationFilter, ProductWhereInput>;
    order?: XOR<OrderRelationFilter, OrderWhereInput>;
  };

  export type OrderProductOrderByWithRelationInput = {
    productId?: SortOrder;
    orderId?: SortOrder;
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
    product?: ProductOrderByWithRelationInput;
    order?: OrderOrderByWithRelationInput;
  };

  export type OrderProductWhereUniqueInput = Prisma.AtLeast<
    {
      productId_orderId?: OrderProductProductIdOrderIdCompoundUniqueInput;
      AND?: OrderProductWhereInput | OrderProductWhereInput[];
      OR?: OrderProductWhereInput[];
      NOT?: OrderProductWhereInput | OrderProductWhereInput[];
      productId?: StringFilter<"OrderProduct"> | string;
      orderId?: StringFilter<"OrderProduct"> | string;
      price?: IntFilter<"OrderProduct"> | number;
      position?: IntFilter<"OrderProduct"> | number;
      quantity?: IntFilter<"OrderProduct"> | number;
      product?: XOR<ProductRelationFilter, ProductWhereInput>;
      order?: XOR<OrderRelationFilter, OrderWhereInput>;
    },
    "productId_orderId"
  >;

  export type OrderProductOrderByWithAggregationInput = {
    productId?: SortOrder;
    orderId?: SortOrder;
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
    _count?: OrderProductCountOrderByAggregateInput;
    _avg?: OrderProductAvgOrderByAggregateInput;
    _max?: OrderProductMaxOrderByAggregateInput;
    _min?: OrderProductMinOrderByAggregateInput;
    _sum?: OrderProductSumOrderByAggregateInput;
  };

  export type OrderProductScalarWhereWithAggregatesInput = {
    AND?:
      | OrderProductScalarWhereWithAggregatesInput
      | OrderProductScalarWhereWithAggregatesInput[];
    OR?: OrderProductScalarWhereWithAggregatesInput[];
    NOT?:
      | OrderProductScalarWhereWithAggregatesInput
      | OrderProductScalarWhereWithAggregatesInput[];
    productId?: StringWithAggregatesFilter<"OrderProduct"> | string;
    orderId?: StringWithAggregatesFilter<"OrderProduct"> | string;
    price?: IntWithAggregatesFilter<"OrderProduct"> | number;
    position?: IntWithAggregatesFilter<"OrderProduct"> | number;
    quantity?: IntWithAggregatesFilter<"OrderProduct"> | number;
  };

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[];
    OR?: AccountWhereInput[];
    NOT?: AccountWhereInput | AccountWhereInput[];
    userId?: StringFilter<"Account"> | string;
    type?: StringFilter<"Account"> | string;
    provider?: StringFilter<"Account"> | string;
    providerAccountId?: StringFilter<"Account"> | string;
    refresh_token?: StringNullableFilter<"Account"> | string | null;
    access_token?: StringNullableFilter<"Account"> | string | null;
    expires_at?: IntNullableFilter<"Account"> | number | null;
    token_type?: StringNullableFilter<"Account"> | string | null;
    scope?: StringNullableFilter<"Account"> | string | null;
    id_token?: StringNullableFilter<"Account"> | string | null;
    session_state?: StringNullableFilter<"Account"> | string | null;
    createdAt?: DateTimeFilter<"Account"> | Date | string;
    updatedAt?: DateTimeFilter<"Account"> | Date | string;
    user?: XOR<UserRelationFilter, UserWhereInput>;
  };

  export type AccountOrderByWithRelationInput = {
    userId?: SortOrder;
    type?: SortOrder;
    provider?: SortOrder;
    providerAccountId?: SortOrder;
    refresh_token?: SortOrderInput | SortOrder;
    access_token?: SortOrderInput | SortOrder;
    expires_at?: SortOrderInput | SortOrder;
    token_type?: SortOrderInput | SortOrder;
    scope?: SortOrderInput | SortOrder;
    id_token?: SortOrderInput | SortOrder;
    session_state?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type AccountWhereUniqueInput = Prisma.AtLeast<
    {
      provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput;
      AND?: AccountWhereInput | AccountWhereInput[];
      OR?: AccountWhereInput[];
      NOT?: AccountWhereInput | AccountWhereInput[];
      userId?: StringFilter<"Account"> | string;
      type?: StringFilter<"Account"> | string;
      provider?: StringFilter<"Account"> | string;
      providerAccountId?: StringFilter<"Account"> | string;
      refresh_token?: StringNullableFilter<"Account"> | string | null;
      access_token?: StringNullableFilter<"Account"> | string | null;
      expires_at?: IntNullableFilter<"Account"> | number | null;
      token_type?: StringNullableFilter<"Account"> | string | null;
      scope?: StringNullableFilter<"Account"> | string | null;
      id_token?: StringNullableFilter<"Account"> | string | null;
      session_state?: StringNullableFilter<"Account"> | string | null;
      createdAt?: DateTimeFilter<"Account"> | Date | string;
      updatedAt?: DateTimeFilter<"Account"> | Date | string;
      user?: XOR<UserRelationFilter, UserWhereInput>;
    },
    "provider_providerAccountId"
  >;

  export type AccountOrderByWithAggregationInput = {
    userId?: SortOrder;
    type?: SortOrder;
    provider?: SortOrder;
    providerAccountId?: SortOrder;
    refresh_token?: SortOrderInput | SortOrder;
    access_token?: SortOrderInput | SortOrder;
    expires_at?: SortOrderInput | SortOrder;
    token_type?: SortOrderInput | SortOrder;
    scope?: SortOrderInput | SortOrder;
    id_token?: SortOrderInput | SortOrder;
    session_state?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: AccountCountOrderByAggregateInput;
    _avg?: AccountAvgOrderByAggregateInput;
    _max?: AccountMaxOrderByAggregateInput;
    _min?: AccountMinOrderByAggregateInput;
    _sum?: AccountSumOrderByAggregateInput;
  };

  export type AccountScalarWhereWithAggregatesInput = {
    AND?:
      | AccountScalarWhereWithAggregatesInput
      | AccountScalarWhereWithAggregatesInput[];
    OR?: AccountScalarWhereWithAggregatesInput[];
    NOT?:
      | AccountScalarWhereWithAggregatesInput
      | AccountScalarWhereWithAggregatesInput[];
    userId?: StringWithAggregatesFilter<"Account"> | string;
    type?: StringWithAggregatesFilter<"Account"> | string;
    provider?: StringWithAggregatesFilter<"Account"> | string;
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string;
    refresh_token?:
      | StringNullableWithAggregatesFilter<"Account">
      | string
      | null;
    access_token?:
      | StringNullableWithAggregatesFilter<"Account">
      | string
      | null;
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null;
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null;
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null;
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null;
    session_state?:
      | StringNullableWithAggregatesFilter<"Account">
      | string
      | null;
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string;
  };

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[];
    OR?: SessionWhereInput[];
    NOT?: SessionWhereInput | SessionWhereInput[];
    sessionToken?: StringFilter<"Session"> | string;
    userId?: StringFilter<"Session"> | string;
    expires?: DateTimeFilter<"Session"> | Date | string;
    createdAt?: DateTimeFilter<"Session"> | Date | string;
    updatedAt?: DateTimeFilter<"Session"> | Date | string;
    user?: XOR<UserRelationFilter, UserWhereInput>;
  };

  export type SessionOrderByWithRelationInput = {
    sessionToken?: SortOrder;
    userId?: SortOrder;
    expires?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type SessionWhereUniqueInput = Prisma.AtLeast<
    {
      sessionToken?: string;
      AND?: SessionWhereInput | SessionWhereInput[];
      OR?: SessionWhereInput[];
      NOT?: SessionWhereInput | SessionWhereInput[];
      userId?: StringFilter<"Session"> | string;
      expires?: DateTimeFilter<"Session"> | Date | string;
      createdAt?: DateTimeFilter<"Session"> | Date | string;
      updatedAt?: DateTimeFilter<"Session"> | Date | string;
      user?: XOR<UserRelationFilter, UserWhereInput>;
    },
    "sessionToken"
  >;

  export type SessionOrderByWithAggregationInput = {
    sessionToken?: SortOrder;
    userId?: SortOrder;
    expires?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: SessionCountOrderByAggregateInput;
    _max?: SessionMaxOrderByAggregateInput;
    _min?: SessionMinOrderByAggregateInput;
  };

  export type SessionScalarWhereWithAggregatesInput = {
    AND?:
      | SessionScalarWhereWithAggregatesInput
      | SessionScalarWhereWithAggregatesInput[];
    OR?: SessionScalarWhereWithAggregatesInput[];
    NOT?:
      | SessionScalarWhereWithAggregatesInput
      | SessionScalarWhereWithAggregatesInput[];
    sessionToken?: StringWithAggregatesFilter<"Session"> | string;
    userId?: StringWithAggregatesFilter<"Session"> | string;
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string;
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string;
  };

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[];
    OR?: VerificationTokenWhereInput[];
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[];
    identifier?: StringFilter<"VerificationToken"> | string;
    token?: StringFilter<"VerificationToken"> | string;
    expires?: DateTimeFilter<"VerificationToken"> | Date | string;
  };

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder;
    token?: SortOrder;
    expires?: SortOrder;
  };

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<
    {
      identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput;
      AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[];
      OR?: VerificationTokenWhereInput[];
      NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[];
      identifier?: StringFilter<"VerificationToken"> | string;
      token?: StringFilter<"VerificationToken"> | string;
      expires?: DateTimeFilter<"VerificationToken"> | Date | string;
    },
    "identifier_token"
  >;

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder;
    token?: SortOrder;
    expires?: SortOrder;
    _count?: VerificationTokenCountOrderByAggregateInput;
    _max?: VerificationTokenMaxOrderByAggregateInput;
    _min?: VerificationTokenMinOrderByAggregateInput;
  };

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?:
      | VerificationTokenScalarWhereWithAggregatesInput
      | VerificationTokenScalarWhereWithAggregatesInput[];
    OR?: VerificationTokenScalarWhereWithAggregatesInput[];
    NOT?:
      | VerificationTokenScalarWhereWithAggregatesInput
      | VerificationTokenScalarWhereWithAggregatesInput[];
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string;
    token?: StringWithAggregatesFilter<"VerificationToken"> | string;
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string;
  };

  export type AuthenticatorWhereInput = {
    AND?: AuthenticatorWhereInput | AuthenticatorWhereInput[];
    OR?: AuthenticatorWhereInput[];
    NOT?: AuthenticatorWhereInput | AuthenticatorWhereInput[];
    credentialID?: StringFilter<"Authenticator"> | string;
    userId?: StringFilter<"Authenticator"> | string;
    providerAccountId?: StringFilter<"Authenticator"> | string;
    credentialPublicKey?: StringFilter<"Authenticator"> | string;
    counter?: IntFilter<"Authenticator"> | number;
    credentialDeviceType?: StringFilter<"Authenticator"> | string;
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean;
    transports?: StringNullableFilter<"Authenticator"> | string | null;
    user?: XOR<UserRelationFilter, UserWhereInput>;
  };

  export type AuthenticatorOrderByWithRelationInput = {
    credentialID?: SortOrder;
    userId?: SortOrder;
    providerAccountId?: SortOrder;
    credentialPublicKey?: SortOrder;
    counter?: SortOrder;
    credentialDeviceType?: SortOrder;
    credentialBackedUp?: SortOrder;
    transports?: SortOrderInput | SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type AuthenticatorWhereUniqueInput = Prisma.AtLeast<
    {
      credentialID?: string;
      userId_credentialID?: AuthenticatorUserIdCredentialIDCompoundUniqueInput;
      AND?: AuthenticatorWhereInput | AuthenticatorWhereInput[];
      OR?: AuthenticatorWhereInput[];
      NOT?: AuthenticatorWhereInput | AuthenticatorWhereInput[];
      userId?: StringFilter<"Authenticator"> | string;
      providerAccountId?: StringFilter<"Authenticator"> | string;
      credentialPublicKey?: StringFilter<"Authenticator"> | string;
      counter?: IntFilter<"Authenticator"> | number;
      credentialDeviceType?: StringFilter<"Authenticator"> | string;
      credentialBackedUp?: BoolFilter<"Authenticator"> | boolean;
      transports?: StringNullableFilter<"Authenticator"> | string | null;
      user?: XOR<UserRelationFilter, UserWhereInput>;
    },
    "userId_credentialID" | "credentialID"
  >;

  export type AuthenticatorOrderByWithAggregationInput = {
    credentialID?: SortOrder;
    userId?: SortOrder;
    providerAccountId?: SortOrder;
    credentialPublicKey?: SortOrder;
    counter?: SortOrder;
    credentialDeviceType?: SortOrder;
    credentialBackedUp?: SortOrder;
    transports?: SortOrderInput | SortOrder;
    _count?: AuthenticatorCountOrderByAggregateInput;
    _avg?: AuthenticatorAvgOrderByAggregateInput;
    _max?: AuthenticatorMaxOrderByAggregateInput;
    _min?: AuthenticatorMinOrderByAggregateInput;
    _sum?: AuthenticatorSumOrderByAggregateInput;
  };

  export type AuthenticatorScalarWhereWithAggregatesInput = {
    AND?:
      | AuthenticatorScalarWhereWithAggregatesInput
      | AuthenticatorScalarWhereWithAggregatesInput[];
    OR?: AuthenticatorScalarWhereWithAggregatesInput[];
    NOT?:
      | AuthenticatorScalarWhereWithAggregatesInput
      | AuthenticatorScalarWhereWithAggregatesInput[];
    credentialID?: StringWithAggregatesFilter<"Authenticator"> | string;
    userId?: StringWithAggregatesFilter<"Authenticator"> | string;
    providerAccountId?: StringWithAggregatesFilter<"Authenticator"> | string;
    credentialPublicKey?: StringWithAggregatesFilter<"Authenticator"> | string;
    counter?: IntWithAggregatesFilter<"Authenticator"> | number;
    credentialDeviceType?: StringWithAggregatesFilter<"Authenticator"> | string;
    credentialBackedUp?: BoolWithAggregatesFilter<"Authenticator"> | boolean;
    transports?:
      | StringNullableWithAggregatesFilter<"Authenticator">
      | string
      | null;
  };

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[];
    OR?: AddressWhereInput[];
    NOT?: AddressWhereInput | AddressWhereInput[];
    id?: StringFilter<"Address"> | string;
    alias?: StringFilter<"Address"> | string;
    name?: StringFilter<"Address"> | string;
    address?: StringFilter<"Address"> | string;
    city?: StringFilter<"Address"> | string;
    state?: StringFilter<"Address"> | string;
    reference?: StringNullableFilter<"Address"> | string | null;
    neighborhoodId?: StringNullableFilter<"Address"> | string | null;
    neighborhood?: XOR<
      NeighborhoodNullableRelationFilter,
      NeighborhoodWhereInput
    > | null;
    userAddress?: XOR<
      UserAddressNullableRelationFilter,
      UserAddressWhereInput
    > | null;
    orderAddress?: XOR<
      OrderAddressNullableRelationFilter,
      OrderAddressWhereInput
    > | null;
  };

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder;
    alias?: SortOrder;
    name?: SortOrder;
    address?: SortOrder;
    city?: SortOrder;
    state?: SortOrder;
    reference?: SortOrderInput | SortOrder;
    neighborhoodId?: SortOrderInput | SortOrder;
    neighborhood?: NeighborhoodOrderByWithRelationInput;
    userAddress?: UserAddressOrderByWithRelationInput;
    orderAddress?: OrderAddressOrderByWithRelationInput;
  };

  export type AddressWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: AddressWhereInput | AddressWhereInput[];
      OR?: AddressWhereInput[];
      NOT?: AddressWhereInput | AddressWhereInput[];
      alias?: StringFilter<"Address"> | string;
      name?: StringFilter<"Address"> | string;
      address?: StringFilter<"Address"> | string;
      city?: StringFilter<"Address"> | string;
      state?: StringFilter<"Address"> | string;
      reference?: StringNullableFilter<"Address"> | string | null;
      neighborhoodId?: StringNullableFilter<"Address"> | string | null;
      neighborhood?: XOR<
        NeighborhoodNullableRelationFilter,
        NeighborhoodWhereInput
      > | null;
      userAddress?: XOR<
        UserAddressNullableRelationFilter,
        UserAddressWhereInput
      > | null;
      orderAddress?: XOR<
        OrderAddressNullableRelationFilter,
        OrderAddressWhereInput
      > | null;
    },
    "id"
  >;

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder;
    alias?: SortOrder;
    name?: SortOrder;
    address?: SortOrder;
    city?: SortOrder;
    state?: SortOrder;
    reference?: SortOrderInput | SortOrder;
    neighborhoodId?: SortOrderInput | SortOrder;
    _count?: AddressCountOrderByAggregateInput;
    _max?: AddressMaxOrderByAggregateInput;
    _min?: AddressMinOrderByAggregateInput;
  };

  export type AddressScalarWhereWithAggregatesInput = {
    AND?:
      | AddressScalarWhereWithAggregatesInput
      | AddressScalarWhereWithAggregatesInput[];
    OR?: AddressScalarWhereWithAggregatesInput[];
    NOT?:
      | AddressScalarWhereWithAggregatesInput
      | AddressScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Address"> | string;
    alias?: StringWithAggregatesFilter<"Address"> | string;
    name?: StringWithAggregatesFilter<"Address"> | string;
    address?: StringWithAggregatesFilter<"Address"> | string;
    city?: StringWithAggregatesFilter<"Address"> | string;
    state?: StringWithAggregatesFilter<"Address"> | string;
    reference?: StringNullableWithAggregatesFilter<"Address"> | string | null;
    neighborhoodId?:
      | StringNullableWithAggregatesFilter<"Address">
      | string
      | null;
  };

  export type NeighborhoodWhereInput = {
    AND?: NeighborhoodWhereInput | NeighborhoodWhereInput[];
    OR?: NeighborhoodWhereInput[];
    NOT?: NeighborhoodWhereInput | NeighborhoodWhereInput[];
    id?: StringFilter<"Neighborhood"> | string;
    name?: StringFilter<"Neighborhood"> | string;
    city?: StringFilter<"Neighborhood"> | string;
    addresses?: AddressListRelationFilter;
    businessNeighborhood?: BusinessNeighborhoodListRelationFilter;
  };

  export type NeighborhoodOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    city?: SortOrder;
    addresses?: AddressOrderByRelationAggregateInput;
    businessNeighborhood?: BusinessNeighborhoodOrderByRelationAggregateInput;
  };

  export type NeighborhoodWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: NeighborhoodWhereInput | NeighborhoodWhereInput[];
      OR?: NeighborhoodWhereInput[];
      NOT?: NeighborhoodWhereInput | NeighborhoodWhereInput[];
      name?: StringFilter<"Neighborhood"> | string;
      city?: StringFilter<"Neighborhood"> | string;
      addresses?: AddressListRelationFilter;
      businessNeighborhood?: BusinessNeighborhoodListRelationFilter;
    },
    "id"
  >;

  export type NeighborhoodOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    city?: SortOrder;
    _count?: NeighborhoodCountOrderByAggregateInput;
    _max?: NeighborhoodMaxOrderByAggregateInput;
    _min?: NeighborhoodMinOrderByAggregateInput;
  };

  export type NeighborhoodScalarWhereWithAggregatesInput = {
    AND?:
      | NeighborhoodScalarWhereWithAggregatesInput
      | NeighborhoodScalarWhereWithAggregatesInput[];
    OR?: NeighborhoodScalarWhereWithAggregatesInput[];
    NOT?:
      | NeighborhoodScalarWhereWithAggregatesInput
      | NeighborhoodScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"Neighborhood"> | string;
    name?: StringWithAggregatesFilter<"Neighborhood"> | string;
    city?: StringWithAggregatesFilter<"Neighborhood"> | string;
  };

  export type UserAddressWhereInput = {
    AND?: UserAddressWhereInput | UserAddressWhereInput[];
    OR?: UserAddressWhereInput[];
    NOT?: UserAddressWhereInput | UserAddressWhereInput[];
    id?: StringFilter<"UserAddress"> | string;
    addressId?: StringFilter<"UserAddress"> | string;
    userId?: StringFilter<"UserAddress"> | string;
    businessId?: StringNullableFilter<"UserAddress"> | string | null;
    address?: XOR<AddressRelationFilter, AddressWhereInput>;
    user?: XOR<UserRelationFilter, UserWhereInput>;
    business?: XOR<BusinessNullableRelationFilter, BusinessWhereInput> | null;
  };

  export type UserAddressOrderByWithRelationInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    userId?: SortOrder;
    businessId?: SortOrderInput | SortOrder;
    address?: AddressOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
    business?: BusinessOrderByWithRelationInput;
  };

  export type UserAddressWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      addressId?: string;
      AND?: UserAddressWhereInput | UserAddressWhereInput[];
      OR?: UserAddressWhereInput[];
      NOT?: UserAddressWhereInput | UserAddressWhereInput[];
      userId?: StringFilter<"UserAddress"> | string;
      businessId?: StringNullableFilter<"UserAddress"> | string | null;
      address?: XOR<AddressRelationFilter, AddressWhereInput>;
      user?: XOR<UserRelationFilter, UserWhereInput>;
      business?: XOR<BusinessNullableRelationFilter, BusinessWhereInput> | null;
    },
    "id" | "addressId"
  >;

  export type UserAddressOrderByWithAggregationInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    userId?: SortOrder;
    businessId?: SortOrderInput | SortOrder;
    _count?: UserAddressCountOrderByAggregateInput;
    _max?: UserAddressMaxOrderByAggregateInput;
    _min?: UserAddressMinOrderByAggregateInput;
  };

  export type UserAddressScalarWhereWithAggregatesInput = {
    AND?:
      | UserAddressScalarWhereWithAggregatesInput
      | UserAddressScalarWhereWithAggregatesInput[];
    OR?: UserAddressScalarWhereWithAggregatesInput[];
    NOT?:
      | UserAddressScalarWhereWithAggregatesInput
      | UserAddressScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"UserAddress"> | string;
    addressId?: StringWithAggregatesFilter<"UserAddress"> | string;
    userId?: StringWithAggregatesFilter<"UserAddress"> | string;
    businessId?:
      | StringNullableWithAggregatesFilter<"UserAddress">
      | string
      | null;
  };

  export type OrderAddressWhereInput = {
    AND?: OrderAddressWhereInput | OrderAddressWhereInput[];
    OR?: OrderAddressWhereInput[];
    NOT?: OrderAddressWhereInput | OrderAddressWhereInput[];
    id?: StringFilter<"OrderAddress"> | string;
    addressId?: StringFilter<"OrderAddress"> | string;
    orderId?: StringFilter<"OrderAddress"> | string;
    address?: XOR<AddressRelationFilter, AddressWhereInput>;
    order?: XOR<OrderRelationFilter, OrderWhereInput>;
  };

  export type OrderAddressOrderByWithRelationInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    orderId?: SortOrder;
    address?: AddressOrderByWithRelationInput;
    order?: OrderOrderByWithRelationInput;
  };

  export type OrderAddressWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      addressId?: string;
      orderId?: string;
      AND?: OrderAddressWhereInput | OrderAddressWhereInput[];
      OR?: OrderAddressWhereInput[];
      NOT?: OrderAddressWhereInput | OrderAddressWhereInput[];
      address?: XOR<AddressRelationFilter, AddressWhereInput>;
      order?: XOR<OrderRelationFilter, OrderWhereInput>;
    },
    "id" | "addressId" | "orderId"
  >;

  export type OrderAddressOrderByWithAggregationInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    orderId?: SortOrder;
    _count?: OrderAddressCountOrderByAggregateInput;
    _max?: OrderAddressMaxOrderByAggregateInput;
    _min?: OrderAddressMinOrderByAggregateInput;
  };

  export type OrderAddressScalarWhereWithAggregatesInput = {
    AND?:
      | OrderAddressScalarWhereWithAggregatesInput
      | OrderAddressScalarWhereWithAggregatesInput[];
    OR?: OrderAddressScalarWhereWithAggregatesInput[];
    NOT?:
      | OrderAddressScalarWhereWithAggregatesInput
      | OrderAddressScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"OrderAddress"> | string;
    addressId?: StringWithAggregatesFilter<"OrderAddress"> | string;
    orderId?: StringWithAggregatesFilter<"OrderAddress"> | string;
  };

  export type BusinessNeighborhoodWhereInput = {
    AND?: BusinessNeighborhoodWhereInput | BusinessNeighborhoodWhereInput[];
    OR?: BusinessNeighborhoodWhereInput[];
    NOT?: BusinessNeighborhoodWhereInput | BusinessNeighborhoodWhereInput[];
    id?: StringFilter<"BusinessNeighborhood"> | string;
    shipping?: IntFilter<"BusinessNeighborhood"> | number;
    active?: BoolFilter<"BusinessNeighborhood"> | boolean;
    businessId?: StringFilter<"BusinessNeighborhood"> | string;
    neighborhoodId?: StringFilter<"BusinessNeighborhood"> | string;
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
    neighborhood?: XOR<NeighborhoodRelationFilter, NeighborhoodWhereInput>;
  };

  export type BusinessNeighborhoodOrderByWithRelationInput = {
    id?: SortOrder;
    shipping?: SortOrder;
    active?: SortOrder;
    businessId?: SortOrder;
    neighborhoodId?: SortOrder;
    business?: BusinessOrderByWithRelationInput;
    neighborhood?: NeighborhoodOrderByWithRelationInput;
  };

  export type BusinessNeighborhoodWhereUniqueInput = Prisma.AtLeast<
    {
      id?: string;
      AND?: BusinessNeighborhoodWhereInput | BusinessNeighborhoodWhereInput[];
      OR?: BusinessNeighborhoodWhereInput[];
      NOT?: BusinessNeighborhoodWhereInput | BusinessNeighborhoodWhereInput[];
      shipping?: IntFilter<"BusinessNeighborhood"> | number;
      active?: BoolFilter<"BusinessNeighborhood"> | boolean;
      businessId?: StringFilter<"BusinessNeighborhood"> | string;
      neighborhoodId?: StringFilter<"BusinessNeighborhood"> | string;
      business?: XOR<BusinessRelationFilter, BusinessWhereInput>;
      neighborhood?: XOR<NeighborhoodRelationFilter, NeighborhoodWhereInput>;
    },
    "id"
  >;

  export type BusinessNeighborhoodOrderByWithAggregationInput = {
    id?: SortOrder;
    shipping?: SortOrder;
    active?: SortOrder;
    businessId?: SortOrder;
    neighborhoodId?: SortOrder;
    _count?: BusinessNeighborhoodCountOrderByAggregateInput;
    _avg?: BusinessNeighborhoodAvgOrderByAggregateInput;
    _max?: BusinessNeighborhoodMaxOrderByAggregateInput;
    _min?: BusinessNeighborhoodMinOrderByAggregateInput;
    _sum?: BusinessNeighborhoodSumOrderByAggregateInput;
  };

  export type BusinessNeighborhoodScalarWhereWithAggregatesInput = {
    AND?:
      | BusinessNeighborhoodScalarWhereWithAggregatesInput
      | BusinessNeighborhoodScalarWhereWithAggregatesInput[];
    OR?: BusinessNeighborhoodScalarWhereWithAggregatesInput[];
    NOT?:
      | BusinessNeighborhoodScalarWhereWithAggregatesInput
      | BusinessNeighborhoodScalarWhereWithAggregatesInput[];
    id?: StringWithAggregatesFilter<"BusinessNeighborhood"> | string;
    shipping?: IntWithAggregatesFilter<"BusinessNeighborhood"> | number;
    active?: BoolWithAggregatesFilter<"BusinessNeighborhood"> | boolean;
    businessId?: StringWithAggregatesFilter<"BusinessNeighborhood"> | string;
    neighborhoodId?:
      | StringWithAggregatesFilter<"BusinessNeighborhood">
      | string;
  };

  export type BusinessCreateInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessCreateManyInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
  };

  export type BusinessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
  };

  export type BusinessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
  };

  export type TelegramBusinessCreateInput = {
    id?: string;
    groupId: string;
    invitationLink?: string;
    business: BusinessCreateNestedOneWithoutTelegramInput;
  };

  export type TelegramBusinessUncheckedCreateInput = {
    id?: string;
    groupId: string;
    invitationLink?: string;
    businessId: string;
  };

  export type TelegramBusinessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    groupId?: StringFieldUpdateOperationsInput | string;
    invitationLink?: StringFieldUpdateOperationsInput | string;
    business?: BusinessUpdateOneRequiredWithoutTelegramNestedInput;
  };

  export type TelegramBusinessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    groupId?: StringFieldUpdateOperationsInput | string;
    invitationLink?: StringFieldUpdateOperationsInput | string;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type TelegramBusinessCreateManyInput = {
    id?: string;
    groupId: string;
    invitationLink?: string;
    businessId: string;
  };

  export type TelegramBusinessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    groupId?: StringFieldUpdateOperationsInput | string;
    invitationLink?: StringFieldUpdateOperationsInput | string;
  };

  export type TelegramBusinessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    groupId?: StringFieldUpdateOperationsInput | string;
    invitationLink?: StringFieldUpdateOperationsInput | string;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type PaymentMethodCreateInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    business: BusinessCreateNestedOneWithoutPaymentMethodInput;
    defaultBusiness?: BusinessCreateNestedOneWithoutDefaultPaymentMethodInput;
  };

  export type PaymentMethodUncheckedCreateInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    businessId: string;
    defaultBusiness?: BusinessUncheckedCreateNestedOneWithoutDefaultPaymentMethodInput;
  };

  export type PaymentMethodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    business?: BusinessUpdateOneRequiredWithoutPaymentMethodNestedInput;
    defaultBusiness?: BusinessUpdateOneWithoutDefaultPaymentMethodNestedInput;
  };

  export type PaymentMethodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    businessId?: StringFieldUpdateOperationsInput | string;
    defaultBusiness?: BusinessUncheckedUpdateOneWithoutDefaultPaymentMethodNestedInput;
  };

  export type PaymentMethodCreateManyInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    businessId: string;
  };

  export type PaymentMethodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
  };

  export type PaymentMethodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type CategoryCreateInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    products?: ProductCreateNestedManyWithoutCategoryInput;
    business: BusinessCreateNestedOneWithoutCategoriesInput;
  };

  export type CategoryUncheckedCreateInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    businessId: string;
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    products?: ProductUpdateManyWithoutCategoryNestedInput;
    business?: BusinessUpdateOneRequiredWithoutCategoriesNestedInput;
  };

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    businessId?: StringFieldUpdateOperationsInput | string;
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryCreateManyInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    businessId: string;
  };

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
  };

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type ProductCreateInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    business: BusinessCreateNestedOneWithoutProductsInput;
    category?: CategoryCreateNestedOneWithoutProductsInput;
    orderItems?: OrderProductCreateNestedManyWithoutProductInput;
  };

  export type ProductUncheckedCreateInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    businessId: string;
    categoryId?: string | null;
    orderItems?: OrderProductUncheckedCreateNestedManyWithoutProductInput;
  };

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    business?: BusinessUpdateOneRequiredWithoutProductsNestedInput;
    category?: CategoryUpdateOneWithoutProductsNestedInput;
    orderItems?: OrderProductUpdateManyWithoutProductNestedInput;
  };

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null;
    orderItems?: OrderProductUncheckedUpdateManyWithoutProductNestedInput;
  };

  export type ProductCreateManyInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    businessId: string;
    categoryId?: string | null;
  };

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
  };

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type UserCreateInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderCreateNestedManyWithoutUserInput;
    accounts?: AccountCreateNestedManyWithoutUserInput;
    sessions?: SessionCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput;
    business?: UserBusinessCreateNestedManyWithoutUserInput;
    address?: UserAddressCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput;
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput;
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput;
    business?: UserBusinessUncheckedCreateNestedManyWithoutUserInput;
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUpdateManyWithoutUserNestedInput;
    accounts?: AccountUpdateManyWithoutUserNestedInput;
    sessions?: SessionUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUpdateManyWithoutUserNestedInput;
    address?: UserAddressUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput;
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput;
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUncheckedUpdateManyWithoutUserNestedInput;
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type UserCreateManyInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserBusinessCreateInput = {
    type?: $Enums.UserBusinessType;
    user: UserCreateNestedOneWithoutBusinessInput;
    business: BusinessCreateNestedOneWithoutUsersInput;
  };

  export type UserBusinessUncheckedCreateInput = {
    userId: string;
    businessId: string;
    type?: $Enums.UserBusinessType;
  };

  export type UserBusinessUpdateInput = {
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput;
    business?: BusinessUpdateOneRequiredWithoutUsersNestedInput;
  };

  export type UserBusinessUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string;
    businessId?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type UserBusinessCreateManyInput = {
    userId: string;
    businessId: string;
    type?: $Enums.UserBusinessType;
  };

  export type UserBusinessUpdateManyMutationInput = {
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type UserBusinessUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string;
    businessId?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type InvitationLinkCreateInput = {
    id?: string;
    code: string;
    createdAt?: Date | string;
    business: BusinessCreateNestedOneWithoutInvitationLinksInput;
  };

  export type InvitationLinkUncheckedCreateInput = {
    id?: string;
    code: string;
    businessId: string;
    createdAt?: Date | string;
  };

  export type InvitationLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    business?: BusinessUpdateOneRequiredWithoutInvitationLinksNestedInput;
  };

  export type InvitationLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    businessId?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type InvitationLinkCreateManyInput = {
    id?: string;
    code: string;
    businessId: string;
    createdAt?: Date | string;
  };

  export type InvitationLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type InvitationLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    businessId?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type OrderCreateInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
    user?: UserCreateNestedOneWithoutOrdersInput;
    items?: OrderProductCreateNestedManyWithoutOrderInput;
    business?: BusinessCreateNestedOneWithoutOrdersInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutOrderInput;
  };

  export type OrderUncheckedCreateInput = {
    id?: string;
    userId?: string | null;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    businessId?: string | null;
    identifier?: string | null;
    items?: OrderProductUncheckedCreateNestedManyWithoutOrderInput;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutOrderInput;
  };

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    user?: UserUpdateOneWithoutOrdersNestedInput;
    items?: OrderProductUpdateManyWithoutOrderNestedInput;
    business?: BusinessUpdateOneWithoutOrdersNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutOrderNestedInput;
  };

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: NullableStringFieldUpdateOperationsInput | string | null;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    items?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput;
  };

  export type OrderCreateManyInput = {
    id?: string;
    userId?: string | null;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    businessId?: string | null;
    identifier?: string | null;
  };

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: NullableStringFieldUpdateOperationsInput | string | null;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderProductCreateInput = {
    price: number;
    position?: number;
    quantity: number;
    product: ProductCreateNestedOneWithoutOrderItemsInput;
    order: OrderCreateNestedOneWithoutItemsInput;
  };

  export type OrderProductUncheckedCreateInput = {
    productId: string;
    orderId: string;
    price: number;
    position?: number;
    quantity: number;
  };

  export type OrderProductUpdateInput = {
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput;
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput;
  };

  export type OrderProductUncheckedUpdateInput = {
    productId?: StringFieldUpdateOperationsInput | string;
    orderId?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type OrderProductCreateManyInput = {
    productId: string;
    orderId: string;
    price: number;
    position?: number;
    quantity: number;
  };

  export type OrderProductUpdateManyMutationInput = {
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type OrderProductUncheckedUpdateManyInput = {
    productId?: StringFieldUpdateOperationsInput | string;
    orderId?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type AccountCreateInput = {
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null;
    access_token?: string | null;
    expires_at?: number | null;
    token_type?: string | null;
    scope?: string | null;
    id_token?: string | null;
    session_state?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: UserCreateNestedOneWithoutAccountsInput;
  };

  export type AccountUncheckedCreateInput = {
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null;
    access_token?: string | null;
    expires_at?: number | null;
    token_type?: string | null;
    scope?: string | null;
    id_token?: string | null;
    session_state?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type AccountUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput;
  };

  export type AccountUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string;
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type AccountCreateManyInput = {
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null;
    access_token?: string | null;
    expires_at?: number | null;
    token_type?: string | null;
    scope?: string | null;
    id_token?: string | null;
    session_state?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type AccountUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type AccountUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string;
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SessionCreateInput = {
    sessionToken: string;
    expires: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: UserCreateNestedOneWithoutSessionsInput;
  };

  export type SessionUncheckedCreateInput = {
    sessionToken: string;
    userId: string;
    expires: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SessionUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput;
  };

  export type SessionUncheckedUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SessionCreateManyInput = {
    sessionToken: string;
    userId: string;
    expires: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SessionUpdateManyMutationInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SessionUncheckedUpdateManyInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type VerificationTokenCreateInput = {
    identifier: string;
    token: string;
    expires: Date | string;
  };

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string;
    token: string;
    expires: Date | string;
  };

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string;
    token?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string;
    token?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type VerificationTokenCreateManyInput = {
    identifier: string;
    token: string;
    expires: Date | string;
  };

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string;
    token?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string;
    token?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type AuthenticatorCreateInput = {
    credentialID: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports?: string | null;
    user: UserCreateNestedOneWithoutAuthenticatorInput;
  };

  export type AuthenticatorUncheckedCreateInput = {
    credentialID: string;
    userId: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports?: string | null;
  };

  export type AuthenticatorUpdateInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
    user?: UserUpdateOneRequiredWithoutAuthenticatorNestedInput;
  };

  export type AuthenticatorUncheckedUpdateInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AuthenticatorCreateManyInput = {
    credentialID: string;
    userId: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports?: string | null;
  };

  export type AuthenticatorUpdateManyMutationInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AuthenticatorUncheckedUpdateManyInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AddressCreateInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhood?: NeighborhoodCreateNestedOneWithoutAddressesInput;
    userAddress?: UserAddressCreateNestedOneWithoutAddressInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutAddressInput;
  };

  export type AddressUncheckedCreateInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhoodId?: string | null;
    userAddress?: UserAddressUncheckedCreateNestedOneWithoutAddressInput;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutAddressInput;
  };

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhood?: NeighborhoodUpdateOneWithoutAddressesNestedInput;
    userAddress?: UserAddressUpdateOneWithoutAddressNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutAddressNestedInput;
  };

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhoodId?: NullableStringFieldUpdateOperationsInput | string | null;
    userAddress?: UserAddressUncheckedUpdateOneWithoutAddressNestedInput;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutAddressNestedInput;
  };

  export type AddressCreateManyInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhoodId?: string | null;
  };

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhoodId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type NeighborhoodCreateInput = {
    id?: string;
    name: string;
    city: string;
    addresses?: AddressCreateNestedManyWithoutNeighborhoodInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutNeighborhoodInput;
  };

  export type NeighborhoodUncheckedCreateInput = {
    id?: string;
    name: string;
    city: string;
    addresses?: AddressUncheckedCreateNestedManyWithoutNeighborhoodInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutNeighborhoodInput;
  };

  export type NeighborhoodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    addresses?: AddressUpdateManyWithoutNeighborhoodNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutNeighborhoodNestedInput;
  };

  export type NeighborhoodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    addresses?: AddressUncheckedUpdateManyWithoutNeighborhoodNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutNeighborhoodNestedInput;
  };

  export type NeighborhoodCreateManyInput = {
    id?: string;
    name: string;
    city: string;
  };

  export type NeighborhoodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
  };

  export type NeighborhoodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
  };

  export type UserAddressCreateInput = {
    id?: string;
    address: AddressCreateNestedOneWithoutUserAddressInput;
    user: UserCreateNestedOneWithoutAddressInput;
    business?: BusinessCreateNestedOneWithoutUserAddressInput;
  };

  export type UserAddressUncheckedCreateInput = {
    id?: string;
    addressId: string;
    userId: string;
    businessId?: string | null;
  };

  export type UserAddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    address?: AddressUpdateOneRequiredWithoutUserAddressNestedInput;
    user?: UserUpdateOneRequiredWithoutAddressNestedInput;
    business?: BusinessUpdateOneWithoutUserAddressNestedInput;
  };

  export type UserAddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type UserAddressCreateManyInput = {
    id?: string;
    addressId: string;
    userId: string;
    businessId?: string | null;
  };

  export type UserAddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
  };

  export type UserAddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderAddressCreateInput = {
    id?: string;
    address: AddressCreateNestedOneWithoutOrderAddressInput;
    order: OrderCreateNestedOneWithoutOrderAddressInput;
  };

  export type OrderAddressUncheckedCreateInput = {
    id?: string;
    addressId: string;
    orderId: string;
  };

  export type OrderAddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    address?: AddressUpdateOneRequiredWithoutOrderAddressNestedInput;
    order?: OrderUpdateOneRequiredWithoutOrderAddressNestedInput;
  };

  export type OrderAddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    orderId?: StringFieldUpdateOperationsInput | string;
  };

  export type OrderAddressCreateManyInput = {
    id?: string;
    addressId: string;
    orderId: string;
  };

  export type OrderAddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
  };

  export type OrderAddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    orderId?: StringFieldUpdateOperationsInput | string;
  };

  export type BusinessNeighborhoodCreateInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    business: BusinessCreateNestedOneWithoutBusinessNeighborhoodInput;
    neighborhood: NeighborhoodCreateNestedOneWithoutBusinessNeighborhoodInput;
  };

  export type BusinessNeighborhoodUncheckedCreateInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    businessId: string;
    neighborhoodId: string;
  };

  export type BusinessNeighborhoodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    business?: BusinessUpdateOneRequiredWithoutBusinessNeighborhoodNestedInput;
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutBusinessNeighborhoodNestedInput;
  };

  export type BusinessNeighborhoodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
    neighborhoodId?: StringFieldUpdateOperationsInput | string;
  };

  export type BusinessNeighborhoodCreateManyInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    businessId: string;
    neighborhoodId: string;
  };

  export type BusinessNeighborhoodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
  };

  export type BusinessNeighborhoodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
    neighborhoodId?: StringFieldUpdateOperationsInput | string;
  };

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringFilter<$PrismaModel> | string;
  };

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringNullableFilter<$PrismaModel> | string | null;
  };

  export type FloatNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    has?: number | FloatFieldRefInput<$PrismaModel> | null;
    hasEvery?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    hasSome?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    isEmpty?: boolean;
  };

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolFilter<$PrismaModel> | boolean;
  };

  export type EnumBusinessPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessPlan | EnumBusinessPlanFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.BusinessPlan[]
      | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.BusinessPlan[]
      | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
    not?: NestedEnumBusinessPlanFilter<$PrismaModel> | $Enums.BusinessPlan;
  };

  export type PaymentMethodNullableRelationFilter = {
    is?: PaymentMethodWhereInput | null;
    isNot?: PaymentMethodWhereInput | null;
  };

  export type TelegramBusinessNullableRelationFilter = {
    is?: TelegramBusinessWhereInput | null;
    isNot?: TelegramBusinessWhereInput | null;
  };

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput;
    some?: CategoryWhereInput;
    none?: CategoryWhereInput;
  };

  export type ProductListRelationFilter = {
    every?: ProductWhereInput;
    some?: ProductWhereInput;
    none?: ProductWhereInput;
  };

  export type OrderListRelationFilter = {
    every?: OrderWhereInput;
    some?: OrderWhereInput;
    none?: OrderWhereInput;
  };

  export type UserBusinessListRelationFilter = {
    every?: UserBusinessWhereInput;
    some?: UserBusinessWhereInput;
    none?: UserBusinessWhereInput;
  };

  export type BusinessNeighborhoodListRelationFilter = {
    every?: BusinessNeighborhoodWhereInput;
    some?: BusinessNeighborhoodWhereInput;
    none?: BusinessNeighborhoodWhereInput;
  };

  export type UserAddressListRelationFilter = {
    every?: UserAddressWhereInput;
    some?: UserAddressWhereInput;
    none?: UserAddressWhereInput;
  };

  export type PaymentMethodListRelationFilter = {
    every?: PaymentMethodWhereInput;
    some?: PaymentMethodWhereInput;
    none?: PaymentMethodWhereInput;
  };

  export type InvitationLinkListRelationFilter = {
    every?: InvitationLinkWhereInput;
    some?: InvitationLinkWhereInput;
    none?: InvitationLinkWhereInput;
  };

  export type SortOrderInput = {
    sort: SortOrder;
    nulls?: NullsOrder;
  };

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserBusinessOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type BusinessNeighborhoodOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserAddressOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type PaymentMethodOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type InvitationLinkOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type BusinessCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    address?: SortOrder;
    phone?: SortOrder;
    howToArrive?: SortOrder;
    coordinates?: SortOrder;
    slug?: SortOrder;
    active?: SortOrder;
    requestAddress?: SortOrder;
    plan?: SortOrder;
    sendOrderToWhatsapp?: SortOrder;
    defaultPaymentMethodId?: SortOrder;
  };

  export type BusinessAvgOrderByAggregateInput = {
    coordinates?: SortOrder;
  };

  export type BusinessMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    address?: SortOrder;
    phone?: SortOrder;
    howToArrive?: SortOrder;
    slug?: SortOrder;
    active?: SortOrder;
    requestAddress?: SortOrder;
    plan?: SortOrder;
    sendOrderToWhatsapp?: SortOrder;
    defaultPaymentMethodId?: SortOrder;
  };

  export type BusinessMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    address?: SortOrder;
    phone?: SortOrder;
    howToArrive?: SortOrder;
    slug?: SortOrder;
    active?: SortOrder;
    requestAddress?: SortOrder;
    plan?: SortOrder;
    sendOrderToWhatsapp?: SortOrder;
    defaultPaymentMethodId?: SortOrder;
  };

  export type BusinessSumOrderByAggregateInput = {
    coordinates?: SortOrder;
  };

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedStringFilter<$PrismaModel>;
    _max?: NestedStringFilter<$PrismaModel>;
  };

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?:
      | NestedStringNullableWithAggregatesFilter<$PrismaModel>
      | string
      | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedStringNullableFilter<$PrismaModel>;
    _max?: NestedStringNullableFilter<$PrismaModel>;
  };

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedBoolFilter<$PrismaModel>;
    _max?: NestedBoolFilter<$PrismaModel>;
  };

  export type EnumBusinessPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessPlan | EnumBusinessPlanFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.BusinessPlan[]
      | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.BusinessPlan[]
      | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumBusinessPlanWithAggregatesFilter<$PrismaModel>
      | $Enums.BusinessPlan;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumBusinessPlanFilter<$PrismaModel>;
    _max?: NestedEnumBusinessPlanFilter<$PrismaModel>;
  };

  export type BusinessRelationFilter = {
    is?: BusinessWhereInput;
    isNot?: BusinessWhereInput;
  };

  export type TelegramBusinessCountOrderByAggregateInput = {
    id?: SortOrder;
    groupId?: SortOrder;
    invitationLink?: SortOrder;
    businessId?: SortOrder;
  };

  export type TelegramBusinessMaxOrderByAggregateInput = {
    id?: SortOrder;
    groupId?: SortOrder;
    invitationLink?: SortOrder;
    businessId?: SortOrder;
  };

  export type TelegramBusinessMinOrderByAggregateInput = {
    id?: SortOrder;
    groupId?: SortOrder;
    invitationLink?: SortOrder;
    businessId?: SortOrder;
  };

  export type EnumPaymentMethodTypeFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.PaymentMethodType
      | EnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.PaymentMethodType[]
      | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.PaymentMethodType[]
      | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumPaymentMethodTypeFilter<$PrismaModel>
      | $Enums.PaymentMethodType;
  };
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<JsonFilterBase<$PrismaModel>>,
          Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, "path">
        >,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, "path">>;

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    path?: string[];
    string_contains?: string | StringFieldRefInput<$PrismaModel>;
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>;
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>;
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    not?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
  };

  export type BusinessNullableRelationFilter = {
    is?: BusinessWhereInput | null;
    isNot?: BusinessWhereInput | null;
  };

  export type PaymentMethodCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    type?: SortOrder;
    data?: SortOrder;
    businessId?: SortOrder;
  };

  export type PaymentMethodMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    type?: SortOrder;
    businessId?: SortOrder;
  };

  export type PaymentMethodMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    type?: SortOrder;
    businessId?: SortOrder;
  };

  export type EnumPaymentMethodTypeWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?:
        | $Enums.PaymentMethodType
        | EnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
      in?:
        | $Enums.PaymentMethodType[]
        | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
      notIn?:
        | $Enums.PaymentMethodType[]
        | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
      not?:
        | NestedEnumPaymentMethodTypeWithAggregatesFilter<$PrismaModel>
        | $Enums.PaymentMethodType;
      _count?: NestedIntFilter<$PrismaModel>;
      _min?: NestedEnumPaymentMethodTypeFilter<$PrismaModel>;
      _max?: NestedEnumPaymentMethodTypeFilter<$PrismaModel>;
    };
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<JsonWithAggregatesFilterBase<$PrismaModel>>,
          Exclude<
            keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>,
            "path"
          >
        >,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<
        Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, "path">
      >;

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    path?: string[];
    string_contains?: string | StringFieldRefInput<$PrismaModel>;
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>;
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>;
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    not?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedJsonFilter<$PrismaModel>;
    _max?: NestedJsonFilter<$PrismaModel>;
  };

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntFilter<$PrismaModel> | number;
  };

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrder;
    active?: SortOrder;
    priority?: SortOrder;
    businessId?: SortOrder;
  };

  export type CategoryAvgOrderByAggregateInput = {
    priority?: SortOrder;
  };

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrder;
    active?: SortOrder;
    priority?: SortOrder;
    businessId?: SortOrder;
  };

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrder;
    active?: SortOrder;
    priority?: SortOrder;
    businessId?: SortOrder;
  };

  export type CategorySumOrderByAggregateInput = {
    priority?: SortOrder;
  };

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number;
    _count?: NestedIntFilter<$PrismaModel>;
    _avg?: NestedFloatFilter<$PrismaModel>;
    _sum?: NestedIntFilter<$PrismaModel>;
    _min?: NestedIntFilter<$PrismaModel>;
    _max?: NestedIntFilter<$PrismaModel>;
  };

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableFilter<$PrismaModel> | number | null;
  };
  export type JsonNullableListFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<JsonNullableListFilterBase<$PrismaModel>>,
          Exclude<
            keyof Required<JsonNullableListFilterBase<$PrismaModel>>,
            "path"
          >
        >,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<
        Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, "path">
      >;

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null;
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>;
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>;
    isEmpty?: boolean;
  };

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null;
    isNot?: CategoryWhereInput | null;
  };

  export type OrderProductListRelationFilter = {
    every?: OrderProductWhereInput;
    some?: OrderProductWhereInput;
    none?: OrderProductWhereInput;
  };

  export type OrderProductOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrder;
    image?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    offerPrice?: SortOrder;
    images?: SortOrder;
    active?: SortOrder;
    isNew?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
    allowOrderOutOfStock?: SortOrder;
    isExhaustible?: SortOrder;
    businessId?: SortOrder;
    categoryId?: SortOrder;
  };

  export type ProductAvgOrderByAggregateInput = {
    price?: SortOrder;
    offerPrice?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
  };

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    offerPrice?: SortOrder;
    active?: SortOrder;
    isNew?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
    allowOrderOutOfStock?: SortOrder;
    isExhaustible?: SortOrder;
    businessId?: SortOrder;
    categoryId?: SortOrder;
  };

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    slug?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    offerPrice?: SortOrder;
    active?: SortOrder;
    isNew?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
    allowOrderOutOfStock?: SortOrder;
    isExhaustible?: SortOrder;
    businessId?: SortOrder;
    categoryId?: SortOrder;
  };

  export type ProductSumOrderByAggregateInput = {
    price?: SortOrder;
    offerPrice?: SortOrder;
    priority?: SortOrder;
    stock?: SortOrder;
  };

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _avg?: NestedFloatNullableFilter<$PrismaModel>;
    _sum?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedIntNullableFilter<$PrismaModel>;
    _max?: NestedIntNullableFilter<$PrismaModel>;
  };

  export type EnumUserRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoles | EnumUserRolesFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    not?: NestedEnumUserRolesFilter<$PrismaModel> | $Enums.UserRoles;
  };

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null;
  };

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string;
  };

  export type AccountListRelationFilter = {
    every?: AccountWhereInput;
    some?: AccountWhereInput;
    none?: AccountWhereInput;
  };

  export type SessionListRelationFilter = {
    every?: SessionWhereInput;
    some?: SessionWhereInput;
    none?: SessionWhereInput;
  };

  export type AuthenticatorListRelationFilter = {
    every?: AuthenticatorWhereInput;
    some?: AuthenticatorWhereInput;
    none?: AuthenticatorWhereInput;
  };

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type AuthenticatorOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder;
    role?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    emailVerified?: SortOrder;
    image?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder;
    role?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    emailVerified?: SortOrder;
    image?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder;
    role?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    emailVerified?: SortOrder;
    image?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type EnumUserRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoles | EnumUserRolesFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserRolesWithAggregatesFilter<$PrismaModel>
      | $Enums.UserRoles;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumUserRolesFilter<$PrismaModel>;
    _max?: NestedEnumUserRolesFilter<$PrismaModel>;
  };

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?:
      | NestedDateTimeNullableWithAggregatesFilter<$PrismaModel>
      | Date
      | string
      | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedDateTimeNullableFilter<$PrismaModel>;
    _max?: NestedDateTimeNullableFilter<$PrismaModel>;
  };

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedDateTimeFilter<$PrismaModel>;
    _max?: NestedDateTimeFilter<$PrismaModel>;
  };

  export type EnumUserBusinessTypeFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.UserBusinessType
      | EnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserBusinessTypeFilter<$PrismaModel>
      | $Enums.UserBusinessType;
  };

  export type UserRelationFilter = {
    is?: UserWhereInput;
    isNot?: UserWhereInput;
  };

  export type UserBusinessUserIdBusinessIdCompoundUniqueInput = {
    userId: string;
    businessId: string;
  };

  export type UserBusinessCountOrderByAggregateInput = {
    userId?: SortOrder;
    businessId?: SortOrder;
    type?: SortOrder;
  };

  export type UserBusinessMaxOrderByAggregateInput = {
    userId?: SortOrder;
    businessId?: SortOrder;
    type?: SortOrder;
  };

  export type UserBusinessMinOrderByAggregateInput = {
    userId?: SortOrder;
    businessId?: SortOrder;
    type?: SortOrder;
  };

  export type EnumUserBusinessTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.UserBusinessType
      | EnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserBusinessTypeWithAggregatesFilter<$PrismaModel>
      | $Enums.UserBusinessType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumUserBusinessTypeFilter<$PrismaModel>;
    _max?: NestedEnumUserBusinessTypeFilter<$PrismaModel>;
  };

  export type InvitationLinkCountOrderByAggregateInput = {
    id?: SortOrder;
    code?: SortOrder;
    businessId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type InvitationLinkMaxOrderByAggregateInput = {
    id?: SortOrder;
    code?: SortOrder;
    businessId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type InvitationLinkMinOrderByAggregateInput = {
    id?: SortOrder;
    code?: SortOrder;
    businessId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.OrderStatus[]
      | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus;
  };

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null;
    isNot?: UserWhereInput | null;
  };

  export type OrderAddressNullableRelationFilter = {
    is?: OrderAddressWhereInput | null;
    isNot?: OrderAddressWhereInput | null;
  };

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    productsDetails?: SortOrder;
    shipping?: SortOrder;
    hasShipping?: SortOrder;
    total?: SortOrder;
    status?: SortOrder;
    sentAt?: SortOrder;
    position?: SortOrder;
    businessId?: SortOrder;
    identifier?: SortOrder;
  };

  export type OrderAvgOrderByAggregateInput = {
    shipping?: SortOrder;
    total?: SortOrder;
    position?: SortOrder;
  };

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    shipping?: SortOrder;
    hasShipping?: SortOrder;
    total?: SortOrder;
    status?: SortOrder;
    sentAt?: SortOrder;
    position?: SortOrder;
    businessId?: SortOrder;
    identifier?: SortOrder;
  };

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    shipping?: SortOrder;
    hasShipping?: SortOrder;
    total?: SortOrder;
    status?: SortOrder;
    sentAt?: SortOrder;
    position?: SortOrder;
    businessId?: SortOrder;
    identifier?: SortOrder;
  };

  export type OrderSumOrderByAggregateInput = {
    shipping?: SortOrder;
    total?: SortOrder;
    position?: SortOrder;
  };

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.OrderStatus[]
      | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel>
      | $Enums.OrderStatus;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>;
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>;
  };

  export type ProductRelationFilter = {
    is?: ProductWhereInput;
    isNot?: ProductWhereInput;
  };

  export type OrderRelationFilter = {
    is?: OrderWhereInput;
    isNot?: OrderWhereInput;
  };

  export type OrderProductProductIdOrderIdCompoundUniqueInput = {
    productId: string;
    orderId: string;
  };

  export type OrderProductCountOrderByAggregateInput = {
    productId?: SortOrder;
    orderId?: SortOrder;
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
  };

  export type OrderProductAvgOrderByAggregateInput = {
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
  };

  export type OrderProductMaxOrderByAggregateInput = {
    productId?: SortOrder;
    orderId?: SortOrder;
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
  };

  export type OrderProductMinOrderByAggregateInput = {
    productId?: SortOrder;
    orderId?: SortOrder;
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
  };

  export type OrderProductSumOrderByAggregateInput = {
    price?: SortOrder;
    position?: SortOrder;
    quantity?: SortOrder;
  };

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string;
    providerAccountId: string;
  };

  export type AccountCountOrderByAggregateInput = {
    userId?: SortOrder;
    type?: SortOrder;
    provider?: SortOrder;
    providerAccountId?: SortOrder;
    refresh_token?: SortOrder;
    access_token?: SortOrder;
    expires_at?: SortOrder;
    token_type?: SortOrder;
    scope?: SortOrder;
    id_token?: SortOrder;
    session_state?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder;
  };

  export type AccountMaxOrderByAggregateInput = {
    userId?: SortOrder;
    type?: SortOrder;
    provider?: SortOrder;
    providerAccountId?: SortOrder;
    refresh_token?: SortOrder;
    access_token?: SortOrder;
    expires_at?: SortOrder;
    token_type?: SortOrder;
    scope?: SortOrder;
    id_token?: SortOrder;
    session_state?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type AccountMinOrderByAggregateInput = {
    userId?: SortOrder;
    type?: SortOrder;
    provider?: SortOrder;
    providerAccountId?: SortOrder;
    refresh_token?: SortOrder;
    access_token?: SortOrder;
    expires_at?: SortOrder;
    token_type?: SortOrder;
    scope?: SortOrder;
    id_token?: SortOrder;
    session_state?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder;
  };

  export type SessionCountOrderByAggregateInput = {
    sessionToken?: SortOrder;
    userId?: SortOrder;
    expires?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type SessionMaxOrderByAggregateInput = {
    sessionToken?: SortOrder;
    userId?: SortOrder;
    expires?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type SessionMinOrderByAggregateInput = {
    sessionToken?: SortOrder;
    userId?: SortOrder;
    expires?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string;
    token: string;
  };

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder;
    token?: SortOrder;
    expires?: SortOrder;
  };

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder;
    token?: SortOrder;
    expires?: SortOrder;
  };

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder;
    token?: SortOrder;
    expires?: SortOrder;
  };

  export type AuthenticatorUserIdCredentialIDCompoundUniqueInput = {
    userId: string;
    credentialID: string;
  };

  export type AuthenticatorCountOrderByAggregateInput = {
    credentialID?: SortOrder;
    userId?: SortOrder;
    providerAccountId?: SortOrder;
    credentialPublicKey?: SortOrder;
    counter?: SortOrder;
    credentialDeviceType?: SortOrder;
    credentialBackedUp?: SortOrder;
    transports?: SortOrder;
  };

  export type AuthenticatorAvgOrderByAggregateInput = {
    counter?: SortOrder;
  };

  export type AuthenticatorMaxOrderByAggregateInput = {
    credentialID?: SortOrder;
    userId?: SortOrder;
    providerAccountId?: SortOrder;
    credentialPublicKey?: SortOrder;
    counter?: SortOrder;
    credentialDeviceType?: SortOrder;
    credentialBackedUp?: SortOrder;
    transports?: SortOrder;
  };

  export type AuthenticatorMinOrderByAggregateInput = {
    credentialID?: SortOrder;
    userId?: SortOrder;
    providerAccountId?: SortOrder;
    credentialPublicKey?: SortOrder;
    counter?: SortOrder;
    credentialDeviceType?: SortOrder;
    credentialBackedUp?: SortOrder;
    transports?: SortOrder;
  };

  export type AuthenticatorSumOrderByAggregateInput = {
    counter?: SortOrder;
  };

  export type NeighborhoodNullableRelationFilter = {
    is?: NeighborhoodWhereInput | null;
    isNot?: NeighborhoodWhereInput | null;
  };

  export type UserAddressNullableRelationFilter = {
    is?: UserAddressWhereInput | null;
    isNot?: UserAddressWhereInput | null;
  };

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder;
    alias?: SortOrder;
    name?: SortOrder;
    address?: SortOrder;
    city?: SortOrder;
    state?: SortOrder;
    reference?: SortOrder;
    neighborhoodId?: SortOrder;
  };

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder;
    alias?: SortOrder;
    name?: SortOrder;
    address?: SortOrder;
    city?: SortOrder;
    state?: SortOrder;
    reference?: SortOrder;
    neighborhoodId?: SortOrder;
  };

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder;
    alias?: SortOrder;
    name?: SortOrder;
    address?: SortOrder;
    city?: SortOrder;
    state?: SortOrder;
    reference?: SortOrder;
    neighborhoodId?: SortOrder;
  };

  export type AddressListRelationFilter = {
    every?: AddressWhereInput;
    some?: AddressWhereInput;
    none?: AddressWhereInput;
  };

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type NeighborhoodCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    city?: SortOrder;
  };

  export type NeighborhoodMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    city?: SortOrder;
  };

  export type NeighborhoodMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    city?: SortOrder;
  };

  export type AddressRelationFilter = {
    is?: AddressWhereInput;
    isNot?: AddressWhereInput;
  };

  export type UserAddressCountOrderByAggregateInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    userId?: SortOrder;
    businessId?: SortOrder;
  };

  export type UserAddressMaxOrderByAggregateInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    userId?: SortOrder;
    businessId?: SortOrder;
  };

  export type UserAddressMinOrderByAggregateInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    userId?: SortOrder;
    businessId?: SortOrder;
  };

  export type OrderAddressCountOrderByAggregateInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    orderId?: SortOrder;
  };

  export type OrderAddressMaxOrderByAggregateInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    orderId?: SortOrder;
  };

  export type OrderAddressMinOrderByAggregateInput = {
    id?: SortOrder;
    addressId?: SortOrder;
    orderId?: SortOrder;
  };

  export type NeighborhoodRelationFilter = {
    is?: NeighborhoodWhereInput;
    isNot?: NeighborhoodWhereInput;
  };

  export type BusinessNeighborhoodCountOrderByAggregateInput = {
    id?: SortOrder;
    shipping?: SortOrder;
    active?: SortOrder;
    businessId?: SortOrder;
    neighborhoodId?: SortOrder;
  };

  export type BusinessNeighborhoodAvgOrderByAggregateInput = {
    shipping?: SortOrder;
  };

  export type BusinessNeighborhoodMaxOrderByAggregateInput = {
    id?: SortOrder;
    shipping?: SortOrder;
    active?: SortOrder;
    businessId?: SortOrder;
    neighborhoodId?: SortOrder;
  };

  export type BusinessNeighborhoodMinOrderByAggregateInput = {
    id?: SortOrder;
    shipping?: SortOrder;
    active?: SortOrder;
    businessId?: SortOrder;
    neighborhoodId?: SortOrder;
  };

  export type BusinessNeighborhoodSumOrderByAggregateInput = {
    shipping?: SortOrder;
  };

  export type BusinessCreatecoordinatesInput = {
    set: number[];
  };

  export type PaymentMethodCreateNestedOneWithoutDefaultBusinessInput = {
    create?: XOR<
      PaymentMethodCreateWithoutDefaultBusinessInput,
      PaymentMethodUncheckedCreateWithoutDefaultBusinessInput
    >;
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutDefaultBusinessInput;
    connect?: PaymentMethodWhereUniqueInput;
  };

  export type TelegramBusinessCreateNestedOneWithoutBusinessInput = {
    create?: XOR<
      TelegramBusinessCreateWithoutBusinessInput,
      TelegramBusinessUncheckedCreateWithoutBusinessInput
    >;
    connectOrCreate?: TelegramBusinessCreateOrConnectWithoutBusinessInput;
    connect?: TelegramBusinessWhereUniqueInput;
  };

  export type CategoryCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          CategoryCreateWithoutBusinessInput,
          CategoryUncheckedCreateWithoutBusinessInput
        >
      | CategoryCreateWithoutBusinessInput[]
      | CategoryUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | CategoryCreateOrConnectWithoutBusinessInput
      | CategoryCreateOrConnectWithoutBusinessInput[];
    createMany?: CategoryCreateManyBusinessInputEnvelope;
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
  };

  export type ProductCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          ProductCreateWithoutBusinessInput,
          ProductUncheckedCreateWithoutBusinessInput
        >
      | ProductCreateWithoutBusinessInput[]
      | ProductUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutBusinessInput
      | ProductCreateOrConnectWithoutBusinessInput[];
    createMany?: ProductCreateManyBusinessInputEnvelope;
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
  };

  export type OrderCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          OrderCreateWithoutBusinessInput,
          OrderUncheckedCreateWithoutBusinessInput
        >
      | OrderCreateWithoutBusinessInput[]
      | OrderUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutBusinessInput
      | OrderCreateOrConnectWithoutBusinessInput[];
    createMany?: OrderCreateManyBusinessInputEnvelope;
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
  };

  export type UserBusinessCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutBusinessInput,
          UserBusinessUncheckedCreateWithoutBusinessInput
        >
      | UserBusinessCreateWithoutBusinessInput[]
      | UserBusinessUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutBusinessInput
      | UserBusinessCreateOrConnectWithoutBusinessInput[];
    createMany?: UserBusinessCreateManyBusinessInputEnvelope;
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
  };

  export type BusinessNeighborhoodCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          BusinessNeighborhoodCreateWithoutBusinessInput,
          BusinessNeighborhoodUncheckedCreateWithoutBusinessInput
        >
      | BusinessNeighborhoodCreateWithoutBusinessInput[]
      | BusinessNeighborhoodUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput
      | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput[];
    createMany?: BusinessNeighborhoodCreateManyBusinessInputEnvelope;
    connect?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
  };

  export type UserAddressCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutBusinessInput,
          UserAddressUncheckedCreateWithoutBusinessInput
        >
      | UserAddressCreateWithoutBusinessInput[]
      | UserAddressUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutBusinessInput
      | UserAddressCreateOrConnectWithoutBusinessInput[];
    createMany?: UserAddressCreateManyBusinessInputEnvelope;
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
  };

  export type PaymentMethodCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          PaymentMethodCreateWithoutBusinessInput,
          PaymentMethodUncheckedCreateWithoutBusinessInput
        >
      | PaymentMethodCreateWithoutBusinessInput[]
      | PaymentMethodUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | PaymentMethodCreateOrConnectWithoutBusinessInput
      | PaymentMethodCreateOrConnectWithoutBusinessInput[];
    createMany?: PaymentMethodCreateManyBusinessInputEnvelope;
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
  };

  export type InvitationLinkCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          InvitationLinkCreateWithoutBusinessInput,
          InvitationLinkUncheckedCreateWithoutBusinessInput
        >
      | InvitationLinkCreateWithoutBusinessInput[]
      | InvitationLinkUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | InvitationLinkCreateOrConnectWithoutBusinessInput
      | InvitationLinkCreateOrConnectWithoutBusinessInput[];
    createMany?: InvitationLinkCreateManyBusinessInputEnvelope;
    connect?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
  };

  export type TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput = {
    create?: XOR<
      TelegramBusinessCreateWithoutBusinessInput,
      TelegramBusinessUncheckedCreateWithoutBusinessInput
    >;
    connectOrCreate?: TelegramBusinessCreateOrConnectWithoutBusinessInput;
    connect?: TelegramBusinessWhereUniqueInput;
  };

  export type CategoryUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          CategoryCreateWithoutBusinessInput,
          CategoryUncheckedCreateWithoutBusinessInput
        >
      | CategoryCreateWithoutBusinessInput[]
      | CategoryUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | CategoryCreateOrConnectWithoutBusinessInput
      | CategoryCreateOrConnectWithoutBusinessInput[];
    createMany?: CategoryCreateManyBusinessInputEnvelope;
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
  };

  export type ProductUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          ProductCreateWithoutBusinessInput,
          ProductUncheckedCreateWithoutBusinessInput
        >
      | ProductCreateWithoutBusinessInput[]
      | ProductUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutBusinessInput
      | ProductCreateOrConnectWithoutBusinessInput[];
    createMany?: ProductCreateManyBusinessInputEnvelope;
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
  };

  export type OrderUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          OrderCreateWithoutBusinessInput,
          OrderUncheckedCreateWithoutBusinessInput
        >
      | OrderCreateWithoutBusinessInput[]
      | OrderUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutBusinessInput
      | OrderCreateOrConnectWithoutBusinessInput[];
    createMany?: OrderCreateManyBusinessInputEnvelope;
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
  };

  export type UserBusinessUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutBusinessInput,
          UserBusinessUncheckedCreateWithoutBusinessInput
        >
      | UserBusinessCreateWithoutBusinessInput[]
      | UserBusinessUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutBusinessInput
      | UserBusinessCreateOrConnectWithoutBusinessInput[];
    createMany?: UserBusinessCreateManyBusinessInputEnvelope;
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
  };

  export type BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput =
    {
      create?:
        | XOR<
            BusinessNeighborhoodCreateWithoutBusinessInput,
            BusinessNeighborhoodUncheckedCreateWithoutBusinessInput
          >
        | BusinessNeighborhoodCreateWithoutBusinessInput[]
        | BusinessNeighborhoodUncheckedCreateWithoutBusinessInput[];
      connectOrCreate?:
        | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput
        | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput[];
      createMany?: BusinessNeighborhoodCreateManyBusinessInputEnvelope;
      connect?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
    };

  export type UserAddressUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutBusinessInput,
          UserAddressUncheckedCreateWithoutBusinessInput
        >
      | UserAddressCreateWithoutBusinessInput[]
      | UserAddressUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutBusinessInput
      | UserAddressCreateOrConnectWithoutBusinessInput[];
    createMany?: UserAddressCreateManyBusinessInputEnvelope;
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
  };

  export type PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          PaymentMethodCreateWithoutBusinessInput,
          PaymentMethodUncheckedCreateWithoutBusinessInput
        >
      | PaymentMethodCreateWithoutBusinessInput[]
      | PaymentMethodUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | PaymentMethodCreateOrConnectWithoutBusinessInput
      | PaymentMethodCreateOrConnectWithoutBusinessInput[];
    createMany?: PaymentMethodCreateManyBusinessInputEnvelope;
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
  };

  export type InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput = {
    create?:
      | XOR<
          InvitationLinkCreateWithoutBusinessInput,
          InvitationLinkUncheckedCreateWithoutBusinessInput
        >
      | InvitationLinkCreateWithoutBusinessInput[]
      | InvitationLinkUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | InvitationLinkCreateOrConnectWithoutBusinessInput
      | InvitationLinkCreateOrConnectWithoutBusinessInput[];
    createMany?: InvitationLinkCreateManyBusinessInputEnvelope;
    connect?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
  };

  export type StringFieldUpdateOperationsInput = {
    set?: string;
  };

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null;
  };

  export type BusinessUpdatecoordinatesInput = {
    set?: number[];
    push?: number | number[];
  };

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean;
  };

  export type EnumBusinessPlanFieldUpdateOperationsInput = {
    set?: $Enums.BusinessPlan;
  };

  export type PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput = {
    create?: XOR<
      PaymentMethodCreateWithoutDefaultBusinessInput,
      PaymentMethodUncheckedCreateWithoutDefaultBusinessInput
    >;
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutDefaultBusinessInput;
    upsert?: PaymentMethodUpsertWithoutDefaultBusinessInput;
    disconnect?: PaymentMethodWhereInput | boolean;
    delete?: PaymentMethodWhereInput | boolean;
    connect?: PaymentMethodWhereUniqueInput;
    update?: XOR<
      XOR<
        PaymentMethodUpdateToOneWithWhereWithoutDefaultBusinessInput,
        PaymentMethodUpdateWithoutDefaultBusinessInput
      >,
      PaymentMethodUncheckedUpdateWithoutDefaultBusinessInput
    >;
  };

  export type TelegramBusinessUpdateOneWithoutBusinessNestedInput = {
    create?: XOR<
      TelegramBusinessCreateWithoutBusinessInput,
      TelegramBusinessUncheckedCreateWithoutBusinessInput
    >;
    connectOrCreate?: TelegramBusinessCreateOrConnectWithoutBusinessInput;
    upsert?: TelegramBusinessUpsertWithoutBusinessInput;
    disconnect?: TelegramBusinessWhereInput | boolean;
    delete?: TelegramBusinessWhereInput | boolean;
    connect?: TelegramBusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        TelegramBusinessUpdateToOneWithWhereWithoutBusinessInput,
        TelegramBusinessUpdateWithoutBusinessInput
      >,
      TelegramBusinessUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type CategoryUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          CategoryCreateWithoutBusinessInput,
          CategoryUncheckedCreateWithoutBusinessInput
        >
      | CategoryCreateWithoutBusinessInput[]
      | CategoryUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | CategoryCreateOrConnectWithoutBusinessInput
      | CategoryCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | CategoryUpsertWithWhereUniqueWithoutBusinessInput
      | CategoryUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: CategoryCreateManyBusinessInputEnvelope;
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    update?:
      | CategoryUpdateWithWhereUniqueWithoutBusinessInput
      | CategoryUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | CategoryUpdateManyWithWhereWithoutBusinessInput
      | CategoryUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[];
  };

  export type ProductUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          ProductCreateWithoutBusinessInput,
          ProductUncheckedCreateWithoutBusinessInput
        >
      | ProductCreateWithoutBusinessInput[]
      | ProductUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutBusinessInput
      | ProductCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | ProductUpsertWithWhereUniqueWithoutBusinessInput
      | ProductUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: ProductCreateManyBusinessInputEnvelope;
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    update?:
      | ProductUpdateWithWhereUniqueWithoutBusinessInput
      | ProductUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | ProductUpdateManyWithWhereWithoutBusinessInput
      | ProductUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[];
  };

  export type OrderUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          OrderCreateWithoutBusinessInput,
          OrderUncheckedCreateWithoutBusinessInput
        >
      | OrderCreateWithoutBusinessInput[]
      | OrderUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutBusinessInput
      | OrderCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | OrderUpsertWithWhereUniqueWithoutBusinessInput
      | OrderUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: OrderCreateManyBusinessInputEnvelope;
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    update?:
      | OrderUpdateWithWhereUniqueWithoutBusinessInput
      | OrderUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | OrderUpdateManyWithWhereWithoutBusinessInput
      | OrderUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[];
  };

  export type UserBusinessUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutBusinessInput,
          UserBusinessUncheckedCreateWithoutBusinessInput
        >
      | UserBusinessCreateWithoutBusinessInput[]
      | UserBusinessUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutBusinessInput
      | UserBusinessCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | UserBusinessUpsertWithWhereUniqueWithoutBusinessInput
      | UserBusinessUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: UserBusinessCreateManyBusinessInputEnvelope;
    set?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    disconnect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    delete?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    update?:
      | UserBusinessUpdateWithWhereUniqueWithoutBusinessInput
      | UserBusinessUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | UserBusinessUpdateManyWithWhereWithoutBusinessInput
      | UserBusinessUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: UserBusinessScalarWhereInput | UserBusinessScalarWhereInput[];
  };

  export type BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          BusinessNeighborhoodCreateWithoutBusinessInput,
          BusinessNeighborhoodUncheckedCreateWithoutBusinessInput
        >
      | BusinessNeighborhoodCreateWithoutBusinessInput[]
      | BusinessNeighborhoodUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput
      | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | BusinessNeighborhoodUpsertWithWhereUniqueWithoutBusinessInput
      | BusinessNeighborhoodUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: BusinessNeighborhoodCreateManyBusinessInputEnvelope;
    set?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    disconnect?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    delete?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    connect?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    update?:
      | BusinessNeighborhoodUpdateWithWhereUniqueWithoutBusinessInput
      | BusinessNeighborhoodUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | BusinessNeighborhoodUpdateManyWithWhereWithoutBusinessInput
      | BusinessNeighborhoodUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?:
      | BusinessNeighborhoodScalarWhereInput
      | BusinessNeighborhoodScalarWhereInput[];
  };

  export type UserAddressUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutBusinessInput,
          UserAddressUncheckedCreateWithoutBusinessInput
        >
      | UserAddressCreateWithoutBusinessInput[]
      | UserAddressUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutBusinessInput
      | UserAddressCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | UserAddressUpsertWithWhereUniqueWithoutBusinessInput
      | UserAddressUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: UserAddressCreateManyBusinessInputEnvelope;
    set?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    disconnect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    delete?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    update?:
      | UserAddressUpdateWithWhereUniqueWithoutBusinessInput
      | UserAddressUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | UserAddressUpdateManyWithWhereWithoutBusinessInput
      | UserAddressUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[];
  };

  export type PaymentMethodUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          PaymentMethodCreateWithoutBusinessInput,
          PaymentMethodUncheckedCreateWithoutBusinessInput
        >
      | PaymentMethodCreateWithoutBusinessInput[]
      | PaymentMethodUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | PaymentMethodCreateOrConnectWithoutBusinessInput
      | PaymentMethodCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | PaymentMethodUpsertWithWhereUniqueWithoutBusinessInput
      | PaymentMethodUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: PaymentMethodCreateManyBusinessInputEnvelope;
    set?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
    disconnect?:
      | PaymentMethodWhereUniqueInput
      | PaymentMethodWhereUniqueInput[];
    delete?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
    update?:
      | PaymentMethodUpdateWithWhereUniqueWithoutBusinessInput
      | PaymentMethodUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | PaymentMethodUpdateManyWithWhereWithoutBusinessInput
      | PaymentMethodUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?:
      | PaymentMethodScalarWhereInput
      | PaymentMethodScalarWhereInput[];
  };

  export type InvitationLinkUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          InvitationLinkCreateWithoutBusinessInput,
          InvitationLinkUncheckedCreateWithoutBusinessInput
        >
      | InvitationLinkCreateWithoutBusinessInput[]
      | InvitationLinkUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | InvitationLinkCreateOrConnectWithoutBusinessInput
      | InvitationLinkCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | InvitationLinkUpsertWithWhereUniqueWithoutBusinessInput
      | InvitationLinkUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: InvitationLinkCreateManyBusinessInputEnvelope;
    set?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
    disconnect?:
      | InvitationLinkWhereUniqueInput
      | InvitationLinkWhereUniqueInput[];
    delete?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
    connect?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
    update?:
      | InvitationLinkUpdateWithWhereUniqueWithoutBusinessInput
      | InvitationLinkUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | InvitationLinkUpdateManyWithWhereWithoutBusinessInput
      | InvitationLinkUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?:
      | InvitationLinkScalarWhereInput
      | InvitationLinkScalarWhereInput[];
  };

  export type TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput = {
    create?: XOR<
      TelegramBusinessCreateWithoutBusinessInput,
      TelegramBusinessUncheckedCreateWithoutBusinessInput
    >;
    connectOrCreate?: TelegramBusinessCreateOrConnectWithoutBusinessInput;
    upsert?: TelegramBusinessUpsertWithoutBusinessInput;
    disconnect?: TelegramBusinessWhereInput | boolean;
    delete?: TelegramBusinessWhereInput | boolean;
    connect?: TelegramBusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        TelegramBusinessUpdateToOneWithWhereWithoutBusinessInput,
        TelegramBusinessUpdateWithoutBusinessInput
      >,
      TelegramBusinessUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type CategoryUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          CategoryCreateWithoutBusinessInput,
          CategoryUncheckedCreateWithoutBusinessInput
        >
      | CategoryCreateWithoutBusinessInput[]
      | CategoryUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | CategoryCreateOrConnectWithoutBusinessInput
      | CategoryCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | CategoryUpsertWithWhereUniqueWithoutBusinessInput
      | CategoryUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: CategoryCreateManyBusinessInputEnvelope;
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[];
    update?:
      | CategoryUpdateWithWhereUniqueWithoutBusinessInput
      | CategoryUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | CategoryUpdateManyWithWhereWithoutBusinessInput
      | CategoryUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[];
  };

  export type ProductUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          ProductCreateWithoutBusinessInput,
          ProductUncheckedCreateWithoutBusinessInput
        >
      | ProductCreateWithoutBusinessInput[]
      | ProductUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutBusinessInput
      | ProductCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | ProductUpsertWithWhereUniqueWithoutBusinessInput
      | ProductUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: ProductCreateManyBusinessInputEnvelope;
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    update?:
      | ProductUpdateWithWhereUniqueWithoutBusinessInput
      | ProductUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | ProductUpdateManyWithWhereWithoutBusinessInput
      | ProductUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[];
  };

  export type OrderUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          OrderCreateWithoutBusinessInput,
          OrderUncheckedCreateWithoutBusinessInput
        >
      | OrderCreateWithoutBusinessInput[]
      | OrderUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutBusinessInput
      | OrderCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | OrderUpsertWithWhereUniqueWithoutBusinessInput
      | OrderUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: OrderCreateManyBusinessInputEnvelope;
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    update?:
      | OrderUpdateWithWhereUniqueWithoutBusinessInput
      | OrderUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | OrderUpdateManyWithWhereWithoutBusinessInput
      | OrderUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[];
  };

  export type UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutBusinessInput,
          UserBusinessUncheckedCreateWithoutBusinessInput
        >
      | UserBusinessCreateWithoutBusinessInput[]
      | UserBusinessUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutBusinessInput
      | UserBusinessCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | UserBusinessUpsertWithWhereUniqueWithoutBusinessInput
      | UserBusinessUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: UserBusinessCreateManyBusinessInputEnvelope;
    set?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    disconnect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    delete?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    update?:
      | UserBusinessUpdateWithWhereUniqueWithoutBusinessInput
      | UserBusinessUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | UserBusinessUpdateManyWithWhereWithoutBusinessInput
      | UserBusinessUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: UserBusinessScalarWhereInput | UserBusinessScalarWhereInput[];
  };

  export type BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput =
    {
      create?:
        | XOR<
            BusinessNeighborhoodCreateWithoutBusinessInput,
            BusinessNeighborhoodUncheckedCreateWithoutBusinessInput
          >
        | BusinessNeighborhoodCreateWithoutBusinessInput[]
        | BusinessNeighborhoodUncheckedCreateWithoutBusinessInput[];
      connectOrCreate?:
        | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput
        | BusinessNeighborhoodCreateOrConnectWithoutBusinessInput[];
      upsert?:
        | BusinessNeighborhoodUpsertWithWhereUniqueWithoutBusinessInput
        | BusinessNeighborhoodUpsertWithWhereUniqueWithoutBusinessInput[];
      createMany?: BusinessNeighborhoodCreateManyBusinessInputEnvelope;
      set?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      disconnect?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      delete?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      connect?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      update?:
        | BusinessNeighborhoodUpdateWithWhereUniqueWithoutBusinessInput
        | BusinessNeighborhoodUpdateWithWhereUniqueWithoutBusinessInput[];
      updateMany?:
        | BusinessNeighborhoodUpdateManyWithWhereWithoutBusinessInput
        | BusinessNeighborhoodUpdateManyWithWhereWithoutBusinessInput[];
      deleteMany?:
        | BusinessNeighborhoodScalarWhereInput
        | BusinessNeighborhoodScalarWhereInput[];
    };

  export type UserAddressUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutBusinessInput,
          UserAddressUncheckedCreateWithoutBusinessInput
        >
      | UserAddressCreateWithoutBusinessInput[]
      | UserAddressUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutBusinessInput
      | UserAddressCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | UserAddressUpsertWithWhereUniqueWithoutBusinessInput
      | UserAddressUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: UserAddressCreateManyBusinessInputEnvelope;
    set?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    disconnect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    delete?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    update?:
      | UserAddressUpdateWithWhereUniqueWithoutBusinessInput
      | UserAddressUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | UserAddressUpdateManyWithWhereWithoutBusinessInput
      | UserAddressUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[];
  };

  export type PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          PaymentMethodCreateWithoutBusinessInput,
          PaymentMethodUncheckedCreateWithoutBusinessInput
        >
      | PaymentMethodCreateWithoutBusinessInput[]
      | PaymentMethodUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | PaymentMethodCreateOrConnectWithoutBusinessInput
      | PaymentMethodCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | PaymentMethodUpsertWithWhereUniqueWithoutBusinessInput
      | PaymentMethodUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: PaymentMethodCreateManyBusinessInputEnvelope;
    set?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
    disconnect?:
      | PaymentMethodWhereUniqueInput
      | PaymentMethodWhereUniqueInput[];
    delete?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[];
    update?:
      | PaymentMethodUpdateWithWhereUniqueWithoutBusinessInput
      | PaymentMethodUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | PaymentMethodUpdateManyWithWhereWithoutBusinessInput
      | PaymentMethodUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?:
      | PaymentMethodScalarWhereInput
      | PaymentMethodScalarWhereInput[];
  };

  export type InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?:
      | XOR<
          InvitationLinkCreateWithoutBusinessInput,
          InvitationLinkUncheckedCreateWithoutBusinessInput
        >
      | InvitationLinkCreateWithoutBusinessInput[]
      | InvitationLinkUncheckedCreateWithoutBusinessInput[];
    connectOrCreate?:
      | InvitationLinkCreateOrConnectWithoutBusinessInput
      | InvitationLinkCreateOrConnectWithoutBusinessInput[];
    upsert?:
      | InvitationLinkUpsertWithWhereUniqueWithoutBusinessInput
      | InvitationLinkUpsertWithWhereUniqueWithoutBusinessInput[];
    createMany?: InvitationLinkCreateManyBusinessInputEnvelope;
    set?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
    disconnect?:
      | InvitationLinkWhereUniqueInput
      | InvitationLinkWhereUniqueInput[];
    delete?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
    connect?: InvitationLinkWhereUniqueInput | InvitationLinkWhereUniqueInput[];
    update?:
      | InvitationLinkUpdateWithWhereUniqueWithoutBusinessInput
      | InvitationLinkUpdateWithWhereUniqueWithoutBusinessInput[];
    updateMany?:
      | InvitationLinkUpdateManyWithWhereWithoutBusinessInput
      | InvitationLinkUpdateManyWithWhereWithoutBusinessInput[];
    deleteMany?:
      | InvitationLinkScalarWhereInput
      | InvitationLinkScalarWhereInput[];
  };

  export type BusinessCreateNestedOneWithoutTelegramInput = {
    create?: XOR<
      BusinessCreateWithoutTelegramInput,
      BusinessUncheckedCreateWithoutTelegramInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutTelegramInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type BusinessUpdateOneRequiredWithoutTelegramNestedInput = {
    create?: XOR<
      BusinessCreateWithoutTelegramInput,
      BusinessUncheckedCreateWithoutTelegramInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutTelegramInput;
    upsert?: BusinessUpsertWithoutTelegramInput;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutTelegramInput,
        BusinessUpdateWithoutTelegramInput
      >,
      BusinessUncheckedUpdateWithoutTelegramInput
    >;
  };

  export type BusinessCreateNestedOneWithoutPaymentMethodInput = {
    create?: XOR<
      BusinessCreateWithoutPaymentMethodInput,
      BusinessUncheckedCreateWithoutPaymentMethodInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutPaymentMethodInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type BusinessCreateNestedOneWithoutDefaultPaymentMethodInput = {
    create?: XOR<
      BusinessCreateWithoutDefaultPaymentMethodInput,
      BusinessUncheckedCreateWithoutDefaultPaymentMethodInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutDefaultPaymentMethodInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type BusinessUncheckedCreateNestedOneWithoutDefaultPaymentMethodInput =
    {
      create?: XOR<
        BusinessCreateWithoutDefaultPaymentMethodInput,
        BusinessUncheckedCreateWithoutDefaultPaymentMethodInput
      >;
      connectOrCreate?: BusinessCreateOrConnectWithoutDefaultPaymentMethodInput;
      connect?: BusinessWhereUniqueInput;
    };

  export type EnumPaymentMethodTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethodType;
  };

  export type BusinessUpdateOneRequiredWithoutPaymentMethodNestedInput = {
    create?: XOR<
      BusinessCreateWithoutPaymentMethodInput,
      BusinessUncheckedCreateWithoutPaymentMethodInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutPaymentMethodInput;
    upsert?: BusinessUpsertWithoutPaymentMethodInput;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutPaymentMethodInput,
        BusinessUpdateWithoutPaymentMethodInput
      >,
      BusinessUncheckedUpdateWithoutPaymentMethodInput
    >;
  };

  export type BusinessUpdateOneWithoutDefaultPaymentMethodNestedInput = {
    create?: XOR<
      BusinessCreateWithoutDefaultPaymentMethodInput,
      BusinessUncheckedCreateWithoutDefaultPaymentMethodInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutDefaultPaymentMethodInput;
    upsert?: BusinessUpsertWithoutDefaultPaymentMethodInput;
    disconnect?: BusinessWhereInput | boolean;
    delete?: BusinessWhereInput | boolean;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutDefaultPaymentMethodInput,
        BusinessUpdateWithoutDefaultPaymentMethodInput
      >,
      BusinessUncheckedUpdateWithoutDefaultPaymentMethodInput
    >;
  };

  export type BusinessUncheckedUpdateOneWithoutDefaultPaymentMethodNestedInput =
    {
      create?: XOR<
        BusinessCreateWithoutDefaultPaymentMethodInput,
        BusinessUncheckedCreateWithoutDefaultPaymentMethodInput
      >;
      connectOrCreate?: BusinessCreateOrConnectWithoutDefaultPaymentMethodInput;
      upsert?: BusinessUpsertWithoutDefaultPaymentMethodInput;
      disconnect?: BusinessWhereInput | boolean;
      delete?: BusinessWhereInput | boolean;
      connect?: BusinessWhereUniqueInput;
      update?: XOR<
        XOR<
          BusinessUpdateToOneWithWhereWithoutDefaultPaymentMethodInput,
          BusinessUpdateWithoutDefaultPaymentMethodInput
        >,
        BusinessUncheckedUpdateWithoutDefaultPaymentMethodInput
      >;
    };

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?:
      | XOR<
          ProductCreateWithoutCategoryInput,
          ProductUncheckedCreateWithoutCategoryInput
        >
      | ProductCreateWithoutCategoryInput[]
      | ProductUncheckedCreateWithoutCategoryInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutCategoryInput
      | ProductCreateOrConnectWithoutCategoryInput[];
    createMany?: ProductCreateManyCategoryInputEnvelope;
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
  };

  export type BusinessCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<
      BusinessCreateWithoutCategoriesInput,
      BusinessUncheckedCreateWithoutCategoriesInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutCategoriesInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?:
      | XOR<
          ProductCreateWithoutCategoryInput,
          ProductUncheckedCreateWithoutCategoryInput
        >
      | ProductCreateWithoutCategoryInput[]
      | ProductUncheckedCreateWithoutCategoryInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutCategoryInput
      | ProductCreateOrConnectWithoutCategoryInput[];
    createMany?: ProductCreateManyCategoryInputEnvelope;
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
  };

  export type IntFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?:
      | XOR<
          ProductCreateWithoutCategoryInput,
          ProductUncheckedCreateWithoutCategoryInput
        >
      | ProductCreateWithoutCategoryInput[]
      | ProductUncheckedCreateWithoutCategoryInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutCategoryInput
      | ProductCreateOrConnectWithoutCategoryInput[];
    upsert?:
      | ProductUpsertWithWhereUniqueWithoutCategoryInput
      | ProductUpsertWithWhereUniqueWithoutCategoryInput[];
    createMany?: ProductCreateManyCategoryInputEnvelope;
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    update?:
      | ProductUpdateWithWhereUniqueWithoutCategoryInput
      | ProductUpdateWithWhereUniqueWithoutCategoryInput[];
    updateMany?:
      | ProductUpdateManyWithWhereWithoutCategoryInput
      | ProductUpdateManyWithWhereWithoutCategoryInput[];
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[];
  };

  export type BusinessUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<
      BusinessCreateWithoutCategoriesInput,
      BusinessUncheckedCreateWithoutCategoriesInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutCategoriesInput;
    upsert?: BusinessUpsertWithoutCategoriesInput;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutCategoriesInput,
        BusinessUpdateWithoutCategoriesInput
      >,
      BusinessUncheckedUpdateWithoutCategoriesInput
    >;
  };

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?:
      | XOR<
          ProductCreateWithoutCategoryInput,
          ProductUncheckedCreateWithoutCategoryInput
        >
      | ProductCreateWithoutCategoryInput[]
      | ProductUncheckedCreateWithoutCategoryInput[];
    connectOrCreate?:
      | ProductCreateOrConnectWithoutCategoryInput
      | ProductCreateOrConnectWithoutCategoryInput[];
    upsert?:
      | ProductUpsertWithWhereUniqueWithoutCategoryInput
      | ProductUpsertWithWhereUniqueWithoutCategoryInput[];
    createMany?: ProductCreateManyCategoryInputEnvelope;
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[];
    update?:
      | ProductUpdateWithWhereUniqueWithoutCategoryInput
      | ProductUpdateWithWhereUniqueWithoutCategoryInput[];
    updateMany?:
      | ProductUpdateManyWithWhereWithoutCategoryInput
      | ProductUpdateManyWithWhereWithoutCategoryInput[];
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[];
  };

  export type ProductCreateimagesInput = {
    set: InputJsonValue[];
  };

  export type BusinessCreateNestedOneWithoutProductsInput = {
    create?: XOR<
      BusinessCreateWithoutProductsInput,
      BusinessUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutProductsInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput;
    connect?: CategoryWhereUniqueInput;
  };

  export type OrderProductCreateNestedManyWithoutProductInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutProductInput,
          OrderProductUncheckedCreateWithoutProductInput
        >
      | OrderProductCreateWithoutProductInput[]
      | OrderProductUncheckedCreateWithoutProductInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutProductInput
      | OrderProductCreateOrConnectWithoutProductInput[];
    createMany?: OrderProductCreateManyProductInputEnvelope;
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
  };

  export type OrderProductUncheckedCreateNestedManyWithoutProductInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutProductInput,
          OrderProductUncheckedCreateWithoutProductInput
        >
      | OrderProductCreateWithoutProductInput[]
      | OrderProductUncheckedCreateWithoutProductInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutProductInput
      | OrderProductCreateOrConnectWithoutProductInput[];
    createMany?: OrderProductCreateManyProductInputEnvelope;
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
  };

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type ProductUpdateimagesInput = {
    set?: InputJsonValue[];
    push?: InputJsonValue | InputJsonValue[];
  };

  export type BusinessUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<
      BusinessCreateWithoutProductsInput,
      BusinessUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutProductsInput;
    upsert?: BusinessUpsertWithoutProductsInput;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutProductsInput,
        BusinessUpdateWithoutProductsInput
      >,
      BusinessUncheckedUpdateWithoutProductsInput
    >;
  };

  export type CategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput;
    upsert?: CategoryUpsertWithoutProductsInput;
    disconnect?: CategoryWhereInput | boolean;
    delete?: CategoryWhereInput | boolean;
    connect?: CategoryWhereUniqueInput;
    update?: XOR<
      XOR<
        CategoryUpdateToOneWithWhereWithoutProductsInput,
        CategoryUpdateWithoutProductsInput
      >,
      CategoryUncheckedUpdateWithoutProductsInput
    >;
  };

  export type OrderProductUpdateManyWithoutProductNestedInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutProductInput,
          OrderProductUncheckedCreateWithoutProductInput
        >
      | OrderProductCreateWithoutProductInput[]
      | OrderProductUncheckedCreateWithoutProductInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutProductInput
      | OrderProductCreateOrConnectWithoutProductInput[];
    upsert?:
      | OrderProductUpsertWithWhereUniqueWithoutProductInput
      | OrderProductUpsertWithWhereUniqueWithoutProductInput[];
    createMany?: OrderProductCreateManyProductInputEnvelope;
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    update?:
      | OrderProductUpdateWithWhereUniqueWithoutProductInput
      | OrderProductUpdateWithWhereUniqueWithoutProductInput[];
    updateMany?:
      | OrderProductUpdateManyWithWhereWithoutProductInput
      | OrderProductUpdateManyWithWhereWithoutProductInput[];
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[];
  };

  export type OrderProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutProductInput,
          OrderProductUncheckedCreateWithoutProductInput
        >
      | OrderProductCreateWithoutProductInput[]
      | OrderProductUncheckedCreateWithoutProductInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutProductInput
      | OrderProductCreateOrConnectWithoutProductInput[];
    upsert?:
      | OrderProductUpsertWithWhereUniqueWithoutProductInput
      | OrderProductUpsertWithWhereUniqueWithoutProductInput[];
    createMany?: OrderProductCreateManyProductInputEnvelope;
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    update?:
      | OrderProductUpdateWithWhereUniqueWithoutProductInput
      | OrderProductUpdateWithWhereUniqueWithoutProductInput[];
    updateMany?:
      | OrderProductUpdateManyWithWhereWithoutProductInput
      | OrderProductUpdateManyWithWhereWithoutProductInput[];
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[];
  };

  export type OrderCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
      | OrderCreateWithoutUserInput[]
      | OrderUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutUserInput
      | OrderCreateOrConnectWithoutUserInput[];
    createMany?: OrderCreateManyUserInputEnvelope;
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
  };

  export type AccountCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          AccountCreateWithoutUserInput,
          AccountUncheckedCreateWithoutUserInput
        >
      | AccountCreateWithoutUserInput[]
      | AccountUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AccountCreateOrConnectWithoutUserInput
      | AccountCreateOrConnectWithoutUserInput[];
    createMany?: AccountCreateManyUserInputEnvelope;
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
  };

  export type SessionCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          SessionCreateWithoutUserInput,
          SessionUncheckedCreateWithoutUserInput
        >
      | SessionCreateWithoutUserInput[]
      | SessionUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | SessionCreateOrConnectWithoutUserInput
      | SessionCreateOrConnectWithoutUserInput[];
    createMany?: SessionCreateManyUserInputEnvelope;
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
  };

  export type AuthenticatorCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          AuthenticatorCreateWithoutUserInput,
          AuthenticatorUncheckedCreateWithoutUserInput
        >
      | AuthenticatorCreateWithoutUserInput[]
      | AuthenticatorUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AuthenticatorCreateOrConnectWithoutUserInput
      | AuthenticatorCreateOrConnectWithoutUserInput[];
    createMany?: AuthenticatorCreateManyUserInputEnvelope;
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
  };

  export type UserBusinessCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutUserInput,
          UserBusinessUncheckedCreateWithoutUserInput
        >
      | UserBusinessCreateWithoutUserInput[]
      | UserBusinessUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutUserInput
      | UserBusinessCreateOrConnectWithoutUserInput[];
    createMany?: UserBusinessCreateManyUserInputEnvelope;
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
  };

  export type UserAddressCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutUserInput,
          UserAddressUncheckedCreateWithoutUserInput
        >
      | UserAddressCreateWithoutUserInput[]
      | UserAddressUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutUserInput
      | UserAddressCreateOrConnectWithoutUserInput[];
    createMany?: UserAddressCreateManyUserInputEnvelope;
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
  };

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
      | OrderCreateWithoutUserInput[]
      | OrderUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutUserInput
      | OrderCreateOrConnectWithoutUserInput[];
    createMany?: OrderCreateManyUserInputEnvelope;
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
  };

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          AccountCreateWithoutUserInput,
          AccountUncheckedCreateWithoutUserInput
        >
      | AccountCreateWithoutUserInput[]
      | AccountUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AccountCreateOrConnectWithoutUserInput
      | AccountCreateOrConnectWithoutUserInput[];
    createMany?: AccountCreateManyUserInputEnvelope;
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
  };

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          SessionCreateWithoutUserInput,
          SessionUncheckedCreateWithoutUserInput
        >
      | SessionCreateWithoutUserInput[]
      | SessionUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | SessionCreateOrConnectWithoutUserInput
      | SessionCreateOrConnectWithoutUserInput[];
    createMany?: SessionCreateManyUserInputEnvelope;
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
  };

  export type AuthenticatorUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          AuthenticatorCreateWithoutUserInput,
          AuthenticatorUncheckedCreateWithoutUserInput
        >
      | AuthenticatorCreateWithoutUserInput[]
      | AuthenticatorUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AuthenticatorCreateOrConnectWithoutUserInput
      | AuthenticatorCreateOrConnectWithoutUserInput[];
    createMany?: AuthenticatorCreateManyUserInputEnvelope;
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
  };

  export type UserBusinessUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutUserInput,
          UserBusinessUncheckedCreateWithoutUserInput
        >
      | UserBusinessCreateWithoutUserInput[]
      | UserBusinessUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutUserInput
      | UserBusinessCreateOrConnectWithoutUserInput[];
    createMany?: UserBusinessCreateManyUserInputEnvelope;
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
  };

  export type UserAddressUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutUserInput,
          UserAddressUncheckedCreateWithoutUserInput
        >
      | UserAddressCreateWithoutUserInput[]
      | UserAddressUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutUserInput
      | UserAddressCreateOrConnectWithoutUserInput[];
    createMany?: UserAddressCreateManyUserInputEnvelope;
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
  };

  export type EnumUserRolesFieldUpdateOperationsInput = {
    set?: $Enums.UserRoles;
  };

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null;
  };

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string;
  };

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
      | OrderCreateWithoutUserInput[]
      | OrderUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutUserInput
      | OrderCreateOrConnectWithoutUserInput[];
    upsert?:
      | OrderUpsertWithWhereUniqueWithoutUserInput
      | OrderUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: OrderCreateManyUserInputEnvelope;
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    update?:
      | OrderUpdateWithWhereUniqueWithoutUserInput
      | OrderUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | OrderUpdateManyWithWhereWithoutUserInput
      | OrderUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[];
  };

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          AccountCreateWithoutUserInput,
          AccountUncheckedCreateWithoutUserInput
        >
      | AccountCreateWithoutUserInput[]
      | AccountUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AccountCreateOrConnectWithoutUserInput
      | AccountCreateOrConnectWithoutUserInput[];
    upsert?:
      | AccountUpsertWithWhereUniqueWithoutUserInput
      | AccountUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: AccountCreateManyUserInputEnvelope;
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    update?:
      | AccountUpdateWithWhereUniqueWithoutUserInput
      | AccountUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | AccountUpdateManyWithWhereWithoutUserInput
      | AccountUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[];
  };

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          SessionCreateWithoutUserInput,
          SessionUncheckedCreateWithoutUserInput
        >
      | SessionCreateWithoutUserInput[]
      | SessionUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | SessionCreateOrConnectWithoutUserInput
      | SessionCreateOrConnectWithoutUserInput[];
    upsert?:
      | SessionUpsertWithWhereUniqueWithoutUserInput
      | SessionUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: SessionCreateManyUserInputEnvelope;
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    update?:
      | SessionUpdateWithWhereUniqueWithoutUserInput
      | SessionUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | SessionUpdateManyWithWhereWithoutUserInput
      | SessionUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[];
  };

  export type AuthenticatorUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          AuthenticatorCreateWithoutUserInput,
          AuthenticatorUncheckedCreateWithoutUserInput
        >
      | AuthenticatorCreateWithoutUserInput[]
      | AuthenticatorUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AuthenticatorCreateOrConnectWithoutUserInput
      | AuthenticatorCreateOrConnectWithoutUserInput[];
    upsert?:
      | AuthenticatorUpsertWithWhereUniqueWithoutUserInput
      | AuthenticatorUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: AuthenticatorCreateManyUserInputEnvelope;
    set?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
    disconnect?:
      | AuthenticatorWhereUniqueInput
      | AuthenticatorWhereUniqueInput[];
    delete?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
    update?:
      | AuthenticatorUpdateWithWhereUniqueWithoutUserInput
      | AuthenticatorUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | AuthenticatorUpdateManyWithWhereWithoutUserInput
      | AuthenticatorUpdateManyWithWhereWithoutUserInput[];
    deleteMany?:
      | AuthenticatorScalarWhereInput
      | AuthenticatorScalarWhereInput[];
  };

  export type UserBusinessUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutUserInput,
          UserBusinessUncheckedCreateWithoutUserInput
        >
      | UserBusinessCreateWithoutUserInput[]
      | UserBusinessUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutUserInput
      | UserBusinessCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserBusinessUpsertWithWhereUniqueWithoutUserInput
      | UserBusinessUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserBusinessCreateManyUserInputEnvelope;
    set?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    disconnect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    delete?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    update?:
      | UserBusinessUpdateWithWhereUniqueWithoutUserInput
      | UserBusinessUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserBusinessUpdateManyWithWhereWithoutUserInput
      | UserBusinessUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserBusinessScalarWhereInput | UserBusinessScalarWhereInput[];
  };

  export type UserAddressUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutUserInput,
          UserAddressUncheckedCreateWithoutUserInput
        >
      | UserAddressCreateWithoutUserInput[]
      | UserAddressUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutUserInput
      | UserAddressCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserAddressUpsertWithWhereUniqueWithoutUserInput
      | UserAddressUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserAddressCreateManyUserInputEnvelope;
    set?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    disconnect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    delete?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    update?:
      | UserAddressUpdateWithWhereUniqueWithoutUserInput
      | UserAddressUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserAddressUpdateManyWithWhereWithoutUserInput
      | UserAddressUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[];
  };

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
      | OrderCreateWithoutUserInput[]
      | OrderUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | OrderCreateOrConnectWithoutUserInput
      | OrderCreateOrConnectWithoutUserInput[];
    upsert?:
      | OrderUpsertWithWhereUniqueWithoutUserInput
      | OrderUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: OrderCreateManyUserInputEnvelope;
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[];
    update?:
      | OrderUpdateWithWhereUniqueWithoutUserInput
      | OrderUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | OrderUpdateManyWithWhereWithoutUserInput
      | OrderUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[];
  };

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          AccountCreateWithoutUserInput,
          AccountUncheckedCreateWithoutUserInput
        >
      | AccountCreateWithoutUserInput[]
      | AccountUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AccountCreateOrConnectWithoutUserInput
      | AccountCreateOrConnectWithoutUserInput[];
    upsert?:
      | AccountUpsertWithWhereUniqueWithoutUserInput
      | AccountUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: AccountCreateManyUserInputEnvelope;
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[];
    update?:
      | AccountUpdateWithWhereUniqueWithoutUserInput
      | AccountUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | AccountUpdateManyWithWhereWithoutUserInput
      | AccountUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[];
  };

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          SessionCreateWithoutUserInput,
          SessionUncheckedCreateWithoutUserInput
        >
      | SessionCreateWithoutUserInput[]
      | SessionUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | SessionCreateOrConnectWithoutUserInput
      | SessionCreateOrConnectWithoutUserInput[];
    upsert?:
      | SessionUpsertWithWhereUniqueWithoutUserInput
      | SessionUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: SessionCreateManyUserInputEnvelope;
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[];
    update?:
      | SessionUpdateWithWhereUniqueWithoutUserInput
      | SessionUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | SessionUpdateManyWithWhereWithoutUserInput
      | SessionUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[];
  };

  export type AuthenticatorUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          AuthenticatorCreateWithoutUserInput,
          AuthenticatorUncheckedCreateWithoutUserInput
        >
      | AuthenticatorCreateWithoutUserInput[]
      | AuthenticatorUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | AuthenticatorCreateOrConnectWithoutUserInput
      | AuthenticatorCreateOrConnectWithoutUserInput[];
    upsert?:
      | AuthenticatorUpsertWithWhereUniqueWithoutUserInput
      | AuthenticatorUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: AuthenticatorCreateManyUserInputEnvelope;
    set?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
    disconnect?:
      | AuthenticatorWhereUniqueInput
      | AuthenticatorWhereUniqueInput[];
    delete?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[];
    update?:
      | AuthenticatorUpdateWithWhereUniqueWithoutUserInput
      | AuthenticatorUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | AuthenticatorUpdateManyWithWhereWithoutUserInput
      | AuthenticatorUpdateManyWithWhereWithoutUserInput[];
    deleteMany?:
      | AuthenticatorScalarWhereInput
      | AuthenticatorScalarWhereInput[];
  };

  export type UserBusinessUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          UserBusinessCreateWithoutUserInput,
          UserBusinessUncheckedCreateWithoutUserInput
        >
      | UserBusinessCreateWithoutUserInput[]
      | UserBusinessUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserBusinessCreateOrConnectWithoutUserInput
      | UserBusinessCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserBusinessUpsertWithWhereUniqueWithoutUserInput
      | UserBusinessUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserBusinessCreateManyUserInputEnvelope;
    set?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    disconnect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    delete?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    connect?: UserBusinessWhereUniqueInput | UserBusinessWhereUniqueInput[];
    update?:
      | UserBusinessUpdateWithWhereUniqueWithoutUserInput
      | UserBusinessUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserBusinessUpdateManyWithWhereWithoutUserInput
      | UserBusinessUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserBusinessScalarWhereInput | UserBusinessScalarWhereInput[];
  };

  export type UserAddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<
          UserAddressCreateWithoutUserInput,
          UserAddressUncheckedCreateWithoutUserInput
        >
      | UserAddressCreateWithoutUserInput[]
      | UserAddressUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserAddressCreateOrConnectWithoutUserInput
      | UserAddressCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserAddressUpsertWithWhereUniqueWithoutUserInput
      | UserAddressUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserAddressCreateManyUserInputEnvelope;
    set?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    disconnect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    delete?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[];
    update?:
      | UserAddressUpdateWithWhereUniqueWithoutUserInput
      | UserAddressUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserAddressUpdateManyWithWhereWithoutUserInput
      | UserAddressUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[];
  };

  export type UserCreateNestedOneWithoutBusinessInput = {
    create?: XOR<
      UserCreateWithoutBusinessInput,
      UserUncheckedCreateWithoutBusinessInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutBusinessInput;
    connect?: UserWhereUniqueInput;
  };

  export type BusinessCreateNestedOneWithoutUsersInput = {
    create?: XOR<
      BusinessCreateWithoutUsersInput,
      BusinessUncheckedCreateWithoutUsersInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutUsersInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type EnumUserBusinessTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserBusinessType;
  };

  export type UserUpdateOneRequiredWithoutBusinessNestedInput = {
    create?: XOR<
      UserCreateWithoutBusinessInput,
      UserUncheckedCreateWithoutBusinessInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutBusinessInput;
    upsert?: UserUpsertWithoutBusinessInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutBusinessInput,
        UserUpdateWithoutBusinessInput
      >,
      UserUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type BusinessUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<
      BusinessCreateWithoutUsersInput,
      BusinessUncheckedCreateWithoutUsersInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutUsersInput;
    upsert?: BusinessUpsertWithoutUsersInput;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutUsersInput,
        BusinessUpdateWithoutUsersInput
      >,
      BusinessUncheckedUpdateWithoutUsersInput
    >;
  };

  export type BusinessCreateNestedOneWithoutInvitationLinksInput = {
    create?: XOR<
      BusinessCreateWithoutInvitationLinksInput,
      BusinessUncheckedCreateWithoutInvitationLinksInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutInvitationLinksInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type BusinessUpdateOneRequiredWithoutInvitationLinksNestedInput = {
    create?: XOR<
      BusinessCreateWithoutInvitationLinksInput,
      BusinessUncheckedCreateWithoutInvitationLinksInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutInvitationLinksInput;
    upsert?: BusinessUpsertWithoutInvitationLinksInput;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutInvitationLinksInput,
        BusinessUpdateWithoutInvitationLinksInput
      >,
      BusinessUncheckedUpdateWithoutInvitationLinksInput
    >;
  };

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<
      UserCreateWithoutOrdersInput,
      UserUncheckedCreateWithoutOrdersInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput;
    connect?: UserWhereUniqueInput;
  };

  export type OrderProductCreateNestedManyWithoutOrderInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutOrderInput,
          OrderProductUncheckedCreateWithoutOrderInput
        >
      | OrderProductCreateWithoutOrderInput[]
      | OrderProductUncheckedCreateWithoutOrderInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutOrderInput
      | OrderProductCreateOrConnectWithoutOrderInput[];
    createMany?: OrderProductCreateManyOrderInputEnvelope;
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
  };

  export type BusinessCreateNestedOneWithoutOrdersInput = {
    create?: XOR<
      BusinessCreateWithoutOrdersInput,
      BusinessUncheckedCreateWithoutOrdersInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutOrdersInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type OrderAddressCreateNestedOneWithoutOrderInput = {
    create?: XOR<
      OrderAddressCreateWithoutOrderInput,
      OrderAddressUncheckedCreateWithoutOrderInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutOrderInput;
    connect?: OrderAddressWhereUniqueInput;
  };

  export type OrderProductUncheckedCreateNestedManyWithoutOrderInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutOrderInput,
          OrderProductUncheckedCreateWithoutOrderInput
        >
      | OrderProductCreateWithoutOrderInput[]
      | OrderProductUncheckedCreateWithoutOrderInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutOrderInput
      | OrderProductCreateOrConnectWithoutOrderInput[];
    createMany?: OrderProductCreateManyOrderInputEnvelope;
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
  };

  export type OrderAddressUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<
      OrderAddressCreateWithoutOrderInput,
      OrderAddressUncheckedCreateWithoutOrderInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutOrderInput;
    connect?: OrderAddressWhereUniqueInput;
  };

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus;
  };

  export type UserUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<
      UserCreateWithoutOrdersInput,
      UserUncheckedCreateWithoutOrdersInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput;
    upsert?: UserUpsertWithoutOrdersInput;
    disconnect?: UserWhereInput | boolean;
    delete?: UserWhereInput | boolean;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutOrdersInput,
        UserUpdateWithoutOrdersInput
      >,
      UserUncheckedUpdateWithoutOrdersInput
    >;
  };

  export type OrderProductUpdateManyWithoutOrderNestedInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutOrderInput,
          OrderProductUncheckedCreateWithoutOrderInput
        >
      | OrderProductCreateWithoutOrderInput[]
      | OrderProductUncheckedCreateWithoutOrderInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutOrderInput
      | OrderProductCreateOrConnectWithoutOrderInput[];
    upsert?:
      | OrderProductUpsertWithWhereUniqueWithoutOrderInput
      | OrderProductUpsertWithWhereUniqueWithoutOrderInput[];
    createMany?: OrderProductCreateManyOrderInputEnvelope;
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    update?:
      | OrderProductUpdateWithWhereUniqueWithoutOrderInput
      | OrderProductUpdateWithWhereUniqueWithoutOrderInput[];
    updateMany?:
      | OrderProductUpdateManyWithWhereWithoutOrderInput
      | OrderProductUpdateManyWithWhereWithoutOrderInput[];
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[];
  };

  export type BusinessUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<
      BusinessCreateWithoutOrdersInput,
      BusinessUncheckedCreateWithoutOrdersInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutOrdersInput;
    upsert?: BusinessUpsertWithoutOrdersInput;
    disconnect?: BusinessWhereInput | boolean;
    delete?: BusinessWhereInput | boolean;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutOrdersInput,
        BusinessUpdateWithoutOrdersInput
      >,
      BusinessUncheckedUpdateWithoutOrdersInput
    >;
  };

  export type OrderAddressUpdateOneWithoutOrderNestedInput = {
    create?: XOR<
      OrderAddressCreateWithoutOrderInput,
      OrderAddressUncheckedCreateWithoutOrderInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutOrderInput;
    upsert?: OrderAddressUpsertWithoutOrderInput;
    disconnect?: OrderAddressWhereInput | boolean;
    delete?: OrderAddressWhereInput | boolean;
    connect?: OrderAddressWhereUniqueInput;
    update?: XOR<
      XOR<
        OrderAddressUpdateToOneWithWhereWithoutOrderInput,
        OrderAddressUpdateWithoutOrderInput
      >,
      OrderAddressUncheckedUpdateWithoutOrderInput
    >;
  };

  export type OrderProductUncheckedUpdateManyWithoutOrderNestedInput = {
    create?:
      | XOR<
          OrderProductCreateWithoutOrderInput,
          OrderProductUncheckedCreateWithoutOrderInput
        >
      | OrderProductCreateWithoutOrderInput[]
      | OrderProductUncheckedCreateWithoutOrderInput[];
    connectOrCreate?:
      | OrderProductCreateOrConnectWithoutOrderInput
      | OrderProductCreateOrConnectWithoutOrderInput[];
    upsert?:
      | OrderProductUpsertWithWhereUniqueWithoutOrderInput
      | OrderProductUpsertWithWhereUniqueWithoutOrderInput[];
    createMany?: OrderProductCreateManyOrderInputEnvelope;
    set?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    disconnect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    delete?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    connect?: OrderProductWhereUniqueInput | OrderProductWhereUniqueInput[];
    update?:
      | OrderProductUpdateWithWhereUniqueWithoutOrderInput
      | OrderProductUpdateWithWhereUniqueWithoutOrderInput[];
    updateMany?:
      | OrderProductUpdateManyWithWhereWithoutOrderInput
      | OrderProductUpdateManyWithWhereWithoutOrderInput[];
    deleteMany?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[];
  };

  export type OrderAddressUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<
      OrderAddressCreateWithoutOrderInput,
      OrderAddressUncheckedCreateWithoutOrderInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutOrderInput;
    upsert?: OrderAddressUpsertWithoutOrderInput;
    disconnect?: OrderAddressWhereInput | boolean;
    delete?: OrderAddressWhereInput | boolean;
    connect?: OrderAddressWhereUniqueInput;
    update?: XOR<
      XOR<
        OrderAddressUpdateToOneWithWhereWithoutOrderInput,
        OrderAddressUpdateWithoutOrderInput
      >,
      OrderAddressUncheckedUpdateWithoutOrderInput
    >;
  };

  export type ProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<
      ProductCreateWithoutOrderItemsInput,
      ProductUncheckedCreateWithoutOrderItemsInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput;
    connect?: ProductWhereUniqueInput;
  };

  export type OrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<
      OrderCreateWithoutItemsInput,
      OrderUncheckedCreateWithoutItemsInput
    >;
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput;
    connect?: OrderWhereUniqueInput;
  };

  export type ProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<
      ProductCreateWithoutOrderItemsInput,
      ProductUncheckedCreateWithoutOrderItemsInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput;
    upsert?: ProductUpsertWithoutOrderItemsInput;
    connect?: ProductWhereUniqueInput;
    update?: XOR<
      XOR<
        ProductUpdateToOneWithWhereWithoutOrderItemsInput,
        ProductUpdateWithoutOrderItemsInput
      >,
      ProductUncheckedUpdateWithoutOrderItemsInput
    >;
  };

  export type OrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<
      OrderCreateWithoutItemsInput,
      OrderUncheckedCreateWithoutItemsInput
    >;
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput;
    upsert?: OrderUpsertWithoutItemsInput;
    connect?: OrderWhereUniqueInput;
    update?: XOR<
      XOR<
        OrderUpdateToOneWithWhereWithoutItemsInput,
        OrderUpdateWithoutItemsInput
      >,
      OrderUncheckedUpdateWithoutItemsInput
    >;
  };

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<
      UserCreateWithoutAccountsInput,
      UserUncheckedCreateWithoutAccountsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<
      UserCreateWithoutAccountsInput,
      UserUncheckedCreateWithoutAccountsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput;
    upsert?: UserUpsertWithoutAccountsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutAccountsInput,
        UserUpdateWithoutAccountsInput
      >,
      UserUncheckedUpdateWithoutAccountsInput
    >;
  };

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<
      UserCreateWithoutSessionsInput,
      UserUncheckedCreateWithoutSessionsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<
      UserCreateWithoutSessionsInput,
      UserUncheckedCreateWithoutSessionsInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput;
    upsert?: UserUpsertWithoutSessionsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutSessionsInput,
        UserUpdateWithoutSessionsInput
      >,
      UserUncheckedUpdateWithoutSessionsInput
    >;
  };

  export type UserCreateNestedOneWithoutAuthenticatorInput = {
    create?: XOR<
      UserCreateWithoutAuthenticatorInput,
      UserUncheckedCreateWithoutAuthenticatorInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAuthenticatorInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutAuthenticatorNestedInput = {
    create?: XOR<
      UserCreateWithoutAuthenticatorInput,
      UserUncheckedCreateWithoutAuthenticatorInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAuthenticatorInput;
    upsert?: UserUpsertWithoutAuthenticatorInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutAuthenticatorInput,
        UserUpdateWithoutAuthenticatorInput
      >,
      UserUncheckedUpdateWithoutAuthenticatorInput
    >;
  };

  export type NeighborhoodCreateNestedOneWithoutAddressesInput = {
    create?: XOR<
      NeighborhoodCreateWithoutAddressesInput,
      NeighborhoodUncheckedCreateWithoutAddressesInput
    >;
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutAddressesInput;
    connect?: NeighborhoodWhereUniqueInput;
  };

  export type UserAddressCreateNestedOneWithoutAddressInput = {
    create?: XOR<
      UserAddressCreateWithoutAddressInput,
      UserAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: UserAddressCreateOrConnectWithoutAddressInput;
    connect?: UserAddressWhereUniqueInput;
  };

  export type OrderAddressCreateNestedOneWithoutAddressInput = {
    create?: XOR<
      OrderAddressCreateWithoutAddressInput,
      OrderAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutAddressInput;
    connect?: OrderAddressWhereUniqueInput;
  };

  export type UserAddressUncheckedCreateNestedOneWithoutAddressInput = {
    create?: XOR<
      UserAddressCreateWithoutAddressInput,
      UserAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: UserAddressCreateOrConnectWithoutAddressInput;
    connect?: UserAddressWhereUniqueInput;
  };

  export type OrderAddressUncheckedCreateNestedOneWithoutAddressInput = {
    create?: XOR<
      OrderAddressCreateWithoutAddressInput,
      OrderAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutAddressInput;
    connect?: OrderAddressWhereUniqueInput;
  };

  export type NeighborhoodUpdateOneWithoutAddressesNestedInput = {
    create?: XOR<
      NeighborhoodCreateWithoutAddressesInput,
      NeighborhoodUncheckedCreateWithoutAddressesInput
    >;
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutAddressesInput;
    upsert?: NeighborhoodUpsertWithoutAddressesInput;
    disconnect?: NeighborhoodWhereInput | boolean;
    delete?: NeighborhoodWhereInput | boolean;
    connect?: NeighborhoodWhereUniqueInput;
    update?: XOR<
      XOR<
        NeighborhoodUpdateToOneWithWhereWithoutAddressesInput,
        NeighborhoodUpdateWithoutAddressesInput
      >,
      NeighborhoodUncheckedUpdateWithoutAddressesInput
    >;
  };

  export type UserAddressUpdateOneWithoutAddressNestedInput = {
    create?: XOR<
      UserAddressCreateWithoutAddressInput,
      UserAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: UserAddressCreateOrConnectWithoutAddressInput;
    upsert?: UserAddressUpsertWithoutAddressInput;
    disconnect?: UserAddressWhereInput | boolean;
    delete?: UserAddressWhereInput | boolean;
    connect?: UserAddressWhereUniqueInput;
    update?: XOR<
      XOR<
        UserAddressUpdateToOneWithWhereWithoutAddressInput,
        UserAddressUpdateWithoutAddressInput
      >,
      UserAddressUncheckedUpdateWithoutAddressInput
    >;
  };

  export type OrderAddressUpdateOneWithoutAddressNestedInput = {
    create?: XOR<
      OrderAddressCreateWithoutAddressInput,
      OrderAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutAddressInput;
    upsert?: OrderAddressUpsertWithoutAddressInput;
    disconnect?: OrderAddressWhereInput | boolean;
    delete?: OrderAddressWhereInput | boolean;
    connect?: OrderAddressWhereUniqueInput;
    update?: XOR<
      XOR<
        OrderAddressUpdateToOneWithWhereWithoutAddressInput,
        OrderAddressUpdateWithoutAddressInput
      >,
      OrderAddressUncheckedUpdateWithoutAddressInput
    >;
  };

  export type UserAddressUncheckedUpdateOneWithoutAddressNestedInput = {
    create?: XOR<
      UserAddressCreateWithoutAddressInput,
      UserAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: UserAddressCreateOrConnectWithoutAddressInput;
    upsert?: UserAddressUpsertWithoutAddressInput;
    disconnect?: UserAddressWhereInput | boolean;
    delete?: UserAddressWhereInput | boolean;
    connect?: UserAddressWhereUniqueInput;
    update?: XOR<
      XOR<
        UserAddressUpdateToOneWithWhereWithoutAddressInput,
        UserAddressUpdateWithoutAddressInput
      >,
      UserAddressUncheckedUpdateWithoutAddressInput
    >;
  };

  export type OrderAddressUncheckedUpdateOneWithoutAddressNestedInput = {
    create?: XOR<
      OrderAddressCreateWithoutAddressInput,
      OrderAddressUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: OrderAddressCreateOrConnectWithoutAddressInput;
    upsert?: OrderAddressUpsertWithoutAddressInput;
    disconnect?: OrderAddressWhereInput | boolean;
    delete?: OrderAddressWhereInput | boolean;
    connect?: OrderAddressWhereUniqueInput;
    update?: XOR<
      XOR<
        OrderAddressUpdateToOneWithWhereWithoutAddressInput,
        OrderAddressUpdateWithoutAddressInput
      >,
      OrderAddressUncheckedUpdateWithoutAddressInput
    >;
  };

  export type AddressCreateNestedManyWithoutNeighborhoodInput = {
    create?:
      | XOR<
          AddressCreateWithoutNeighborhoodInput,
          AddressUncheckedCreateWithoutNeighborhoodInput
        >
      | AddressCreateWithoutNeighborhoodInput[]
      | AddressUncheckedCreateWithoutNeighborhoodInput[];
    connectOrCreate?:
      | AddressCreateOrConnectWithoutNeighborhoodInput
      | AddressCreateOrConnectWithoutNeighborhoodInput[];
    createMany?: AddressCreateManyNeighborhoodInputEnvelope;
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
  };

  export type BusinessNeighborhoodCreateNestedManyWithoutNeighborhoodInput = {
    create?:
      | XOR<
          BusinessNeighborhoodCreateWithoutNeighborhoodInput,
          BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput
        >
      | BusinessNeighborhoodCreateWithoutNeighborhoodInput[]
      | BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput[];
    connectOrCreate?:
      | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput
      | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput[];
    createMany?: BusinessNeighborhoodCreateManyNeighborhoodInputEnvelope;
    connect?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
  };

  export type AddressUncheckedCreateNestedManyWithoutNeighborhoodInput = {
    create?:
      | XOR<
          AddressCreateWithoutNeighborhoodInput,
          AddressUncheckedCreateWithoutNeighborhoodInput
        >
      | AddressCreateWithoutNeighborhoodInput[]
      | AddressUncheckedCreateWithoutNeighborhoodInput[];
    connectOrCreate?:
      | AddressCreateOrConnectWithoutNeighborhoodInput
      | AddressCreateOrConnectWithoutNeighborhoodInput[];
    createMany?: AddressCreateManyNeighborhoodInputEnvelope;
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
  };

  export type BusinessNeighborhoodUncheckedCreateNestedManyWithoutNeighborhoodInput =
    {
      create?:
        | XOR<
            BusinessNeighborhoodCreateWithoutNeighborhoodInput,
            BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput
          >
        | BusinessNeighborhoodCreateWithoutNeighborhoodInput[]
        | BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput[];
      connectOrCreate?:
        | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput
        | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput[];
      createMany?: BusinessNeighborhoodCreateManyNeighborhoodInputEnvelope;
      connect?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
    };

  export type AddressUpdateManyWithoutNeighborhoodNestedInput = {
    create?:
      | XOR<
          AddressCreateWithoutNeighborhoodInput,
          AddressUncheckedCreateWithoutNeighborhoodInput
        >
      | AddressCreateWithoutNeighborhoodInput[]
      | AddressUncheckedCreateWithoutNeighborhoodInput[];
    connectOrCreate?:
      | AddressCreateOrConnectWithoutNeighborhoodInput
      | AddressCreateOrConnectWithoutNeighborhoodInput[];
    upsert?:
      | AddressUpsertWithWhereUniqueWithoutNeighborhoodInput
      | AddressUpsertWithWhereUniqueWithoutNeighborhoodInput[];
    createMany?: AddressCreateManyNeighborhoodInputEnvelope;
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    update?:
      | AddressUpdateWithWhereUniqueWithoutNeighborhoodInput
      | AddressUpdateWithWhereUniqueWithoutNeighborhoodInput[];
    updateMany?:
      | AddressUpdateManyWithWhereWithoutNeighborhoodInput
      | AddressUpdateManyWithWhereWithoutNeighborhoodInput[];
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[];
  };

  export type BusinessNeighborhoodUpdateManyWithoutNeighborhoodNestedInput = {
    create?:
      | XOR<
          BusinessNeighborhoodCreateWithoutNeighborhoodInput,
          BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput
        >
      | BusinessNeighborhoodCreateWithoutNeighborhoodInput[]
      | BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput[];
    connectOrCreate?:
      | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput
      | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput[];
    upsert?:
      | BusinessNeighborhoodUpsertWithWhereUniqueWithoutNeighborhoodInput
      | BusinessNeighborhoodUpsertWithWhereUniqueWithoutNeighborhoodInput[];
    createMany?: BusinessNeighborhoodCreateManyNeighborhoodInputEnvelope;
    set?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    disconnect?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    delete?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    connect?:
      | BusinessNeighborhoodWhereUniqueInput
      | BusinessNeighborhoodWhereUniqueInput[];
    update?:
      | BusinessNeighborhoodUpdateWithWhereUniqueWithoutNeighborhoodInput
      | BusinessNeighborhoodUpdateWithWhereUniqueWithoutNeighborhoodInput[];
    updateMany?:
      | BusinessNeighborhoodUpdateManyWithWhereWithoutNeighborhoodInput
      | BusinessNeighborhoodUpdateManyWithWhereWithoutNeighborhoodInput[];
    deleteMany?:
      | BusinessNeighborhoodScalarWhereInput
      | BusinessNeighborhoodScalarWhereInput[];
  };

  export type AddressUncheckedUpdateManyWithoutNeighborhoodNestedInput = {
    create?:
      | XOR<
          AddressCreateWithoutNeighborhoodInput,
          AddressUncheckedCreateWithoutNeighborhoodInput
        >
      | AddressCreateWithoutNeighborhoodInput[]
      | AddressUncheckedCreateWithoutNeighborhoodInput[];
    connectOrCreate?:
      | AddressCreateOrConnectWithoutNeighborhoodInput
      | AddressCreateOrConnectWithoutNeighborhoodInput[];
    upsert?:
      | AddressUpsertWithWhereUniqueWithoutNeighborhoodInput
      | AddressUpsertWithWhereUniqueWithoutNeighborhoodInput[];
    createMany?: AddressCreateManyNeighborhoodInputEnvelope;
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[];
    update?:
      | AddressUpdateWithWhereUniqueWithoutNeighborhoodInput
      | AddressUpdateWithWhereUniqueWithoutNeighborhoodInput[];
    updateMany?:
      | AddressUpdateManyWithWhereWithoutNeighborhoodInput
      | AddressUpdateManyWithWhereWithoutNeighborhoodInput[];
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[];
  };

  export type BusinessNeighborhoodUncheckedUpdateManyWithoutNeighborhoodNestedInput =
    {
      create?:
        | XOR<
            BusinessNeighborhoodCreateWithoutNeighborhoodInput,
            BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput
          >
        | BusinessNeighborhoodCreateWithoutNeighborhoodInput[]
        | BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput[];
      connectOrCreate?:
        | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput
        | BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput[];
      upsert?:
        | BusinessNeighborhoodUpsertWithWhereUniqueWithoutNeighborhoodInput
        | BusinessNeighborhoodUpsertWithWhereUniqueWithoutNeighborhoodInput[];
      createMany?: BusinessNeighborhoodCreateManyNeighborhoodInputEnvelope;
      set?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      disconnect?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      delete?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      connect?:
        | BusinessNeighborhoodWhereUniqueInput
        | BusinessNeighborhoodWhereUniqueInput[];
      update?:
        | BusinessNeighborhoodUpdateWithWhereUniqueWithoutNeighborhoodInput
        | BusinessNeighborhoodUpdateWithWhereUniqueWithoutNeighborhoodInput[];
      updateMany?:
        | BusinessNeighborhoodUpdateManyWithWhereWithoutNeighborhoodInput
        | BusinessNeighborhoodUpdateManyWithWhereWithoutNeighborhoodInput[];
      deleteMany?:
        | BusinessNeighborhoodScalarWhereInput
        | BusinessNeighborhoodScalarWhereInput[];
    };

  export type AddressCreateNestedOneWithoutUserAddressInput = {
    create?: XOR<
      AddressCreateWithoutUserAddressInput,
      AddressUncheckedCreateWithoutUserAddressInput
    >;
    connectOrCreate?: AddressCreateOrConnectWithoutUserAddressInput;
    connect?: AddressWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<
      UserCreateWithoutAddressInput,
      UserUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput;
    connect?: UserWhereUniqueInput;
  };

  export type BusinessCreateNestedOneWithoutUserAddressInput = {
    create?: XOR<
      BusinessCreateWithoutUserAddressInput,
      BusinessUncheckedCreateWithoutUserAddressInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutUserAddressInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type AddressUpdateOneRequiredWithoutUserAddressNestedInput = {
    create?: XOR<
      AddressCreateWithoutUserAddressInput,
      AddressUncheckedCreateWithoutUserAddressInput
    >;
    connectOrCreate?: AddressCreateOrConnectWithoutUserAddressInput;
    upsert?: AddressUpsertWithoutUserAddressInput;
    connect?: AddressWhereUniqueInput;
    update?: XOR<
      XOR<
        AddressUpdateToOneWithWhereWithoutUserAddressInput,
        AddressUpdateWithoutUserAddressInput
      >,
      AddressUncheckedUpdateWithoutUserAddressInput
    >;
  };

  export type UserUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<
      UserCreateWithoutAddressInput,
      UserUncheckedCreateWithoutAddressInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput;
    upsert?: UserUpsertWithoutAddressInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutAddressInput,
        UserUpdateWithoutAddressInput
      >,
      UserUncheckedUpdateWithoutAddressInput
    >;
  };

  export type BusinessUpdateOneWithoutUserAddressNestedInput = {
    create?: XOR<
      BusinessCreateWithoutUserAddressInput,
      BusinessUncheckedCreateWithoutUserAddressInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutUserAddressInput;
    upsert?: BusinessUpsertWithoutUserAddressInput;
    disconnect?: BusinessWhereInput | boolean;
    delete?: BusinessWhereInput | boolean;
    connect?: BusinessWhereUniqueInput;
    update?: XOR<
      XOR<
        BusinessUpdateToOneWithWhereWithoutUserAddressInput,
        BusinessUpdateWithoutUserAddressInput
      >,
      BusinessUncheckedUpdateWithoutUserAddressInput
    >;
  };

  export type AddressCreateNestedOneWithoutOrderAddressInput = {
    create?: XOR<
      AddressCreateWithoutOrderAddressInput,
      AddressUncheckedCreateWithoutOrderAddressInput
    >;
    connectOrCreate?: AddressCreateOrConnectWithoutOrderAddressInput;
    connect?: AddressWhereUniqueInput;
  };

  export type OrderCreateNestedOneWithoutOrderAddressInput = {
    create?: XOR<
      OrderCreateWithoutOrderAddressInput,
      OrderUncheckedCreateWithoutOrderAddressInput
    >;
    connectOrCreate?: OrderCreateOrConnectWithoutOrderAddressInput;
    connect?: OrderWhereUniqueInput;
  };

  export type AddressUpdateOneRequiredWithoutOrderAddressNestedInput = {
    create?: XOR<
      AddressCreateWithoutOrderAddressInput,
      AddressUncheckedCreateWithoutOrderAddressInput
    >;
    connectOrCreate?: AddressCreateOrConnectWithoutOrderAddressInput;
    upsert?: AddressUpsertWithoutOrderAddressInput;
    connect?: AddressWhereUniqueInput;
    update?: XOR<
      XOR<
        AddressUpdateToOneWithWhereWithoutOrderAddressInput,
        AddressUpdateWithoutOrderAddressInput
      >,
      AddressUncheckedUpdateWithoutOrderAddressInput
    >;
  };

  export type OrderUpdateOneRequiredWithoutOrderAddressNestedInput = {
    create?: XOR<
      OrderCreateWithoutOrderAddressInput,
      OrderUncheckedCreateWithoutOrderAddressInput
    >;
    connectOrCreate?: OrderCreateOrConnectWithoutOrderAddressInput;
    upsert?: OrderUpsertWithoutOrderAddressInput;
    connect?: OrderWhereUniqueInput;
    update?: XOR<
      XOR<
        OrderUpdateToOneWithWhereWithoutOrderAddressInput,
        OrderUpdateWithoutOrderAddressInput
      >,
      OrderUncheckedUpdateWithoutOrderAddressInput
    >;
  };

  export type BusinessCreateNestedOneWithoutBusinessNeighborhoodInput = {
    create?: XOR<
      BusinessCreateWithoutBusinessNeighborhoodInput,
      BusinessUncheckedCreateWithoutBusinessNeighborhoodInput
    >;
    connectOrCreate?: BusinessCreateOrConnectWithoutBusinessNeighborhoodInput;
    connect?: BusinessWhereUniqueInput;
  };

  export type NeighborhoodCreateNestedOneWithoutBusinessNeighborhoodInput = {
    create?: XOR<
      NeighborhoodCreateWithoutBusinessNeighborhoodInput,
      NeighborhoodUncheckedCreateWithoutBusinessNeighborhoodInput
    >;
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutBusinessNeighborhoodInput;
    connect?: NeighborhoodWhereUniqueInput;
  };

  export type BusinessUpdateOneRequiredWithoutBusinessNeighborhoodNestedInput =
    {
      create?: XOR<
        BusinessCreateWithoutBusinessNeighborhoodInput,
        BusinessUncheckedCreateWithoutBusinessNeighborhoodInput
      >;
      connectOrCreate?: BusinessCreateOrConnectWithoutBusinessNeighborhoodInput;
      upsert?: BusinessUpsertWithoutBusinessNeighborhoodInput;
      connect?: BusinessWhereUniqueInput;
      update?: XOR<
        XOR<
          BusinessUpdateToOneWithWhereWithoutBusinessNeighborhoodInput,
          BusinessUpdateWithoutBusinessNeighborhoodInput
        >,
        BusinessUncheckedUpdateWithoutBusinessNeighborhoodInput
      >;
    };

  export type NeighborhoodUpdateOneRequiredWithoutBusinessNeighborhoodNestedInput =
    {
      create?: XOR<
        NeighborhoodCreateWithoutBusinessNeighborhoodInput,
        NeighborhoodUncheckedCreateWithoutBusinessNeighborhoodInput
      >;
      connectOrCreate?: NeighborhoodCreateOrConnectWithoutBusinessNeighborhoodInput;
      upsert?: NeighborhoodUpsertWithoutBusinessNeighborhoodInput;
      connect?: NeighborhoodWhereUniqueInput;
      update?: XOR<
        XOR<
          NeighborhoodUpdateToOneWithWhereWithoutBusinessNeighborhoodInput,
          NeighborhoodUpdateWithoutBusinessNeighborhoodInput
        >,
        NeighborhoodUncheckedUpdateWithoutBusinessNeighborhoodInput
      >;
    };

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringFilter<$PrismaModel> | string;
  };

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringNullableFilter<$PrismaModel> | string | null;
  };

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolFilter<$PrismaModel> | boolean;
  };

  export type NestedEnumBusinessPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessPlan | EnumBusinessPlanFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.BusinessPlan[]
      | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.BusinessPlan[]
      | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
    not?: NestedEnumBusinessPlanFilter<$PrismaModel> | $Enums.BusinessPlan;
  };

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedStringFilter<$PrismaModel>;
    _max?: NestedStringFilter<$PrismaModel>;
  };

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntFilter<$PrismaModel> | number;
  };

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?:
      | NestedStringNullableWithAggregatesFilter<$PrismaModel>
      | string
      | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedStringNullableFilter<$PrismaModel>;
    _max?: NestedStringNullableFilter<$PrismaModel>;
  };

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableFilter<$PrismaModel> | number | null;
  };

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedBoolFilter<$PrismaModel>;
    _max?: NestedBoolFilter<$PrismaModel>;
  };

  export type NestedEnumBusinessPlanWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?:
        | $Enums.BusinessPlan
        | EnumBusinessPlanFieldRefInput<$PrismaModel>;
      in?:
        | $Enums.BusinessPlan[]
        | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
      notIn?:
        | $Enums.BusinessPlan[]
        | ListEnumBusinessPlanFieldRefInput<$PrismaModel>;
      not?:
        | NestedEnumBusinessPlanWithAggregatesFilter<$PrismaModel>
        | $Enums.BusinessPlan;
      _count?: NestedIntFilter<$PrismaModel>;
      _min?: NestedEnumBusinessPlanFilter<$PrismaModel>;
      _max?: NestedEnumBusinessPlanFilter<$PrismaModel>;
    };

  export type NestedEnumPaymentMethodTypeFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.PaymentMethodType
      | EnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.PaymentMethodType[]
      | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.PaymentMethodType[]
      | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumPaymentMethodTypeFilter<$PrismaModel>
      | $Enums.PaymentMethodType;
  };

  export type NestedEnumPaymentMethodTypeWithAggregatesFilter<
    $PrismaModel = never,
  > = {
    equals?:
      | $Enums.PaymentMethodType
      | EnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.PaymentMethodType[]
      | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.PaymentMethodType[]
      | ListEnumPaymentMethodTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumPaymentMethodTypeWithAggregatesFilter<$PrismaModel>
      | $Enums.PaymentMethodType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumPaymentMethodTypeFilter<$PrismaModel>;
    _max?: NestedEnumPaymentMethodTypeFilter<$PrismaModel>;
  };
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<
          Required<NestedJsonFilterBase<$PrismaModel>>,
          Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, "path">
        >,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, "path">>;

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
    path?: string[];
    string_contains?: string | StringFieldRefInput<$PrismaModel>;
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>;
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>;
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null;
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>;
    not?:
      | InputJsonValue
      | JsonFieldRefInput<$PrismaModel>
      | JsonNullValueFilter;
  };

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number;
    _count?: NestedIntFilter<$PrismaModel>;
    _avg?: NestedFloatFilter<$PrismaModel>;
    _sum?: NestedIntFilter<$PrismaModel>;
    _min?: NestedIntFilter<$PrismaModel>;
    _max?: NestedIntFilter<$PrismaModel>;
  };

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>;
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    lt?: number | FloatFieldRefInput<$PrismaModel>;
    lte?: number | FloatFieldRefInput<$PrismaModel>;
    gt?: number | FloatFieldRefInput<$PrismaModel>;
    gte?: number | FloatFieldRefInput<$PrismaModel>;
    not?: NestedFloatFilter<$PrismaModel> | number;
  };

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _avg?: NestedFloatNullableFilter<$PrismaModel>;
    _sum?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedIntNullableFilter<$PrismaModel>;
    _max?: NestedIntNullableFilter<$PrismaModel>;
  };

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    lt?: number | FloatFieldRefInput<$PrismaModel>;
    lte?: number | FloatFieldRefInput<$PrismaModel>;
    gt?: number | FloatFieldRefInput<$PrismaModel>;
    gte?: number | FloatFieldRefInput<$PrismaModel>;
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null;
  };

  export type NestedEnumUserRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoles | EnumUserRolesFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    not?: NestedEnumUserRolesFilter<$PrismaModel> | $Enums.UserRoles;
  };

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null;
  };

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string;
  };

  export type NestedEnumUserRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoles | EnumUserRolesFieldRefInput<$PrismaModel>;
    in?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    notIn?: $Enums.UserRoles[] | ListEnumUserRolesFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserRolesWithAggregatesFilter<$PrismaModel>
      | $Enums.UserRoles;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumUserRolesFilter<$PrismaModel>;
    _max?: NestedEnumUserRolesFilter<$PrismaModel>;
  };

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
      in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
      notIn?:
        | Date[]
        | string[]
        | ListDateTimeFieldRefInput<$PrismaModel>
        | null;
      lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
      not?:
        | NestedDateTimeNullableWithAggregatesFilter<$PrismaModel>
        | Date
        | string
        | null;
      _count?: NestedIntNullableFilter<$PrismaModel>;
      _min?: NestedDateTimeNullableFilter<$PrismaModel>;
      _max?: NestedDateTimeNullableFilter<$PrismaModel>;
    };

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedDateTimeFilter<$PrismaModel>;
    _max?: NestedDateTimeFilter<$PrismaModel>;
  };

  export type NestedEnumUserBusinessTypeFilter<$PrismaModel = never> = {
    equals?:
      | $Enums.UserBusinessType
      | EnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserBusinessTypeFilter<$PrismaModel>
      | $Enums.UserBusinessType;
  };

  export type NestedEnumUserBusinessTypeWithAggregatesFilter<
    $PrismaModel = never,
  > = {
    equals?:
      | $Enums.UserBusinessType
      | EnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    in?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.UserBusinessType[]
      | ListEnumUserBusinessTypeFieldRefInput<$PrismaModel>;
    not?:
      | NestedEnumUserBusinessTypeWithAggregatesFilter<$PrismaModel>
      | $Enums.UserBusinessType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumUserBusinessTypeFilter<$PrismaModel>;
    _max?: NestedEnumUserBusinessTypeFilter<$PrismaModel>;
  };

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>;
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
    notIn?:
      | $Enums.OrderStatus[]
      | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus;
  };

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> =
    {
      equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>;
      in?:
        | $Enums.OrderStatus[]
        | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
      notIn?:
        | $Enums.OrderStatus[]
        | ListEnumOrderStatusFieldRefInput<$PrismaModel>;
      not?:
        | NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel>
        | $Enums.OrderStatus;
      _count?: NestedIntFilter<$PrismaModel>;
      _min?: NestedEnumOrderStatusFilter<$PrismaModel>;
      _max?: NestedEnumOrderStatusFilter<$PrismaModel>;
    };

  export type PaymentMethodCreateWithoutDefaultBusinessInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    business: BusinessCreateNestedOneWithoutPaymentMethodInput;
  };

  export type PaymentMethodUncheckedCreateWithoutDefaultBusinessInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    businessId: string;
  };

  export type PaymentMethodCreateOrConnectWithoutDefaultBusinessInput = {
    where: PaymentMethodWhereUniqueInput;
    create: XOR<
      PaymentMethodCreateWithoutDefaultBusinessInput,
      PaymentMethodUncheckedCreateWithoutDefaultBusinessInput
    >;
  };

  export type TelegramBusinessCreateWithoutBusinessInput = {
    id?: string;
    groupId: string;
    invitationLink?: string;
  };

  export type TelegramBusinessUncheckedCreateWithoutBusinessInput = {
    id?: string;
    groupId: string;
    invitationLink?: string;
  };

  export type TelegramBusinessCreateOrConnectWithoutBusinessInput = {
    where: TelegramBusinessWhereUniqueInput;
    create: XOR<
      TelegramBusinessCreateWithoutBusinessInput,
      TelegramBusinessUncheckedCreateWithoutBusinessInput
    >;
  };

  export type CategoryCreateWithoutBusinessInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    products?: ProductCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryUncheckedCreateWithoutBusinessInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryCreateOrConnectWithoutBusinessInput = {
    where: CategoryWhereUniqueInput;
    create: XOR<
      CategoryCreateWithoutBusinessInput,
      CategoryUncheckedCreateWithoutBusinessInput
    >;
  };

  export type CategoryCreateManyBusinessInputEnvelope = {
    data: CategoryCreateManyBusinessInput | CategoryCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type ProductCreateWithoutBusinessInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    category?: CategoryCreateNestedOneWithoutProductsInput;
    orderItems?: OrderProductCreateNestedManyWithoutProductInput;
  };

  export type ProductUncheckedCreateWithoutBusinessInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    categoryId?: string | null;
    orderItems?: OrderProductUncheckedCreateNestedManyWithoutProductInput;
  };

  export type ProductCreateOrConnectWithoutBusinessInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutBusinessInput,
      ProductUncheckedCreateWithoutBusinessInput
    >;
  };

  export type ProductCreateManyBusinessInputEnvelope = {
    data: ProductCreateManyBusinessInput | ProductCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type OrderCreateWithoutBusinessInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
    user?: UserCreateNestedOneWithoutOrdersInput;
    items?: OrderProductCreateNestedManyWithoutOrderInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutOrderInput;
  };

  export type OrderUncheckedCreateWithoutBusinessInput = {
    id?: string;
    userId?: string | null;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
    items?: OrderProductUncheckedCreateNestedManyWithoutOrderInput;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutOrderInput;
  };

  export type OrderCreateOrConnectWithoutBusinessInput = {
    where: OrderWhereUniqueInput;
    create: XOR<
      OrderCreateWithoutBusinessInput,
      OrderUncheckedCreateWithoutBusinessInput
    >;
  };

  export type OrderCreateManyBusinessInputEnvelope = {
    data: OrderCreateManyBusinessInput | OrderCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type UserBusinessCreateWithoutBusinessInput = {
    type?: $Enums.UserBusinessType;
    user: UserCreateNestedOneWithoutBusinessInput;
  };

  export type UserBusinessUncheckedCreateWithoutBusinessInput = {
    userId: string;
    type?: $Enums.UserBusinessType;
  };

  export type UserBusinessCreateOrConnectWithoutBusinessInput = {
    where: UserBusinessWhereUniqueInput;
    create: XOR<
      UserBusinessCreateWithoutBusinessInput,
      UserBusinessUncheckedCreateWithoutBusinessInput
    >;
  };

  export type UserBusinessCreateManyBusinessInputEnvelope = {
    data:
      | UserBusinessCreateManyBusinessInput
      | UserBusinessCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type BusinessNeighborhoodCreateWithoutBusinessInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    neighborhood: NeighborhoodCreateNestedOneWithoutBusinessNeighborhoodInput;
  };

  export type BusinessNeighborhoodUncheckedCreateWithoutBusinessInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    neighborhoodId: string;
  };

  export type BusinessNeighborhoodCreateOrConnectWithoutBusinessInput = {
    where: BusinessNeighborhoodWhereUniqueInput;
    create: XOR<
      BusinessNeighborhoodCreateWithoutBusinessInput,
      BusinessNeighborhoodUncheckedCreateWithoutBusinessInput
    >;
  };

  export type BusinessNeighborhoodCreateManyBusinessInputEnvelope = {
    data:
      | BusinessNeighborhoodCreateManyBusinessInput
      | BusinessNeighborhoodCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type UserAddressCreateWithoutBusinessInput = {
    id?: string;
    address: AddressCreateNestedOneWithoutUserAddressInput;
    user: UserCreateNestedOneWithoutAddressInput;
  };

  export type UserAddressUncheckedCreateWithoutBusinessInput = {
    id?: string;
    addressId: string;
    userId: string;
  };

  export type UserAddressCreateOrConnectWithoutBusinessInput = {
    where: UserAddressWhereUniqueInput;
    create: XOR<
      UserAddressCreateWithoutBusinessInput,
      UserAddressUncheckedCreateWithoutBusinessInput
    >;
  };

  export type UserAddressCreateManyBusinessInputEnvelope = {
    data:
      | UserAddressCreateManyBusinessInput
      | UserAddressCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type PaymentMethodCreateWithoutBusinessInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    defaultBusiness?: BusinessCreateNestedOneWithoutDefaultPaymentMethodInput;
  };

  export type PaymentMethodUncheckedCreateWithoutBusinessInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
    defaultBusiness?: BusinessUncheckedCreateNestedOneWithoutDefaultPaymentMethodInput;
  };

  export type PaymentMethodCreateOrConnectWithoutBusinessInput = {
    where: PaymentMethodWhereUniqueInput;
    create: XOR<
      PaymentMethodCreateWithoutBusinessInput,
      PaymentMethodUncheckedCreateWithoutBusinessInput
    >;
  };

  export type PaymentMethodCreateManyBusinessInputEnvelope = {
    data:
      | PaymentMethodCreateManyBusinessInput
      | PaymentMethodCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type InvitationLinkCreateWithoutBusinessInput = {
    id?: string;
    code: string;
    createdAt?: Date | string;
  };

  export type InvitationLinkUncheckedCreateWithoutBusinessInput = {
    id?: string;
    code: string;
    createdAt?: Date | string;
  };

  export type InvitationLinkCreateOrConnectWithoutBusinessInput = {
    where: InvitationLinkWhereUniqueInput;
    create: XOR<
      InvitationLinkCreateWithoutBusinessInput,
      InvitationLinkUncheckedCreateWithoutBusinessInput
    >;
  };

  export type InvitationLinkCreateManyBusinessInputEnvelope = {
    data:
      | InvitationLinkCreateManyBusinessInput
      | InvitationLinkCreateManyBusinessInput[];
    skipDuplicates?: boolean;
  };

  export type PaymentMethodUpsertWithoutDefaultBusinessInput = {
    update: XOR<
      PaymentMethodUpdateWithoutDefaultBusinessInput,
      PaymentMethodUncheckedUpdateWithoutDefaultBusinessInput
    >;
    create: XOR<
      PaymentMethodCreateWithoutDefaultBusinessInput,
      PaymentMethodUncheckedCreateWithoutDefaultBusinessInput
    >;
    where?: PaymentMethodWhereInput;
  };

  export type PaymentMethodUpdateToOneWithWhereWithoutDefaultBusinessInput = {
    where?: PaymentMethodWhereInput;
    data: XOR<
      PaymentMethodUpdateWithoutDefaultBusinessInput,
      PaymentMethodUncheckedUpdateWithoutDefaultBusinessInput
    >;
  };

  export type PaymentMethodUpdateWithoutDefaultBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    business?: BusinessUpdateOneRequiredWithoutPaymentMethodNestedInput;
  };

  export type PaymentMethodUncheckedUpdateWithoutDefaultBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type TelegramBusinessUpsertWithoutBusinessInput = {
    update: XOR<
      TelegramBusinessUpdateWithoutBusinessInput,
      TelegramBusinessUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      TelegramBusinessCreateWithoutBusinessInput,
      TelegramBusinessUncheckedCreateWithoutBusinessInput
    >;
    where?: TelegramBusinessWhereInput;
  };

  export type TelegramBusinessUpdateToOneWithWhereWithoutBusinessInput = {
    where?: TelegramBusinessWhereInput;
    data: XOR<
      TelegramBusinessUpdateWithoutBusinessInput,
      TelegramBusinessUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type TelegramBusinessUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    groupId?: StringFieldUpdateOperationsInput | string;
    invitationLink?: StringFieldUpdateOperationsInput | string;
  };

  export type TelegramBusinessUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    groupId?: StringFieldUpdateOperationsInput | string;
    invitationLink?: StringFieldUpdateOperationsInput | string;
  };

  export type CategoryUpsertWithWhereUniqueWithoutBusinessInput = {
    where: CategoryWhereUniqueInput;
    update: XOR<
      CategoryUpdateWithoutBusinessInput,
      CategoryUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      CategoryCreateWithoutBusinessInput,
      CategoryUncheckedCreateWithoutBusinessInput
    >;
  };

  export type CategoryUpdateWithWhereUniqueWithoutBusinessInput = {
    where: CategoryWhereUniqueInput;
    data: XOR<
      CategoryUpdateWithoutBusinessInput,
      CategoryUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type CategoryUpdateManyWithWhereWithoutBusinessInput = {
    where: CategoryScalarWhereInput;
    data: XOR<
      CategoryUpdateManyMutationInput,
      CategoryUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[];
    OR?: CategoryScalarWhereInput[];
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[];
    id?: StringFilter<"Category"> | string;
    name?: StringFilter<"Category"> | string;
    slug?: StringNullableFilter<"Category"> | string | null;
    active?: BoolFilter<"Category"> | boolean;
    priority?: IntFilter<"Category"> | number;
    businessId?: StringFilter<"Category"> | string;
  };

  export type ProductUpsertWithWhereUniqueWithoutBusinessInput = {
    where: ProductWhereUniqueInput;
    update: XOR<
      ProductUpdateWithoutBusinessInput,
      ProductUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      ProductCreateWithoutBusinessInput,
      ProductUncheckedCreateWithoutBusinessInput
    >;
  };

  export type ProductUpdateWithWhereUniqueWithoutBusinessInput = {
    where: ProductWhereUniqueInput;
    data: XOR<
      ProductUpdateWithoutBusinessInput,
      ProductUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type ProductUpdateManyWithWhereWithoutBusinessInput = {
    where: ProductScalarWhereInput;
    data: XOR<
      ProductUpdateManyMutationInput,
      ProductUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[];
    OR?: ProductScalarWhereInput[];
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[];
    id?: StringFilter<"Product"> | string;
    name?: StringFilter<"Product"> | string;
    slug?: StringNullableFilter<"Product"> | string | null;
    image?: JsonFilter<"Product">;
    description?: StringFilter<"Product"> | string;
    price?: IntFilter<"Product"> | number;
    offerPrice?: IntNullableFilter<"Product"> | number | null;
    images?: JsonNullableListFilter<"Product">;
    active?: BoolFilter<"Product"> | boolean;
    isNew?: BoolFilter<"Product"> | boolean;
    priority?: IntFilter<"Product"> | number;
    stock?: IntFilter<"Product"> | number;
    allowOrderOutOfStock?: BoolFilter<"Product"> | boolean;
    isExhaustible?: BoolFilter<"Product"> | boolean;
    businessId?: StringFilter<"Product"> | string;
    categoryId?: StringNullableFilter<"Product"> | string | null;
  };

  export type OrderUpsertWithWhereUniqueWithoutBusinessInput = {
    where: OrderWhereUniqueInput;
    update: XOR<
      OrderUpdateWithoutBusinessInput,
      OrderUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      OrderCreateWithoutBusinessInput,
      OrderUncheckedCreateWithoutBusinessInput
    >;
  };

  export type OrderUpdateWithWhereUniqueWithoutBusinessInput = {
    where: OrderWhereUniqueInput;
    data: XOR<
      OrderUpdateWithoutBusinessInput,
      OrderUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type OrderUpdateManyWithWhereWithoutBusinessInput = {
    where: OrderScalarWhereInput;
    data: XOR<
      OrderUpdateManyMutationInput,
      OrderUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[];
    OR?: OrderScalarWhereInput[];
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[];
    id?: StringFilter<"Order"> | string;
    userId?: StringNullableFilter<"Order"> | string | null;
    productsDetails?: JsonFilter<"Order">;
    shipping?: IntFilter<"Order"> | number;
    hasShipping?: BoolFilter<"Order"> | boolean;
    total?: IntFilter<"Order"> | number;
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus;
    sentAt?: DateTimeNullableFilter<"Order"> | Date | string | null;
    position?: IntNullableFilter<"Order"> | number | null;
    businessId?: StringNullableFilter<"Order"> | string | null;
    identifier?: StringNullableFilter<"Order"> | string | null;
  };

  export type UserBusinessUpsertWithWhereUniqueWithoutBusinessInput = {
    where: UserBusinessWhereUniqueInput;
    update: XOR<
      UserBusinessUpdateWithoutBusinessInput,
      UserBusinessUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      UserBusinessCreateWithoutBusinessInput,
      UserBusinessUncheckedCreateWithoutBusinessInput
    >;
  };

  export type UserBusinessUpdateWithWhereUniqueWithoutBusinessInput = {
    where: UserBusinessWhereUniqueInput;
    data: XOR<
      UserBusinessUpdateWithoutBusinessInput,
      UserBusinessUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type UserBusinessUpdateManyWithWhereWithoutBusinessInput = {
    where: UserBusinessScalarWhereInput;
    data: XOR<
      UserBusinessUpdateManyMutationInput,
      UserBusinessUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type UserBusinessScalarWhereInput = {
    AND?: UserBusinessScalarWhereInput | UserBusinessScalarWhereInput[];
    OR?: UserBusinessScalarWhereInput[];
    NOT?: UserBusinessScalarWhereInput | UserBusinessScalarWhereInput[];
    userId?: StringFilter<"UserBusiness"> | string;
    businessId?: StringFilter<"UserBusiness"> | string;
    type?: EnumUserBusinessTypeFilter<"UserBusiness"> | $Enums.UserBusinessType;
  };

  export type BusinessNeighborhoodUpsertWithWhereUniqueWithoutBusinessInput = {
    where: BusinessNeighborhoodWhereUniqueInput;
    update: XOR<
      BusinessNeighborhoodUpdateWithoutBusinessInput,
      BusinessNeighborhoodUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      BusinessNeighborhoodCreateWithoutBusinessInput,
      BusinessNeighborhoodUncheckedCreateWithoutBusinessInput
    >;
  };

  export type BusinessNeighborhoodUpdateWithWhereUniqueWithoutBusinessInput = {
    where: BusinessNeighborhoodWhereUniqueInput;
    data: XOR<
      BusinessNeighborhoodUpdateWithoutBusinessInput,
      BusinessNeighborhoodUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type BusinessNeighborhoodUpdateManyWithWhereWithoutBusinessInput = {
    where: BusinessNeighborhoodScalarWhereInput;
    data: XOR<
      BusinessNeighborhoodUpdateManyMutationInput,
      BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type BusinessNeighborhoodScalarWhereInput = {
    AND?:
      | BusinessNeighborhoodScalarWhereInput
      | BusinessNeighborhoodScalarWhereInput[];
    OR?: BusinessNeighborhoodScalarWhereInput[];
    NOT?:
      | BusinessNeighborhoodScalarWhereInput
      | BusinessNeighborhoodScalarWhereInput[];
    id?: StringFilter<"BusinessNeighborhood"> | string;
    shipping?: IntFilter<"BusinessNeighborhood"> | number;
    active?: BoolFilter<"BusinessNeighborhood"> | boolean;
    businessId?: StringFilter<"BusinessNeighborhood"> | string;
    neighborhoodId?: StringFilter<"BusinessNeighborhood"> | string;
  };

  export type UserAddressUpsertWithWhereUniqueWithoutBusinessInput = {
    where: UserAddressWhereUniqueInput;
    update: XOR<
      UserAddressUpdateWithoutBusinessInput,
      UserAddressUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      UserAddressCreateWithoutBusinessInput,
      UserAddressUncheckedCreateWithoutBusinessInput
    >;
  };

  export type UserAddressUpdateWithWhereUniqueWithoutBusinessInput = {
    where: UserAddressWhereUniqueInput;
    data: XOR<
      UserAddressUpdateWithoutBusinessInput,
      UserAddressUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type UserAddressUpdateManyWithWhereWithoutBusinessInput = {
    where: UserAddressScalarWhereInput;
    data: XOR<
      UserAddressUpdateManyMutationInput,
      UserAddressUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type UserAddressScalarWhereInput = {
    AND?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[];
    OR?: UserAddressScalarWhereInput[];
    NOT?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[];
    id?: StringFilter<"UserAddress"> | string;
    addressId?: StringFilter<"UserAddress"> | string;
    userId?: StringFilter<"UserAddress"> | string;
    businessId?: StringNullableFilter<"UserAddress"> | string | null;
  };

  export type PaymentMethodUpsertWithWhereUniqueWithoutBusinessInput = {
    where: PaymentMethodWhereUniqueInput;
    update: XOR<
      PaymentMethodUpdateWithoutBusinessInput,
      PaymentMethodUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      PaymentMethodCreateWithoutBusinessInput,
      PaymentMethodUncheckedCreateWithoutBusinessInput
    >;
  };

  export type PaymentMethodUpdateWithWhereUniqueWithoutBusinessInput = {
    where: PaymentMethodWhereUniqueInput;
    data: XOR<
      PaymentMethodUpdateWithoutBusinessInput,
      PaymentMethodUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type PaymentMethodUpdateManyWithWhereWithoutBusinessInput = {
    where: PaymentMethodScalarWhereInput;
    data: XOR<
      PaymentMethodUpdateManyMutationInput,
      PaymentMethodUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type PaymentMethodScalarWhereInput = {
    AND?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[];
    OR?: PaymentMethodScalarWhereInput[];
    NOT?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[];
    id?: StringFilter<"PaymentMethod"> | string;
    name?: StringFilter<"PaymentMethod"> | string;
    type?:
      | EnumPaymentMethodTypeFilter<"PaymentMethod">
      | $Enums.PaymentMethodType;
    data?: JsonFilter<"PaymentMethod">;
    businessId?: StringFilter<"PaymentMethod"> | string;
  };

  export type InvitationLinkUpsertWithWhereUniqueWithoutBusinessInput = {
    where: InvitationLinkWhereUniqueInput;
    update: XOR<
      InvitationLinkUpdateWithoutBusinessInput,
      InvitationLinkUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      InvitationLinkCreateWithoutBusinessInput,
      InvitationLinkUncheckedCreateWithoutBusinessInput
    >;
  };

  export type InvitationLinkUpdateWithWhereUniqueWithoutBusinessInput = {
    where: InvitationLinkWhereUniqueInput;
    data: XOR<
      InvitationLinkUpdateWithoutBusinessInput,
      InvitationLinkUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type InvitationLinkUpdateManyWithWhereWithoutBusinessInput = {
    where: InvitationLinkScalarWhereInput;
    data: XOR<
      InvitationLinkUpdateManyMutationInput,
      InvitationLinkUncheckedUpdateManyWithoutBusinessInput
    >;
  };

  export type InvitationLinkScalarWhereInput = {
    AND?: InvitationLinkScalarWhereInput | InvitationLinkScalarWhereInput[];
    OR?: InvitationLinkScalarWhereInput[];
    NOT?: InvitationLinkScalarWhereInput | InvitationLinkScalarWhereInput[];
    id?: StringFilter<"InvitationLink"> | string;
    code?: StringFilter<"InvitationLink"> | string;
    businessId?: StringFilter<"InvitationLink"> | string;
    createdAt?: DateTimeFilter<"InvitationLink"> | Date | string;
  };

  export type BusinessCreateWithoutTelegramInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutTelegramInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutTelegramInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutTelegramInput,
      BusinessUncheckedCreateWithoutTelegramInput
    >;
  };

  export type BusinessUpsertWithoutTelegramInput = {
    update: XOR<
      BusinessUpdateWithoutTelegramInput,
      BusinessUncheckedUpdateWithoutTelegramInput
    >;
    create: XOR<
      BusinessCreateWithoutTelegramInput,
      BusinessUncheckedCreateWithoutTelegramInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutTelegramInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutTelegramInput,
      BusinessUncheckedUpdateWithoutTelegramInput
    >;
  };

  export type BusinessUpdateWithoutTelegramInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutTelegramInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessCreateWithoutPaymentMethodInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutPaymentMethodInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutPaymentMethodInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutPaymentMethodInput,
      BusinessUncheckedCreateWithoutPaymentMethodInput
    >;
  };

  export type BusinessCreateWithoutDefaultPaymentMethodInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutDefaultPaymentMethodInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutDefaultPaymentMethodInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutDefaultPaymentMethodInput,
      BusinessUncheckedCreateWithoutDefaultPaymentMethodInput
    >;
  };

  export type BusinessUpsertWithoutPaymentMethodInput = {
    update: XOR<
      BusinessUpdateWithoutPaymentMethodInput,
      BusinessUncheckedUpdateWithoutPaymentMethodInput
    >;
    create: XOR<
      BusinessCreateWithoutPaymentMethodInput,
      BusinessUncheckedCreateWithoutPaymentMethodInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutPaymentMethodInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutPaymentMethodInput,
      BusinessUncheckedUpdateWithoutPaymentMethodInput
    >;
  };

  export type BusinessUpdateWithoutPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUpsertWithoutDefaultPaymentMethodInput = {
    update: XOR<
      BusinessUpdateWithoutDefaultPaymentMethodInput,
      BusinessUncheckedUpdateWithoutDefaultPaymentMethodInput
    >;
    create: XOR<
      BusinessCreateWithoutDefaultPaymentMethodInput,
      BusinessUncheckedCreateWithoutDefaultPaymentMethodInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutDefaultPaymentMethodInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutDefaultPaymentMethodInput,
      BusinessUncheckedUpdateWithoutDefaultPaymentMethodInput
    >;
  };

  export type BusinessUpdateWithoutDefaultPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutDefaultPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type ProductCreateWithoutCategoryInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    business: BusinessCreateNestedOneWithoutProductsInput;
    orderItems?: OrderProductCreateNestedManyWithoutProductInput;
  };

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    businessId: string;
    orderItems?: OrderProductUncheckedCreateNestedManyWithoutProductInput;
  };

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutCategoryInput,
      ProductUncheckedCreateWithoutCategoryInput
    >;
  };

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[];
    skipDuplicates?: boolean;
  };

  export type BusinessCreateWithoutCategoriesInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutCategoriesInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutCategoriesInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutCategoriesInput,
      BusinessUncheckedCreateWithoutCategoriesInput
    >;
  };

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput;
    update: XOR<
      ProductUpdateWithoutCategoryInput,
      ProductUncheckedUpdateWithoutCategoryInput
    >;
    create: XOR<
      ProductCreateWithoutCategoryInput,
      ProductUncheckedCreateWithoutCategoryInput
    >;
  };

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput;
    data: XOR<
      ProductUpdateWithoutCategoryInput,
      ProductUncheckedUpdateWithoutCategoryInput
    >;
  };

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput;
    data: XOR<
      ProductUpdateManyMutationInput,
      ProductUncheckedUpdateManyWithoutCategoryInput
    >;
  };

  export type BusinessUpsertWithoutCategoriesInput = {
    update: XOR<
      BusinessUpdateWithoutCategoriesInput,
      BusinessUncheckedUpdateWithoutCategoriesInput
    >;
    create: XOR<
      BusinessCreateWithoutCategoriesInput,
      BusinessUncheckedCreateWithoutCategoriesInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutCategoriesInput,
      BusinessUncheckedUpdateWithoutCategoriesInput
    >;
  };

  export type BusinessUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessCreateWithoutProductsInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutProductsInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutProductsInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutProductsInput,
      BusinessUncheckedCreateWithoutProductsInput
    >;
  };

  export type CategoryCreateWithoutProductsInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    business: BusinessCreateNestedOneWithoutCategoriesInput;
  };

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
    businessId: string;
  };

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput;
    create: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
  };

  export type OrderProductCreateWithoutProductInput = {
    price: number;
    position?: number;
    quantity: number;
    order: OrderCreateNestedOneWithoutItemsInput;
  };

  export type OrderProductUncheckedCreateWithoutProductInput = {
    orderId: string;
    price: number;
    position?: number;
    quantity: number;
  };

  export type OrderProductCreateOrConnectWithoutProductInput = {
    where: OrderProductWhereUniqueInput;
    create: XOR<
      OrderProductCreateWithoutProductInput,
      OrderProductUncheckedCreateWithoutProductInput
    >;
  };

  export type OrderProductCreateManyProductInputEnvelope = {
    data:
      | OrderProductCreateManyProductInput
      | OrderProductCreateManyProductInput[];
    skipDuplicates?: boolean;
  };

  export type BusinessUpsertWithoutProductsInput = {
    update: XOR<
      BusinessUpdateWithoutProductsInput,
      BusinessUncheckedUpdateWithoutProductsInput
    >;
    create: XOR<
      BusinessCreateWithoutProductsInput,
      BusinessUncheckedCreateWithoutProductsInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutProductsInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutProductsInput,
      BusinessUncheckedUpdateWithoutProductsInput
    >;
  };

  export type BusinessUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<
      CategoryUpdateWithoutProductsInput,
      CategoryUncheckedUpdateWithoutProductsInput
    >;
    create: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
    where?: CategoryWhereInput;
  };

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput;
    data: XOR<
      CategoryUpdateWithoutProductsInput,
      CategoryUncheckedUpdateWithoutProductsInput
    >;
  };

  export type CategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    business?: BusinessUpdateOneRequiredWithoutCategoriesNestedInput;
  };

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type OrderProductUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderProductWhereUniqueInput;
    update: XOR<
      OrderProductUpdateWithoutProductInput,
      OrderProductUncheckedUpdateWithoutProductInput
    >;
    create: XOR<
      OrderProductCreateWithoutProductInput,
      OrderProductUncheckedCreateWithoutProductInput
    >;
  };

  export type OrderProductUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderProductWhereUniqueInput;
    data: XOR<
      OrderProductUpdateWithoutProductInput,
      OrderProductUncheckedUpdateWithoutProductInput
    >;
  };

  export type OrderProductUpdateManyWithWhereWithoutProductInput = {
    where: OrderProductScalarWhereInput;
    data: XOR<
      OrderProductUpdateManyMutationInput,
      OrderProductUncheckedUpdateManyWithoutProductInput
    >;
  };

  export type OrderProductScalarWhereInput = {
    AND?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[];
    OR?: OrderProductScalarWhereInput[];
    NOT?: OrderProductScalarWhereInput | OrderProductScalarWhereInput[];
    productId?: StringFilter<"OrderProduct"> | string;
    orderId?: StringFilter<"OrderProduct"> | string;
    price?: IntFilter<"OrderProduct"> | number;
    position?: IntFilter<"OrderProduct"> | number;
    quantity?: IntFilter<"OrderProduct"> | number;
  };

  export type OrderCreateWithoutUserInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
    items?: OrderProductCreateNestedManyWithoutOrderInput;
    business?: BusinessCreateNestedOneWithoutOrdersInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutOrderInput;
  };

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    businessId?: string | null;
    identifier?: string | null;
    items?: OrderProductUncheckedCreateNestedManyWithoutOrderInput;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutOrderInput;
  };

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput;
    create: XOR<
      OrderCreateWithoutUserInput,
      OrderUncheckedCreateWithoutUserInput
    >;
  };

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type AccountCreateWithoutUserInput = {
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null;
    access_token?: string | null;
    expires_at?: number | null;
    token_type?: string | null;
    scope?: string | null;
    id_token?: string | null;
    session_state?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type AccountUncheckedCreateWithoutUserInput = {
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null;
    access_token?: string | null;
    expires_at?: number | null;
    token_type?: string | null;
    scope?: string | null;
    id_token?: string | null;
    session_state?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput;
    create: XOR<
      AccountCreateWithoutUserInput,
      AccountUncheckedCreateWithoutUserInput
    >;
  };

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type SessionCreateWithoutUserInput = {
    sessionToken: string;
    expires: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SessionUncheckedCreateWithoutUserInput = {
    sessionToken: string;
    expires: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput;
    create: XOR<
      SessionCreateWithoutUserInput,
      SessionUncheckedCreateWithoutUserInput
    >;
  };

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type AuthenticatorCreateWithoutUserInput = {
    credentialID: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports?: string | null;
  };

  export type AuthenticatorUncheckedCreateWithoutUserInput = {
    credentialID: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports?: string | null;
  };

  export type AuthenticatorCreateOrConnectWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput;
    create: XOR<
      AuthenticatorCreateWithoutUserInput,
      AuthenticatorUncheckedCreateWithoutUserInput
    >;
  };

  export type AuthenticatorCreateManyUserInputEnvelope = {
    data: AuthenticatorCreateManyUserInput | AuthenticatorCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type UserBusinessCreateWithoutUserInput = {
    type?: $Enums.UserBusinessType;
    business: BusinessCreateNestedOneWithoutUsersInput;
  };

  export type UserBusinessUncheckedCreateWithoutUserInput = {
    businessId: string;
    type?: $Enums.UserBusinessType;
  };

  export type UserBusinessCreateOrConnectWithoutUserInput = {
    where: UserBusinessWhereUniqueInput;
    create: XOR<
      UserBusinessCreateWithoutUserInput,
      UserBusinessUncheckedCreateWithoutUserInput
    >;
  };

  export type UserBusinessCreateManyUserInputEnvelope = {
    data: UserBusinessCreateManyUserInput | UserBusinessCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type UserAddressCreateWithoutUserInput = {
    id?: string;
    address: AddressCreateNestedOneWithoutUserAddressInput;
    business?: BusinessCreateNestedOneWithoutUserAddressInput;
  };

  export type UserAddressUncheckedCreateWithoutUserInput = {
    id?: string;
    addressId: string;
    businessId?: string | null;
  };

  export type UserAddressCreateOrConnectWithoutUserInput = {
    where: UserAddressWhereUniqueInput;
    create: XOR<
      UserAddressCreateWithoutUserInput,
      UserAddressUncheckedCreateWithoutUserInput
    >;
  };

  export type UserAddressCreateManyUserInputEnvelope = {
    data: UserAddressCreateManyUserInput | UserAddressCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput;
    update: XOR<
      OrderUpdateWithoutUserInput,
      OrderUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      OrderCreateWithoutUserInput,
      OrderUncheckedCreateWithoutUserInput
    >;
  };

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput;
    data: XOR<
      OrderUpdateWithoutUserInput,
      OrderUncheckedUpdateWithoutUserInput
    >;
  };

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput;
    data: XOR<
      OrderUpdateManyMutationInput,
      OrderUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput;
    update: XOR<
      AccountUpdateWithoutUserInput,
      AccountUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      AccountCreateWithoutUserInput,
      AccountUncheckedCreateWithoutUserInput
    >;
  };

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput;
    data: XOR<
      AccountUpdateWithoutUserInput,
      AccountUncheckedUpdateWithoutUserInput
    >;
  };

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput;
    data: XOR<
      AccountUpdateManyMutationInput,
      AccountUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[];
    OR?: AccountScalarWhereInput[];
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[];
    userId?: StringFilter<"Account"> | string;
    type?: StringFilter<"Account"> | string;
    provider?: StringFilter<"Account"> | string;
    providerAccountId?: StringFilter<"Account"> | string;
    refresh_token?: StringNullableFilter<"Account"> | string | null;
    access_token?: StringNullableFilter<"Account"> | string | null;
    expires_at?: IntNullableFilter<"Account"> | number | null;
    token_type?: StringNullableFilter<"Account"> | string | null;
    scope?: StringNullableFilter<"Account"> | string | null;
    id_token?: StringNullableFilter<"Account"> | string | null;
    session_state?: StringNullableFilter<"Account"> | string | null;
    createdAt?: DateTimeFilter<"Account"> | Date | string;
    updatedAt?: DateTimeFilter<"Account"> | Date | string;
  };

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput;
    update: XOR<
      SessionUpdateWithoutUserInput,
      SessionUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      SessionCreateWithoutUserInput,
      SessionUncheckedCreateWithoutUserInput
    >;
  };

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput;
    data: XOR<
      SessionUpdateWithoutUserInput,
      SessionUncheckedUpdateWithoutUserInput
    >;
  };

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput;
    data: XOR<
      SessionUpdateManyMutationInput,
      SessionUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[];
    OR?: SessionScalarWhereInput[];
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[];
    sessionToken?: StringFilter<"Session"> | string;
    userId?: StringFilter<"Session"> | string;
    expires?: DateTimeFilter<"Session"> | Date | string;
    createdAt?: DateTimeFilter<"Session"> | Date | string;
    updatedAt?: DateTimeFilter<"Session"> | Date | string;
  };

  export type AuthenticatorUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput;
    update: XOR<
      AuthenticatorUpdateWithoutUserInput,
      AuthenticatorUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      AuthenticatorCreateWithoutUserInput,
      AuthenticatorUncheckedCreateWithoutUserInput
    >;
  };

  export type AuthenticatorUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput;
    data: XOR<
      AuthenticatorUpdateWithoutUserInput,
      AuthenticatorUncheckedUpdateWithoutUserInput
    >;
  };

  export type AuthenticatorUpdateManyWithWhereWithoutUserInput = {
    where: AuthenticatorScalarWhereInput;
    data: XOR<
      AuthenticatorUpdateManyMutationInput,
      AuthenticatorUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type AuthenticatorScalarWhereInput = {
    AND?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[];
    OR?: AuthenticatorScalarWhereInput[];
    NOT?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[];
    credentialID?: StringFilter<"Authenticator"> | string;
    userId?: StringFilter<"Authenticator"> | string;
    providerAccountId?: StringFilter<"Authenticator"> | string;
    credentialPublicKey?: StringFilter<"Authenticator"> | string;
    counter?: IntFilter<"Authenticator"> | number;
    credentialDeviceType?: StringFilter<"Authenticator"> | string;
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean;
    transports?: StringNullableFilter<"Authenticator"> | string | null;
  };

  export type UserBusinessUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBusinessWhereUniqueInput;
    update: XOR<
      UserBusinessUpdateWithoutUserInput,
      UserBusinessUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      UserBusinessCreateWithoutUserInput,
      UserBusinessUncheckedCreateWithoutUserInput
    >;
  };

  export type UserBusinessUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBusinessWhereUniqueInput;
    data: XOR<
      UserBusinessUpdateWithoutUserInput,
      UserBusinessUncheckedUpdateWithoutUserInput
    >;
  };

  export type UserBusinessUpdateManyWithWhereWithoutUserInput = {
    where: UserBusinessScalarWhereInput;
    data: XOR<
      UserBusinessUpdateManyMutationInput,
      UserBusinessUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type UserAddressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput;
    update: XOR<
      UserAddressUpdateWithoutUserInput,
      UserAddressUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      UserAddressCreateWithoutUserInput,
      UserAddressUncheckedCreateWithoutUserInput
    >;
  };

  export type UserAddressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput;
    data: XOR<
      UserAddressUpdateWithoutUserInput,
      UserAddressUncheckedUpdateWithoutUserInput
    >;
  };

  export type UserAddressUpdateManyWithWhereWithoutUserInput = {
    where: UserAddressScalarWhereInput;
    data: XOR<
      UserAddressUpdateManyMutationInput,
      UserAddressUncheckedUpdateManyWithoutUserInput
    >;
  };

  export type UserCreateWithoutBusinessInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderCreateNestedManyWithoutUserInput;
    accounts?: AccountCreateNestedManyWithoutUserInput;
    sessions?: SessionCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput;
    address?: UserAddressCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutBusinessInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput;
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput;
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput;
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutBusinessInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutBusinessInput,
      UserUncheckedCreateWithoutBusinessInput
    >;
  };

  export type BusinessCreateWithoutUsersInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutUsersInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutUsersInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutUsersInput,
      BusinessUncheckedCreateWithoutUsersInput
    >;
  };

  export type UserUpsertWithoutBusinessInput = {
    update: XOR<
      UserUpdateWithoutBusinessInput,
      UserUncheckedUpdateWithoutBusinessInput
    >;
    create: XOR<
      UserCreateWithoutBusinessInput,
      UserUncheckedCreateWithoutBusinessInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutBusinessInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutBusinessInput,
      UserUncheckedUpdateWithoutBusinessInput
    >;
  };

  export type UserUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUpdateManyWithoutUserNestedInput;
    accounts?: AccountUpdateManyWithoutUserNestedInput;
    sessions?: SessionUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput;
    address?: UserAddressUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput;
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput;
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput;
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type BusinessUpsertWithoutUsersInput = {
    update: XOR<
      BusinessUpdateWithoutUsersInput,
      BusinessUncheckedUpdateWithoutUsersInput
    >;
    create: XOR<
      BusinessCreateWithoutUsersInput,
      BusinessUncheckedCreateWithoutUsersInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutUsersInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutUsersInput,
      BusinessUncheckedUpdateWithoutUsersInput
    >;
  };

  export type BusinessUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessCreateWithoutInvitationLinksInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutInvitationLinksInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutInvitationLinksInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutInvitationLinksInput,
      BusinessUncheckedCreateWithoutInvitationLinksInput
    >;
  };

  export type BusinessUpsertWithoutInvitationLinksInput = {
    update: XOR<
      BusinessUpdateWithoutInvitationLinksInput,
      BusinessUncheckedUpdateWithoutInvitationLinksInput
    >;
    create: XOR<
      BusinessCreateWithoutInvitationLinksInput,
      BusinessUncheckedCreateWithoutInvitationLinksInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutInvitationLinksInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutInvitationLinksInput,
      BusinessUncheckedUpdateWithoutInvitationLinksInput
    >;
  };

  export type BusinessUpdateWithoutInvitationLinksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutInvitationLinksInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type UserCreateWithoutOrdersInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    accounts?: AccountCreateNestedManyWithoutUserInput;
    sessions?: SessionCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput;
    business?: UserBusinessCreateNestedManyWithoutUserInput;
    address?: UserAddressCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput;
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput;
    business?: UserBusinessUncheckedCreateNestedManyWithoutUserInput;
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutOrdersInput,
      UserUncheckedCreateWithoutOrdersInput
    >;
  };

  export type OrderProductCreateWithoutOrderInput = {
    price: number;
    position?: number;
    quantity: number;
    product: ProductCreateNestedOneWithoutOrderItemsInput;
  };

  export type OrderProductUncheckedCreateWithoutOrderInput = {
    productId: string;
    price: number;
    position?: number;
    quantity: number;
  };

  export type OrderProductCreateOrConnectWithoutOrderInput = {
    where: OrderProductWhereUniqueInput;
    create: XOR<
      OrderProductCreateWithoutOrderInput,
      OrderProductUncheckedCreateWithoutOrderInput
    >;
  };

  export type OrderProductCreateManyOrderInputEnvelope = {
    data: OrderProductCreateManyOrderInput | OrderProductCreateManyOrderInput[];
    skipDuplicates?: boolean;
  };

  export type BusinessCreateWithoutOrdersInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutOrdersInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutOrdersInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutOrdersInput,
      BusinessUncheckedCreateWithoutOrdersInput
    >;
  };

  export type OrderAddressCreateWithoutOrderInput = {
    id?: string;
    address: AddressCreateNestedOneWithoutOrderAddressInput;
  };

  export type OrderAddressUncheckedCreateWithoutOrderInput = {
    id?: string;
    addressId: string;
  };

  export type OrderAddressCreateOrConnectWithoutOrderInput = {
    where: OrderAddressWhereUniqueInput;
    create: XOR<
      OrderAddressCreateWithoutOrderInput,
      OrderAddressUncheckedCreateWithoutOrderInput
    >;
  };

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<
      UserUpdateWithoutOrdersInput,
      UserUncheckedUpdateWithoutOrdersInput
    >;
    create: XOR<
      UserCreateWithoutOrdersInput,
      UserUncheckedCreateWithoutOrdersInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutOrdersInput,
      UserUncheckedUpdateWithoutOrdersInput
    >;
  };

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    accounts?: AccountUpdateManyWithoutUserNestedInput;
    sessions?: SessionUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUpdateManyWithoutUserNestedInput;
    address?: UserAddressUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput;
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUncheckedUpdateManyWithoutUserNestedInput;
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type OrderProductUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderProductWhereUniqueInput;
    update: XOR<
      OrderProductUpdateWithoutOrderInput,
      OrderProductUncheckedUpdateWithoutOrderInput
    >;
    create: XOR<
      OrderProductCreateWithoutOrderInput,
      OrderProductUncheckedCreateWithoutOrderInput
    >;
  };

  export type OrderProductUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderProductWhereUniqueInput;
    data: XOR<
      OrderProductUpdateWithoutOrderInput,
      OrderProductUncheckedUpdateWithoutOrderInput
    >;
  };

  export type OrderProductUpdateManyWithWhereWithoutOrderInput = {
    where: OrderProductScalarWhereInput;
    data: XOR<
      OrderProductUpdateManyMutationInput,
      OrderProductUncheckedUpdateManyWithoutOrderInput
    >;
  };

  export type BusinessUpsertWithoutOrdersInput = {
    update: XOR<
      BusinessUpdateWithoutOrdersInput,
      BusinessUncheckedUpdateWithoutOrdersInput
    >;
    create: XOR<
      BusinessCreateWithoutOrdersInput,
      BusinessUncheckedCreateWithoutOrdersInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutOrdersInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutOrdersInput,
      BusinessUncheckedUpdateWithoutOrdersInput
    >;
  };

  export type BusinessUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type OrderAddressUpsertWithoutOrderInput = {
    update: XOR<
      OrderAddressUpdateWithoutOrderInput,
      OrderAddressUncheckedUpdateWithoutOrderInput
    >;
    create: XOR<
      OrderAddressCreateWithoutOrderInput,
      OrderAddressUncheckedCreateWithoutOrderInput
    >;
    where?: OrderAddressWhereInput;
  };

  export type OrderAddressUpdateToOneWithWhereWithoutOrderInput = {
    where?: OrderAddressWhereInput;
    data: XOR<
      OrderAddressUpdateWithoutOrderInput,
      OrderAddressUncheckedUpdateWithoutOrderInput
    >;
  };

  export type OrderAddressUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string;
    address?: AddressUpdateOneRequiredWithoutOrderAddressNestedInput;
  };

  export type OrderAddressUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
  };

  export type ProductCreateWithoutOrderItemsInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    business: BusinessCreateNestedOneWithoutProductsInput;
    category?: CategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateWithoutOrderItemsInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    businessId: string;
    categoryId?: string | null;
  };

  export type ProductCreateOrConnectWithoutOrderItemsInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutOrderItemsInput,
      ProductUncheckedCreateWithoutOrderItemsInput
    >;
  };

  export type OrderCreateWithoutItemsInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
    user?: UserCreateNestedOneWithoutOrdersInput;
    business?: BusinessCreateNestedOneWithoutOrdersInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutOrderInput;
  };

  export type OrderUncheckedCreateWithoutItemsInput = {
    id?: string;
    userId?: string | null;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    businessId?: string | null;
    identifier?: string | null;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutOrderInput;
  };

  export type OrderCreateOrConnectWithoutItemsInput = {
    where: OrderWhereUniqueInput;
    create: XOR<
      OrderCreateWithoutItemsInput,
      OrderUncheckedCreateWithoutItemsInput
    >;
  };

  export type ProductUpsertWithoutOrderItemsInput = {
    update: XOR<
      ProductUpdateWithoutOrderItemsInput,
      ProductUncheckedUpdateWithoutOrderItemsInput
    >;
    create: XOR<
      ProductCreateWithoutOrderItemsInput,
      ProductUncheckedCreateWithoutOrderItemsInput
    >;
    where?: ProductWhereInput;
  };

  export type ProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProductWhereInput;
    data: XOR<
      ProductUpdateWithoutOrderItemsInput,
      ProductUncheckedUpdateWithoutOrderItemsInput
    >;
  };

  export type ProductUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    business?: BusinessUpdateOneRequiredWithoutProductsNestedInput;
    category?: CategoryUpdateOneWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderUpsertWithoutItemsInput = {
    update: XOR<
      OrderUpdateWithoutItemsInput,
      OrderUncheckedUpdateWithoutItemsInput
    >;
    create: XOR<
      OrderCreateWithoutItemsInput,
      OrderUncheckedCreateWithoutItemsInput
    >;
    where?: OrderWhereInput;
  };

  export type OrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: OrderWhereInput;
    data: XOR<
      OrderUpdateWithoutItemsInput,
      OrderUncheckedUpdateWithoutItemsInput
    >;
  };

  export type OrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    user?: UserUpdateOneWithoutOrdersNestedInput;
    business?: BusinessUpdateOneWithoutOrdersNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutOrderNestedInput;
  };

  export type OrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: NullableStringFieldUpdateOperationsInput | string | null;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput;
  };

  export type UserCreateWithoutAccountsInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderCreateNestedManyWithoutUserInput;
    sessions?: SessionCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput;
    business?: UserBusinessCreateNestedManyWithoutUserInput;
    address?: UserAddressCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput;
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput;
    business?: UserBusinessUncheckedCreateNestedManyWithoutUserInput;
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutAccountsInput,
      UserUncheckedCreateWithoutAccountsInput
    >;
  };

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<
      UserUpdateWithoutAccountsInput,
      UserUncheckedUpdateWithoutAccountsInput
    >;
    create: XOR<
      UserCreateWithoutAccountsInput,
      UserUncheckedCreateWithoutAccountsInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutAccountsInput,
      UserUncheckedUpdateWithoutAccountsInput
    >;
  };

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUpdateManyWithoutUserNestedInput;
    sessions?: SessionUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUpdateManyWithoutUserNestedInput;
    address?: UserAddressUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput;
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUncheckedUpdateManyWithoutUserNestedInput;
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type UserCreateWithoutSessionsInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderCreateNestedManyWithoutUserInput;
    accounts?: AccountCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput;
    business?: UserBusinessCreateNestedManyWithoutUserInput;
    address?: UserAddressCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput;
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput;
    business?: UserBusinessUncheckedCreateNestedManyWithoutUserInput;
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutSessionsInput,
      UserUncheckedCreateWithoutSessionsInput
    >;
  };

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<
      UserUpdateWithoutSessionsInput,
      UserUncheckedUpdateWithoutSessionsInput
    >;
    create: XOR<
      UserCreateWithoutSessionsInput,
      UserUncheckedCreateWithoutSessionsInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutSessionsInput,
      UserUncheckedUpdateWithoutSessionsInput
    >;
  };

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUpdateManyWithoutUserNestedInput;
    accounts?: AccountUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUpdateManyWithoutUserNestedInput;
    address?: UserAddressUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput;
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUncheckedUpdateManyWithoutUserNestedInput;
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type UserCreateWithoutAuthenticatorInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderCreateNestedManyWithoutUserInput;
    accounts?: AccountCreateNestedManyWithoutUserInput;
    sessions?: SessionCreateNestedManyWithoutUserInput;
    business?: UserBusinessCreateNestedManyWithoutUserInput;
    address?: UserAddressCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutAuthenticatorInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput;
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput;
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput;
    business?: UserBusinessUncheckedCreateNestedManyWithoutUserInput;
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutAuthenticatorInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutAuthenticatorInput,
      UserUncheckedCreateWithoutAuthenticatorInput
    >;
  };

  export type UserUpsertWithoutAuthenticatorInput = {
    update: XOR<
      UserUpdateWithoutAuthenticatorInput,
      UserUncheckedUpdateWithoutAuthenticatorInput
    >;
    create: XOR<
      UserCreateWithoutAuthenticatorInput,
      UserUncheckedCreateWithoutAuthenticatorInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutAuthenticatorInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutAuthenticatorInput,
      UserUncheckedUpdateWithoutAuthenticatorInput
    >;
  };

  export type UserUpdateWithoutAuthenticatorInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUpdateManyWithoutUserNestedInput;
    accounts?: AccountUpdateManyWithoutUserNestedInput;
    sessions?: SessionUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUpdateManyWithoutUserNestedInput;
    address?: UserAddressUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutAuthenticatorInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput;
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput;
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUncheckedUpdateManyWithoutUserNestedInput;
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type NeighborhoodCreateWithoutAddressesInput = {
    id?: string;
    name: string;
    city: string;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutNeighborhoodInput;
  };

  export type NeighborhoodUncheckedCreateWithoutAddressesInput = {
    id?: string;
    name: string;
    city: string;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutNeighborhoodInput;
  };

  export type NeighborhoodCreateOrConnectWithoutAddressesInput = {
    where: NeighborhoodWhereUniqueInput;
    create: XOR<
      NeighborhoodCreateWithoutAddressesInput,
      NeighborhoodUncheckedCreateWithoutAddressesInput
    >;
  };

  export type UserAddressCreateWithoutAddressInput = {
    id?: string;
    user: UserCreateNestedOneWithoutAddressInput;
    business?: BusinessCreateNestedOneWithoutUserAddressInput;
  };

  export type UserAddressUncheckedCreateWithoutAddressInput = {
    id?: string;
    userId: string;
    businessId?: string | null;
  };

  export type UserAddressCreateOrConnectWithoutAddressInput = {
    where: UserAddressWhereUniqueInput;
    create: XOR<
      UserAddressCreateWithoutAddressInput,
      UserAddressUncheckedCreateWithoutAddressInput
    >;
  };

  export type OrderAddressCreateWithoutAddressInput = {
    id?: string;
    order: OrderCreateNestedOneWithoutOrderAddressInput;
  };

  export type OrderAddressUncheckedCreateWithoutAddressInput = {
    id?: string;
    orderId: string;
  };

  export type OrderAddressCreateOrConnectWithoutAddressInput = {
    where: OrderAddressWhereUniqueInput;
    create: XOR<
      OrderAddressCreateWithoutAddressInput,
      OrderAddressUncheckedCreateWithoutAddressInput
    >;
  };

  export type NeighborhoodUpsertWithoutAddressesInput = {
    update: XOR<
      NeighborhoodUpdateWithoutAddressesInput,
      NeighborhoodUncheckedUpdateWithoutAddressesInput
    >;
    create: XOR<
      NeighborhoodCreateWithoutAddressesInput,
      NeighborhoodUncheckedCreateWithoutAddressesInput
    >;
    where?: NeighborhoodWhereInput;
  };

  export type NeighborhoodUpdateToOneWithWhereWithoutAddressesInput = {
    where?: NeighborhoodWhereInput;
    data: XOR<
      NeighborhoodUpdateWithoutAddressesInput,
      NeighborhoodUncheckedUpdateWithoutAddressesInput
    >;
  };

  export type NeighborhoodUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutNeighborhoodNestedInput;
  };

  export type NeighborhoodUncheckedUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutNeighborhoodNestedInput;
  };

  export type UserAddressUpsertWithoutAddressInput = {
    update: XOR<
      UserAddressUpdateWithoutAddressInput,
      UserAddressUncheckedUpdateWithoutAddressInput
    >;
    create: XOR<
      UserAddressCreateWithoutAddressInput,
      UserAddressUncheckedCreateWithoutAddressInput
    >;
    where?: UserAddressWhereInput;
  };

  export type UserAddressUpdateToOneWithWhereWithoutAddressInput = {
    where?: UserAddressWhereInput;
    data: XOR<
      UserAddressUpdateWithoutAddressInput,
      UserAddressUncheckedUpdateWithoutAddressInput
    >;
  };

  export type UserAddressUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    user?: UserUpdateOneRequiredWithoutAddressNestedInput;
    business?: BusinessUpdateOneWithoutUserAddressNestedInput;
  };

  export type UserAddressUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderAddressUpsertWithoutAddressInput = {
    update: XOR<
      OrderAddressUpdateWithoutAddressInput,
      OrderAddressUncheckedUpdateWithoutAddressInput
    >;
    create: XOR<
      OrderAddressCreateWithoutAddressInput,
      OrderAddressUncheckedCreateWithoutAddressInput
    >;
    where?: OrderAddressWhereInput;
  };

  export type OrderAddressUpdateToOneWithWhereWithoutAddressInput = {
    where?: OrderAddressWhereInput;
    data: XOR<
      OrderAddressUpdateWithoutAddressInput,
      OrderAddressUncheckedUpdateWithoutAddressInput
    >;
  };

  export type OrderAddressUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    order?: OrderUpdateOneRequiredWithoutOrderAddressNestedInput;
  };

  export type OrderAddressUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    orderId?: StringFieldUpdateOperationsInput | string;
  };

  export type AddressCreateWithoutNeighborhoodInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    userAddress?: UserAddressCreateNestedOneWithoutAddressInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutAddressInput;
  };

  export type AddressUncheckedCreateWithoutNeighborhoodInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    userAddress?: UserAddressUncheckedCreateNestedOneWithoutAddressInput;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutAddressInput;
  };

  export type AddressCreateOrConnectWithoutNeighborhoodInput = {
    where: AddressWhereUniqueInput;
    create: XOR<
      AddressCreateWithoutNeighborhoodInput,
      AddressUncheckedCreateWithoutNeighborhoodInput
    >;
  };

  export type AddressCreateManyNeighborhoodInputEnvelope = {
    data:
      | AddressCreateManyNeighborhoodInput
      | AddressCreateManyNeighborhoodInput[];
    skipDuplicates?: boolean;
  };

  export type BusinessNeighborhoodCreateWithoutNeighborhoodInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    business: BusinessCreateNestedOneWithoutBusinessNeighborhoodInput;
  };

  export type BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    businessId: string;
  };

  export type BusinessNeighborhoodCreateOrConnectWithoutNeighborhoodInput = {
    where: BusinessNeighborhoodWhereUniqueInput;
    create: XOR<
      BusinessNeighborhoodCreateWithoutNeighborhoodInput,
      BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput
    >;
  };

  export type BusinessNeighborhoodCreateManyNeighborhoodInputEnvelope = {
    data:
      | BusinessNeighborhoodCreateManyNeighborhoodInput
      | BusinessNeighborhoodCreateManyNeighborhoodInput[];
    skipDuplicates?: boolean;
  };

  export type AddressUpsertWithWhereUniqueWithoutNeighborhoodInput = {
    where: AddressWhereUniqueInput;
    update: XOR<
      AddressUpdateWithoutNeighborhoodInput,
      AddressUncheckedUpdateWithoutNeighborhoodInput
    >;
    create: XOR<
      AddressCreateWithoutNeighborhoodInput,
      AddressUncheckedCreateWithoutNeighborhoodInput
    >;
  };

  export type AddressUpdateWithWhereUniqueWithoutNeighborhoodInput = {
    where: AddressWhereUniqueInput;
    data: XOR<
      AddressUpdateWithoutNeighborhoodInput,
      AddressUncheckedUpdateWithoutNeighborhoodInput
    >;
  };

  export type AddressUpdateManyWithWhereWithoutNeighborhoodInput = {
    where: AddressScalarWhereInput;
    data: XOR<
      AddressUpdateManyMutationInput,
      AddressUncheckedUpdateManyWithoutNeighborhoodInput
    >;
  };

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[];
    OR?: AddressScalarWhereInput[];
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[];
    id?: StringFilter<"Address"> | string;
    alias?: StringFilter<"Address"> | string;
    name?: StringFilter<"Address"> | string;
    address?: StringFilter<"Address"> | string;
    city?: StringFilter<"Address"> | string;
    state?: StringFilter<"Address"> | string;
    reference?: StringNullableFilter<"Address"> | string | null;
    neighborhoodId?: StringNullableFilter<"Address"> | string | null;
  };

  export type BusinessNeighborhoodUpsertWithWhereUniqueWithoutNeighborhoodInput =
    {
      where: BusinessNeighborhoodWhereUniqueInput;
      update: XOR<
        BusinessNeighborhoodUpdateWithoutNeighborhoodInput,
        BusinessNeighborhoodUncheckedUpdateWithoutNeighborhoodInput
      >;
      create: XOR<
        BusinessNeighborhoodCreateWithoutNeighborhoodInput,
        BusinessNeighborhoodUncheckedCreateWithoutNeighborhoodInput
      >;
    };

  export type BusinessNeighborhoodUpdateWithWhereUniqueWithoutNeighborhoodInput =
    {
      where: BusinessNeighborhoodWhereUniqueInput;
      data: XOR<
        BusinessNeighborhoodUpdateWithoutNeighborhoodInput,
        BusinessNeighborhoodUncheckedUpdateWithoutNeighborhoodInput
      >;
    };

  export type BusinessNeighborhoodUpdateManyWithWhereWithoutNeighborhoodInput =
    {
      where: BusinessNeighborhoodScalarWhereInput;
      data: XOR<
        BusinessNeighborhoodUpdateManyMutationInput,
        BusinessNeighborhoodUncheckedUpdateManyWithoutNeighborhoodInput
      >;
    };

  export type AddressCreateWithoutUserAddressInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhood?: NeighborhoodCreateNestedOneWithoutAddressesInput;
    orderAddress?: OrderAddressCreateNestedOneWithoutAddressInput;
  };

  export type AddressUncheckedCreateWithoutUserAddressInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhoodId?: string | null;
    orderAddress?: OrderAddressUncheckedCreateNestedOneWithoutAddressInput;
  };

  export type AddressCreateOrConnectWithoutUserAddressInput = {
    where: AddressWhereUniqueInput;
    create: XOR<
      AddressCreateWithoutUserAddressInput,
      AddressUncheckedCreateWithoutUserAddressInput
    >;
  };

  export type UserCreateWithoutAddressInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderCreateNestedManyWithoutUserInput;
    accounts?: AccountCreateNestedManyWithoutUserInput;
    sessions?: SessionCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput;
    business?: UserBusinessCreateNestedManyWithoutUserInput;
  };

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: string;
    role?: $Enums.UserRoles;
    name?: string | null;
    phone?: string | null;
    email: string;
    emailVerified?: Date | string | null;
    image?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput;
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput;
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput;
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput;
    business?: UserBusinessUncheckedCreateNestedManyWithoutUserInput;
  };

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutAddressInput,
      UserUncheckedCreateWithoutAddressInput
    >;
  };

  export type BusinessCreateWithoutUserAddressInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutUserAddressInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutUserAddressInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutUserAddressInput,
      BusinessUncheckedCreateWithoutUserAddressInput
    >;
  };

  export type AddressUpsertWithoutUserAddressInput = {
    update: XOR<
      AddressUpdateWithoutUserAddressInput,
      AddressUncheckedUpdateWithoutUserAddressInput
    >;
    create: XOR<
      AddressCreateWithoutUserAddressInput,
      AddressUncheckedCreateWithoutUserAddressInput
    >;
    where?: AddressWhereInput;
  };

  export type AddressUpdateToOneWithWhereWithoutUserAddressInput = {
    where?: AddressWhereInput;
    data: XOR<
      AddressUpdateWithoutUserAddressInput,
      AddressUncheckedUpdateWithoutUserAddressInput
    >;
  };

  export type AddressUpdateWithoutUserAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhood?: NeighborhoodUpdateOneWithoutAddressesNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutAddressNestedInput;
  };

  export type AddressUncheckedUpdateWithoutUserAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhoodId?: NullableStringFieldUpdateOperationsInput | string | null;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutAddressNestedInput;
  };

  export type UserUpsertWithoutAddressInput = {
    update: XOR<
      UserUpdateWithoutAddressInput,
      UserUncheckedUpdateWithoutAddressInput
    >;
    create: XOR<
      UserCreateWithoutAddressInput,
      UserUncheckedCreateWithoutAddressInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutAddressInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutAddressInput,
      UserUncheckedUpdateWithoutAddressInput
    >;
  };

  export type UserUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUpdateManyWithoutUserNestedInput;
    accounts?: AccountUpdateManyWithoutUserNestedInput;
    sessions?: SessionUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUpdateManyWithoutUserNestedInput;
  };

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    role?: EnumUserRolesFieldUpdateOperationsInput | $Enums.UserRoles;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: StringFieldUpdateOperationsInput | string;
    emailVerified?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    image?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput;
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput;
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput;
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput;
    business?: UserBusinessUncheckedUpdateManyWithoutUserNestedInput;
  };

  export type BusinessUpsertWithoutUserAddressInput = {
    update: XOR<
      BusinessUpdateWithoutUserAddressInput,
      BusinessUncheckedUpdateWithoutUserAddressInput
    >;
    create: XOR<
      BusinessCreateWithoutUserAddressInput,
      BusinessUncheckedCreateWithoutUserAddressInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutUserAddressInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutUserAddressInput,
      BusinessUncheckedUpdateWithoutUserAddressInput
    >;
  };

  export type BusinessUpdateWithoutUserAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutUserAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    businessNeighborhood?: BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type AddressCreateWithoutOrderAddressInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhood?: NeighborhoodCreateNestedOneWithoutAddressesInput;
    userAddress?: UserAddressCreateNestedOneWithoutAddressInput;
  };

  export type AddressUncheckedCreateWithoutOrderAddressInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
    neighborhoodId?: string | null;
    userAddress?: UserAddressUncheckedCreateNestedOneWithoutAddressInput;
  };

  export type AddressCreateOrConnectWithoutOrderAddressInput = {
    where: AddressWhereUniqueInput;
    create: XOR<
      AddressCreateWithoutOrderAddressInput,
      AddressUncheckedCreateWithoutOrderAddressInput
    >;
  };

  export type OrderCreateWithoutOrderAddressInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
    user?: UserCreateNestedOneWithoutOrdersInput;
    items?: OrderProductCreateNestedManyWithoutOrderInput;
    business?: BusinessCreateNestedOneWithoutOrdersInput;
  };

  export type OrderUncheckedCreateWithoutOrderAddressInput = {
    id?: string;
    userId?: string | null;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    businessId?: string | null;
    identifier?: string | null;
    items?: OrderProductUncheckedCreateNestedManyWithoutOrderInput;
  };

  export type OrderCreateOrConnectWithoutOrderAddressInput = {
    where: OrderWhereUniqueInput;
    create: XOR<
      OrderCreateWithoutOrderAddressInput,
      OrderUncheckedCreateWithoutOrderAddressInput
    >;
  };

  export type AddressUpsertWithoutOrderAddressInput = {
    update: XOR<
      AddressUpdateWithoutOrderAddressInput,
      AddressUncheckedUpdateWithoutOrderAddressInput
    >;
    create: XOR<
      AddressCreateWithoutOrderAddressInput,
      AddressUncheckedCreateWithoutOrderAddressInput
    >;
    where?: AddressWhereInput;
  };

  export type AddressUpdateToOneWithWhereWithoutOrderAddressInput = {
    where?: AddressWhereInput;
    data: XOR<
      AddressUpdateWithoutOrderAddressInput,
      AddressUncheckedUpdateWithoutOrderAddressInput
    >;
  };

  export type AddressUpdateWithoutOrderAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhood?: NeighborhoodUpdateOneWithoutAddressesNestedInput;
    userAddress?: UserAddressUpdateOneWithoutAddressNestedInput;
  };

  export type AddressUncheckedUpdateWithoutOrderAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    neighborhoodId?: NullableStringFieldUpdateOperationsInput | string | null;
    userAddress?: UserAddressUncheckedUpdateOneWithoutAddressNestedInput;
  };

  export type OrderUpsertWithoutOrderAddressInput = {
    update: XOR<
      OrderUpdateWithoutOrderAddressInput,
      OrderUncheckedUpdateWithoutOrderAddressInput
    >;
    create: XOR<
      OrderCreateWithoutOrderAddressInput,
      OrderUncheckedCreateWithoutOrderAddressInput
    >;
    where?: OrderWhereInput;
  };

  export type OrderUpdateToOneWithWhereWithoutOrderAddressInput = {
    where?: OrderWhereInput;
    data: XOR<
      OrderUpdateWithoutOrderAddressInput,
      OrderUncheckedUpdateWithoutOrderAddressInput
    >;
  };

  export type OrderUpdateWithoutOrderAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    user?: UserUpdateOneWithoutOrdersNestedInput;
    items?: OrderProductUpdateManyWithoutOrderNestedInput;
    business?: BusinessUpdateOneWithoutOrdersNestedInput;
  };

  export type OrderUncheckedUpdateWithoutOrderAddressInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: NullableStringFieldUpdateOperationsInput | string | null;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    items?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput;
  };

  export type BusinessCreateWithoutBusinessNeighborhoodInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethod?: PaymentMethodCreateNestedOneWithoutDefaultBusinessInput;
    telegram?: TelegramBusinessCreateNestedOneWithoutBusinessInput;
    categories?: CategoryCreateNestedManyWithoutBusinessInput;
    products?: ProductCreateNestedManyWithoutBusinessInput;
    orders?: OrderCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessUncheckedCreateWithoutBusinessNeighborhoodInput = {
    id?: string;
    name: string;
    description?: string | null;
    address?: string | null;
    phone?: string | null;
    howToArrive?: string | null;
    coordinates?: BusinessCreatecoordinatesInput | number[];
    slug?: string | null;
    active?: boolean;
    requestAddress?: boolean;
    plan?: $Enums.BusinessPlan;
    sendOrderToWhatsapp?: boolean;
    defaultPaymentMethodId?: string | null;
    telegram?: TelegramBusinessUncheckedCreateNestedOneWithoutBusinessInput;
    categories?: CategoryUncheckedCreateNestedManyWithoutBusinessInput;
    products?: ProductUncheckedCreateNestedManyWithoutBusinessInput;
    orders?: OrderUncheckedCreateNestedManyWithoutBusinessInput;
    users?: UserBusinessUncheckedCreateNestedManyWithoutBusinessInput;
    userAddress?: UserAddressUncheckedCreateNestedManyWithoutBusinessInput;
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutBusinessInput;
    invitationLinks?: InvitationLinkUncheckedCreateNestedManyWithoutBusinessInput;
  };

  export type BusinessCreateOrConnectWithoutBusinessNeighborhoodInput = {
    where: BusinessWhereUniqueInput;
    create: XOR<
      BusinessCreateWithoutBusinessNeighborhoodInput,
      BusinessUncheckedCreateWithoutBusinessNeighborhoodInput
    >;
  };

  export type NeighborhoodCreateWithoutBusinessNeighborhoodInput = {
    id?: string;
    name: string;
    city: string;
    addresses?: AddressCreateNestedManyWithoutNeighborhoodInput;
  };

  export type NeighborhoodUncheckedCreateWithoutBusinessNeighborhoodInput = {
    id?: string;
    name: string;
    city: string;
    addresses?: AddressUncheckedCreateNestedManyWithoutNeighborhoodInput;
  };

  export type NeighborhoodCreateOrConnectWithoutBusinessNeighborhoodInput = {
    where: NeighborhoodWhereUniqueInput;
    create: XOR<
      NeighborhoodCreateWithoutBusinessNeighborhoodInput,
      NeighborhoodUncheckedCreateWithoutBusinessNeighborhoodInput
    >;
  };

  export type BusinessUpsertWithoutBusinessNeighborhoodInput = {
    update: XOR<
      BusinessUpdateWithoutBusinessNeighborhoodInput,
      BusinessUncheckedUpdateWithoutBusinessNeighborhoodInput
    >;
    create: XOR<
      BusinessCreateWithoutBusinessNeighborhoodInput,
      BusinessUncheckedCreateWithoutBusinessNeighborhoodInput
    >;
    where?: BusinessWhereInput;
  };

  export type BusinessUpdateToOneWithWhereWithoutBusinessNeighborhoodInput = {
    where?: BusinessWhereInput;
    data: XOR<
      BusinessUpdateWithoutBusinessNeighborhoodInput,
      BusinessUncheckedUpdateWithoutBusinessNeighborhoodInput
    >;
  };

  export type BusinessUpdateWithoutBusinessNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethod?: PaymentMethodUpdateOneWithoutDefaultBusinessNestedInput;
    telegram?: TelegramBusinessUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUpdateManyWithoutBusinessNestedInput;
    products?: ProductUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUpdateManyWithoutBusinessNestedInput;
  };

  export type BusinessUncheckedUpdateWithoutBusinessNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    address?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    howToArrive?: NullableStringFieldUpdateOperationsInput | string | null;
    coordinates?: BusinessUpdatecoordinatesInput | number[];
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    requestAddress?: BoolFieldUpdateOperationsInput | boolean;
    plan?: EnumBusinessPlanFieldUpdateOperationsInput | $Enums.BusinessPlan;
    sendOrderToWhatsapp?: BoolFieldUpdateOperationsInput | boolean;
    defaultPaymentMethodId?:
      | NullableStringFieldUpdateOperationsInput
      | string
      | null;
    telegram?: TelegramBusinessUncheckedUpdateOneWithoutBusinessNestedInput;
    categories?: CategoryUncheckedUpdateManyWithoutBusinessNestedInput;
    products?: ProductUncheckedUpdateManyWithoutBusinessNestedInput;
    orders?: OrderUncheckedUpdateManyWithoutBusinessNestedInput;
    users?: UserBusinessUncheckedUpdateManyWithoutBusinessNestedInput;
    userAddress?: UserAddressUncheckedUpdateManyWithoutBusinessNestedInput;
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutBusinessNestedInput;
    invitationLinks?: InvitationLinkUncheckedUpdateManyWithoutBusinessNestedInput;
  };

  export type NeighborhoodUpsertWithoutBusinessNeighborhoodInput = {
    update: XOR<
      NeighborhoodUpdateWithoutBusinessNeighborhoodInput,
      NeighborhoodUncheckedUpdateWithoutBusinessNeighborhoodInput
    >;
    create: XOR<
      NeighborhoodCreateWithoutBusinessNeighborhoodInput,
      NeighborhoodUncheckedCreateWithoutBusinessNeighborhoodInput
    >;
    where?: NeighborhoodWhereInput;
  };

  export type NeighborhoodUpdateToOneWithWhereWithoutBusinessNeighborhoodInput =
    {
      where?: NeighborhoodWhereInput;
      data: XOR<
        NeighborhoodUpdateWithoutBusinessNeighborhoodInput,
        NeighborhoodUncheckedUpdateWithoutBusinessNeighborhoodInput
      >;
    };

  export type NeighborhoodUpdateWithoutBusinessNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    addresses?: AddressUpdateManyWithoutNeighborhoodNestedInput;
  };

  export type NeighborhoodUncheckedUpdateWithoutBusinessNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    addresses?: AddressUncheckedUpdateManyWithoutNeighborhoodNestedInput;
  };

  export type CategoryCreateManyBusinessInput = {
    id?: string;
    name: string;
    slug?: string | null;
    active?: boolean;
    priority?: number;
  };

  export type ProductCreateManyBusinessInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    categoryId?: string | null;
  };

  export type OrderCreateManyBusinessInput = {
    id?: string;
    userId?: string | null;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    identifier?: string | null;
  };

  export type UserBusinessCreateManyBusinessInput = {
    userId: string;
    type?: $Enums.UserBusinessType;
  };

  export type BusinessNeighborhoodCreateManyBusinessInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    neighborhoodId: string;
  };

  export type UserAddressCreateManyBusinessInput = {
    id?: string;
    addressId: string;
    userId: string;
  };

  export type PaymentMethodCreateManyBusinessInput = {
    id?: string;
    name: string;
    type: $Enums.PaymentMethodType;
    data: JsonNullValueInput | InputJsonValue;
  };

  export type InvitationLinkCreateManyBusinessInput = {
    id?: string;
    code: string;
    createdAt?: Date | string;
  };

  export type CategoryUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    products?: ProductUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    active?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
  };

  export type ProductUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    category?: CategoryUpdateOneWithoutProductsNestedInput;
    orderItems?: OrderProductUpdateManyWithoutProductNestedInput;
  };

  export type ProductUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null;
    orderItems?: OrderProductUncheckedUpdateManyWithoutProductNestedInput;
  };

  export type ProductUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    user?: UserUpdateOneWithoutOrdersNestedInput;
    items?: OrderProductUpdateManyWithoutOrderNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutOrderNestedInput;
  };

  export type OrderUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: NullableStringFieldUpdateOperationsInput | string | null;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    items?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput;
  };

  export type OrderUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    userId?: NullableStringFieldUpdateOperationsInput | string | null;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type UserBusinessUpdateWithoutBusinessInput = {
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput;
  };

  export type UserBusinessUncheckedUpdateWithoutBusinessInput = {
    userId?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type UserBusinessUncheckedUpdateManyWithoutBusinessInput = {
    userId?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type BusinessNeighborhoodUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutBusinessNeighborhoodNestedInput;
  };

  export type BusinessNeighborhoodUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    neighborhoodId?: StringFieldUpdateOperationsInput | string;
  };

  export type BusinessNeighborhoodUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    neighborhoodId?: StringFieldUpdateOperationsInput | string;
  };

  export type UserAddressUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    address?: AddressUpdateOneRequiredWithoutUserAddressNestedInput;
    user?: UserUpdateOneRequiredWithoutAddressNestedInput;
  };

  export type UserAddressUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
  };

  export type UserAddressUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    userId?: StringFieldUpdateOperationsInput | string;
  };

  export type PaymentMethodUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    defaultBusiness?: BusinessUpdateOneWithoutDefaultPaymentMethodNestedInput;
  };

  export type PaymentMethodUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
    defaultBusiness?: BusinessUncheckedUpdateOneWithoutDefaultPaymentMethodNestedInput;
  };

  export type PaymentMethodUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumPaymentMethodTypeFieldUpdateOperationsInput
      | $Enums.PaymentMethodType;
    data?: JsonNullValueInput | InputJsonValue;
  };

  export type InvitationLinkUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type InvitationLinkUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type InvitationLinkUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string;
    code?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ProductCreateManyCategoryInput = {
    id?: string;
    name: string;
    slug?: string | null;
    image: JsonNullValueInput | InputJsonValue;
    description: string;
    price: number;
    offerPrice?: number | null;
    images?: ProductCreateimagesInput | InputJsonValue[];
    active?: boolean;
    isNew?: boolean;
    priority?: number;
    stock?: number;
    allowOrderOutOfStock?: boolean;
    isExhaustible?: boolean;
    businessId: string;
  };

  export type ProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    business?: BusinessUpdateOneRequiredWithoutProductsNestedInput;
    orderItems?: OrderProductUpdateManyWithoutProductNestedInput;
  };

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
    orderItems?: OrderProductUncheckedUpdateManyWithoutProductNestedInput;
  };

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    slug?: NullableStringFieldUpdateOperationsInput | string | null;
    image?: JsonNullValueInput | InputJsonValue;
    description?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    offerPrice?: NullableIntFieldUpdateOperationsInput | number | null;
    images?: ProductUpdateimagesInput | InputJsonValue[];
    active?: BoolFieldUpdateOperationsInput | boolean;
    isNew?: BoolFieldUpdateOperationsInput | boolean;
    priority?: IntFieldUpdateOperationsInput | number;
    stock?: IntFieldUpdateOperationsInput | number;
    allowOrderOutOfStock?: BoolFieldUpdateOperationsInput | boolean;
    isExhaustible?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type OrderProductCreateManyProductInput = {
    orderId: string;
    price: number;
    position?: number;
    quantity: number;
  };

  export type OrderProductUpdateWithoutProductInput = {
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput;
  };

  export type OrderProductUncheckedUpdateWithoutProductInput = {
    orderId?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type OrderProductUncheckedUpdateManyWithoutProductInput = {
    orderId?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type OrderCreateManyUserInput = {
    id?: string;
    productsDetails: JsonNullValueInput | InputJsonValue;
    shipping?: number;
    hasShipping?: boolean;
    total?: number;
    status?: $Enums.OrderStatus;
    sentAt?: Date | string | null;
    position?: number | null;
    businessId?: string | null;
    identifier?: string | null;
  };

  export type AccountCreateManyUserInput = {
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null;
    access_token?: string | null;
    expires_at?: number | null;
    token_type?: string | null;
    scope?: string | null;
    id_token?: string | null;
    session_state?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SessionCreateManyUserInput = {
    sessionToken: string;
    expires: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type AuthenticatorCreateManyUserInput = {
    credentialID: string;
    providerAccountId: string;
    credentialPublicKey: string;
    counter: number;
    credentialDeviceType: string;
    credentialBackedUp: boolean;
    transports?: string | null;
  };

  export type UserBusinessCreateManyUserInput = {
    businessId: string;
    type?: $Enums.UserBusinessType;
  };

  export type UserAddressCreateManyUserInput = {
    id?: string;
    addressId: string;
    businessId?: string | null;
  };

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    items?: OrderProductUpdateManyWithoutOrderNestedInput;
    business?: BusinessUpdateOneWithoutOrdersNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutOrderNestedInput;
  };

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
    items?: OrderProductUncheckedUpdateManyWithoutOrderNestedInput;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput;
  };

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    productsDetails?: JsonNullValueInput | InputJsonValue;
    shipping?: IntFieldUpdateOperationsInput | number;
    hasShipping?: BoolFieldUpdateOperationsInput | boolean;
    total?: IntFieldUpdateOperationsInput | number;
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus;
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    position?: NullableIntFieldUpdateOperationsInput | number | null;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
    identifier?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AccountUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type AccountUncheckedUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string;
    provider?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null;
    access_token?: NullableStringFieldUpdateOperationsInput | string | null;
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null;
    token_type?: NullableStringFieldUpdateOperationsInput | string | null;
    scope?: NullableStringFieldUpdateOperationsInput | string | null;
    id_token?: NullableStringFieldUpdateOperationsInput | string | null;
    session_state?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SessionUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SessionUncheckedUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string;
    expires?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type AuthenticatorUpdateWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AuthenticatorUncheckedUpdateWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type AuthenticatorUncheckedUpdateManyWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string;
    providerAccountId?: StringFieldUpdateOperationsInput | string;
    credentialPublicKey?: StringFieldUpdateOperationsInput | string;
    counter?: IntFieldUpdateOperationsInput | number;
    credentialDeviceType?: StringFieldUpdateOperationsInput | string;
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean;
    transports?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type UserBusinessUpdateWithoutUserInput = {
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
    business?: BusinessUpdateOneRequiredWithoutUsersNestedInput;
  };

  export type UserBusinessUncheckedUpdateWithoutUserInput = {
    businessId?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type UserBusinessUncheckedUpdateManyWithoutUserInput = {
    businessId?: StringFieldUpdateOperationsInput | string;
    type?:
      | EnumUserBusinessTypeFieldUpdateOperationsInput
      | $Enums.UserBusinessType;
  };

  export type UserAddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    address?: AddressUpdateOneRequiredWithoutUserAddressNestedInput;
    business?: BusinessUpdateOneWithoutUserAddressNestedInput;
  };

  export type UserAddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type UserAddressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string;
    addressId?: StringFieldUpdateOperationsInput | string;
    businessId?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type OrderProductCreateManyOrderInput = {
    productId: string;
    price: number;
    position?: number;
    quantity: number;
  };

  export type OrderProductUpdateWithoutOrderInput = {
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput;
  };

  export type OrderProductUncheckedUpdateWithoutOrderInput = {
    productId?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type OrderProductUncheckedUpdateManyWithoutOrderInput = {
    productId?: StringFieldUpdateOperationsInput | string;
    price?: IntFieldUpdateOperationsInput | number;
    position?: IntFieldUpdateOperationsInput | number;
    quantity?: IntFieldUpdateOperationsInput | number;
  };

  export type AddressCreateManyNeighborhoodInput = {
    id?: string;
    alias: string;
    name: string;
    address: string;
    city: string;
    state: string;
    reference?: string | null;
  };

  export type BusinessNeighborhoodCreateManyNeighborhoodInput = {
    id?: string;
    shipping?: number;
    active?: boolean;
    businessId: string;
  };

  export type AddressUpdateWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    userAddress?: UserAddressUpdateOneWithoutAddressNestedInput;
    orderAddress?: OrderAddressUpdateOneWithoutAddressNestedInput;
  };

  export type AddressUncheckedUpdateWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
    userAddress?: UserAddressUncheckedUpdateOneWithoutAddressNestedInput;
    orderAddress?: OrderAddressUncheckedUpdateOneWithoutAddressNestedInput;
  };

  export type AddressUncheckedUpdateManyWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    alias?: StringFieldUpdateOperationsInput | string;
    name?: StringFieldUpdateOperationsInput | string;
    address?: StringFieldUpdateOperationsInput | string;
    city?: StringFieldUpdateOperationsInput | string;
    state?: StringFieldUpdateOperationsInput | string;
    reference?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type BusinessNeighborhoodUpdateWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    business?: BusinessUpdateOneRequiredWithoutBusinessNeighborhoodNestedInput;
  };

  export type BusinessNeighborhoodUncheckedUpdateWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string;
    shipping?: IntFieldUpdateOperationsInput | number;
    active?: BoolFieldUpdateOperationsInput | boolean;
    businessId?: StringFieldUpdateOperationsInput | string;
  };

  export type BusinessNeighborhoodUncheckedUpdateManyWithoutNeighborhoodInput =
    {
      id?: StringFieldUpdateOperationsInput | string;
      shipping?: IntFieldUpdateOperationsInput | number;
      active?: BoolFieldUpdateOperationsInput | boolean;
      businessId?: StringFieldUpdateOperationsInput | string;
    };

  /**
   * Aliases for legacy arg types
   */
  /**
   * @deprecated Use BusinessCountOutputTypeDefaultArgs instead
   */
  export type BusinessCountOutputTypeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = BusinessCountOutputTypeDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
   */
  export type CategoryCountOutputTypeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = CategoryCountOutputTypeDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use ProductCountOutputTypeDefaultArgs instead
   */
  export type ProductCountOutputTypeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = ProductCountOutputTypeDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use UserCountOutputTypeDefaultArgs instead
   */
  export type UserCountOutputTypeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = UserCountOutputTypeDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use OrderCountOutputTypeDefaultArgs instead
   */
  export type OrderCountOutputTypeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = OrderCountOutputTypeDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use NeighborhoodCountOutputTypeDefaultArgs instead
   */
  export type NeighborhoodCountOutputTypeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = NeighborhoodCountOutputTypeDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use BusinessDefaultArgs instead
   */
  export type BusinessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = BusinessDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use TelegramBusinessDefaultArgs instead
   */
  export type TelegramBusinessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = TelegramBusinessDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use PaymentMethodDefaultArgs instead
   */
  export type PaymentMethodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = PaymentMethodDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use CategoryDefaultArgs instead
   */
  export type CategoryArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = CategoryDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use ProductDefaultArgs instead
   */
  export type ProductArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = ProductDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use UserDefaultArgs instead
   */
  export type UserArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = UserDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use UserBusinessDefaultArgs instead
   */
  export type UserBusinessArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = UserBusinessDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use InvitationLinkDefaultArgs instead
   */
  export type InvitationLinkArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = InvitationLinkDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use OrderDefaultArgs instead
   */
  export type OrderArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = OrderDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use OrderProductDefaultArgs instead
   */
  export type OrderProductArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = OrderProductDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use AccountDefaultArgs instead
   */
  export type AccountArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = AccountDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use SessionDefaultArgs instead
   */
  export type SessionArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = SessionDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use VerificationTokenDefaultArgs instead
   */
  export type VerificationTokenArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = VerificationTokenDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use AuthenticatorDefaultArgs instead
   */
  export type AuthenticatorArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = AuthenticatorDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use AddressDefaultArgs instead
   */
  export type AddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = AddressDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use NeighborhoodDefaultArgs instead
   */
  export type NeighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = NeighborhoodDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use UserAddressDefaultArgs instead
   */
  export type UserAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = UserAddressDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use OrderAddressDefaultArgs instead
   */
  export type OrderAddressArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = OrderAddressDefaultArgs<ExtArgs>;
  /**
   * @deprecated Use BusinessNeighborhoodDefaultArgs instead
   */
  export type BusinessNeighborhoodArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = BusinessNeighborhoodDefaultArgs<ExtArgs>;

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number;
  };

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF;
}
